
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/Script/blow/bomb1');
require('./assets/Script/blow/bomb2');
require('./assets/Script/blow/bomb3');
require('./assets/Script/bullet/bullet1');
require('./assets/Script/bullet/bullet10');
require('./assets/Script/bullet/bullet2');
require('./assets/Script/bullet/bullet3');
require('./assets/Script/bullet/bullet4');
require('./assets/Script/bullet/bullet5');
require('./assets/Script/bullet/bullet6');
require('./assets/Script/bullet/bullet7');
require('./assets/Script/bullet/bullet8');
require('./assets/Script/bullet/bullet9');
require('./assets/Script/bullet/hurt');
require('./assets/Script/config/binConfig');
require('./assets/Script/config/gameConfig');
require('./assets/Script/config/gamePopup');
require('./assets/Script/config/gameSound');
require('./assets/Script/config/guan1_1');
require('./assets/Script/config/zhujueConfig');
require('./assets/Script/control/buttonControl');
require('./assets/Script/control/control');
require('./assets/Script/control/joystick');
require('./assets/Script/control/joystickBtn');
require('./assets/Script/control/keyboard');
require('./assets/Script/control/top');
require('./assets/Script/control/touchStage');
require('./assets/Script/core/follow');
require('./assets/Script/core/hua');
require('./assets/Script/core/loading');
require('./assets/Script/core/mapSetting');
require('./assets/Script/core/min/Stately');
require('./assets/Script/core/min/async');
require('./assets/Script/core/min/jm');
require('./assets/Script/core/min/lodash');
require('./assets/Script/core/persistNode');
require('./assets/Script/core/persistPrefab');
require('./assets/Script/core/popupLayer');
require('./assets/Script/core/roleRotation');
require('./assets/Script/core/rotationNode');
require('./assets/Script/core/uiNode');
require('./assets/Script/core/utils');
require('./assets/Script/core/uuids');
require('./assets/Script/core/widget_child');
require('./assets/Script/enemy/enemyControl');
require('./assets/Script/enemy/enemyFind');
require('./assets/Script/enemy/enemyHp');
require('./assets/Script/enemy/enemyMelee');
require('./assets/Script/enemy/enemyMove');
require('./assets/Script/enemy/enemySend');
require('./assets/Script/enemy/enemySettng');
require('./assets/Script/enemy/enemySpine');
require('./assets/Script/factory/enemyFactory');
require('./assets/Script/factory/taHp');
require('./assets/Script/factory/taPaoguan');
require('./assets/Script/factory/taSprite');
require('./assets/Script/fire/fire');
require('./assets/Script/game/gameAction');
require('./assets/Script/game/gameControl');
require('./assets/Script/game/gameEvent');
require('./assets/Script/game/gameScene');
require('./assets/Script/game/gameUtils');
require('./assets/Script/game/localStorage');
require('./assets/Script/game/soundManager');
require('./assets/Script/guangka/guanItem');
require('./assets/Script/guangka/guankazhang');
require('./assets/Script/layer/roleLayer');
require('./assets/Script/layer/shootBomb');
require('./assets/Script/layer/shootBullet');
require('./assets/Script/layer/shootFire');
require('./assets/Script/pool/NodePool');
require('./assets/Script/pool/PoolComponent');
require('./assets/Script/pool/hpComponent');
require('./assets/Script/pool/persisPool');
require('./assets/Script/scene/gameGuanka');
require('./assets/Script/scene/gameMain');
require('./assets/Script/scene/gameOver');
require('./assets/Script/scene/hall');
require('./assets/Script/scene/login');
require('./assets/Script/scene/mapEdit');
require('./assets/Script/scene/roleEdit');
require('./assets/Script/test/HeroHit');
require('./assets/Script/test/addMap');
require('./assets/Script/test/drag');
require('./assets/Script/test/draw');
require('./assets/Script/test/heros');
require('./assets/Script/test/itemTest');
require('./assets/Script/test/jdTest');
require('./assets/Script/test/move');
require('./assets/Script/ui/gameOverLossPanel');
require('./assets/Script/ui/gameOverWinPanel ');
require('./assets/Script/ui/gamePausePanel');
require('./assets/Script/you/youControl');
require('./assets/Script/you/youFind');
require('./assets/Script/you/youHp');
require('./assets/Script/you/youMove');
require('./assets/Script/you/youSend');
require('./assets/Script/you/youSetting');
require('./assets/Script/you/youSpine');
require('./assets/Script/zhujie/roleControl');
require('./assets/Script/zhujie/roleFind');
require('./assets/Script/zhujie/roleHp');
require('./assets/Script/zhujie/roleMove');
require('./assets/Script/zhujie/roleSpine');
require('./assets/Script/zhujie/roleSprite');
require('./assets/Script/zhujie/spine');
require('./assets/Script/zhujie/spineAction');
require('./assets/migration/use_reversed_rotateBy');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/migration/use_reversed_rotateBy.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'df6cbTJPAlOdb4DfH8/c6oy', 'use_reversed_rotateBy');
// migration/use_reversed_rotateBy.js

"use strict";

/*
 * This script is automatically generated by Cocos Creator and is only used for projects compatible with v2.1.0/v2.1.1/v2.3.0/v2.3.1/v2.3.2 versions.
 * You do not need to manually add this script in any other project.
 * If you don't use cc.Action in your project, you can delete this script directly.
 * If your project is hosted in VCS such as git, submit this script together.
 *
 * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0/v2.1.1/v2.3.0/v2.3.1/v2.3.2 版本的工程，
 * 你无需在任何其它项目中手动添加此脚本。
 * 如果你的项目中没用到 Action，可直接删除该脚本。
 * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。
 */
cc.RotateBy._reverse = true;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbWlncmF0aW9uXFx1c2VfcmV2ZXJzZWRfcm90YXRlQnkuanMiXSwibmFtZXMiOlsiY2MiLCJSb3RhdGVCeSIsIl9yZXZlcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxRQUFILENBQVlDLFFBQVosR0FBdUIsSUFBdkIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIFRoaXMgc2NyaXB0IGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IENvY29zIENyZWF0b3IgYW5kIGlzIG9ubHkgdXNlZCBmb3IgcHJvamVjdHMgY29tcGF0aWJsZSB3aXRoIHYyLjEuMC92Mi4xLjEvdjIuMy4wL3YyLjMuMS92Mi4zLjIgdmVyc2lvbnMuXHJcbiAqIFlvdSBkbyBub3QgbmVlZCB0byBtYW51YWxseSBhZGQgdGhpcyBzY3JpcHQgaW4gYW55IG90aGVyIHByb2plY3QuXHJcbiAqIElmIHlvdSBkb24ndCB1c2UgY2MuQWN0aW9uIGluIHlvdXIgcHJvamVjdCwgeW91IGNhbiBkZWxldGUgdGhpcyBzY3JpcHQgZGlyZWN0bHkuXHJcbiAqIElmIHlvdXIgcHJvamVjdCBpcyBob3N0ZWQgaW4gVkNTIHN1Y2ggYXMgZ2l0LCBzdWJtaXQgdGhpcyBzY3JpcHQgdG9nZXRoZXIuXHJcbiAqXHJcbiAqIOatpOiEmuacrOeUsSBDb2NvcyBDcmVhdG9yIOiHquWKqOeUn+aIkO+8jOS7heeUqOS6juWFvOWuuSB2Mi4xLjAvdjIuMS4xL3YyLjMuMC92Mi4zLjEvdjIuMy4yIOeJiOacrOeahOW3peeoi++8jFxyXG4gKiDkvaDml6DpnIDlnKjku7vkvZXlhbblroPpobnnm67kuK3miYvliqjmt7vliqDmraTohJrmnKzjgIJcclxuICog5aaC5p6c5L2g55qE6aG555uu5Lit5rKh55So5YiwIEFjdGlvbu+8jOWPr+ebtOaOpeWIoOmZpOivpeiEmuacrOOAglxyXG4gKiDlpoLmnpzkvaDnmoTpobnnm67mnInmiZjnrqHkuo4gZ2l0IOetieeJiOacrOW6k++8jOivt+WwhuatpOiEmuacrOS4gOW5tuS4iuS8oOOAglxyXG4gKi9cclxuXHJcbmNjLlJvdGF0ZUJ5Ll9yZXZlcnNlID0gdHJ1ZTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/min/jm.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e0d0eWJwgNO+7WlRuA/idaQ', 'jm');
// Script/core/min/jm.js

"use strict";

var jm = jm || {};

var _ = require("lodash");

(function () {
  if (jm.root) return;
  jm.root = {};
  jm.root.registries = {};
})();

module.exports = jm;

(function () {
  if (jm.Class) return;
  var fnTest = /xyz/.test(function () {
    xyz;
  }) ? /\b_super\b/ : /.*/; // The base Class implementation (does nothing)

  jm.Class = function () {}; // Create a new Class that inherits from this class


  jm.Class.extend = function (prop) {
    var _super = this.prototype; // Instantiate a base class (but only create the instance,
    // don't run the init constructor)

    var prototype = Object.create(_super); // Copy the properties over onto the new prototype

    for (var name in prop) {
      if (name == 'properties') {
        continue;
      } // Check if we're overwriting an existing function


      prototype[name] = typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name]) ? function (name, fn) {
        return function () {
          var tmp = this._super; // Add a new ._super() method that is the same method
          // but on the super-class

          this._super = _super[name]; // The method only need to be bound temporarily, so we
          // remove it when we're done executing

          var ret = fn.apply(this, arguments);
          this._super = tmp;
          return ret;
        };
      }(name, prop[name]) : prop[name];
    }

    {
      var properties = prop['properties'];

      for (var key in properties) {
        var desc = properties[key];

        if (desc.get && typeof desc.get == "string") {
          desc.get = prototype[desc.get];
        }

        if (desc.set && typeof desc.set == "string") {
          desc.set = prototype[desc.set];
        }

        Object.defineProperty(prototype, key, desc);
      }
    } // The dummy class constructor

    function Class() {
      if (this._className) {
        Object.defineProperty(this, "className", {
          value: this._className,
          writable: false
        });
      } // All construction is actually done in the init method


      if (this.ctor) this.ctor.apply(this, arguments);
    } // Populate our constructed prototype object


    Class.prototype = prototype; // Enforce the constructor to be what we expect

    Class.prototype.constructor = Class; // And make this class extendable

    Class.extend = jm.Class.extend;
    return Class;
  };
})();

(function () {
  if (jm.Object) return;
  jm.Object = jm.Class.extend({
    _className: 'object',
    attr: function attr(attrs) {
      for (var key in attrs) {
        if (key === 'className') {
          continue;
        }

        this[key] = attrs[key];
      }
    }
  });

  jm.object = function () {
    return new jm.Object();
  };
})();

(function () {
  if (jm.Random) return;
  var iRandomMax = 200000000000; //最大随机整数范围 0 <= randomValue <= iRandomMax;

  jm.Random = jm.Class.extend({
    _className: 'random',
    properties: {
      seed: {
        get: 'getSeed',
        set: 'setSeed'
      }
    },
    ctor: function ctor(opts) {
      opts = opts || {};
      this.g_seed = 0;
      this.randomMax = opts.randomMax || iRandomMax;
    },
    setSeed: function setSeed(seed) {
      this.g_seed = seed;
    },
    getSeed: function getSeed() {
      return this.g_seed;
    },
    random: function random() {
      this.g_seed = (this.g_seed * 9301 + 49297) % 233280;
      return this.g_seed / 233280.0;
    },
    //min<=result<=max
    randomInt: function randomInt(min, max) {
      if (max === undefined) {
        max = min;
        min = 0;
      }

      var range = min + this.random() * (max - min);
      return Math.round(range);
    },
    //min<=result<=max
    randomDouble: function randomDouble(min, max) {
      if (max === undefined) {
        max = min;
        min = 0.0;
      }

      var range = min + this.random() * (max - min);
      return range;
    },
    randomRange: function randomRange(range) {
      return this.randomInt(0, this.randomMax) % range;
    },
    randomOdds: function randomOdds(range, odds) {
      if (this.randomRange(range) < odds) return 1;
      return 0;
    }
  });

  jm.random = function (opts) {
    return new jm.Random(opts);
  };
})();

(function () {
  if (jm.EventEmitter) return;
  jm.EventEmitter = jm.Object.extend({
    _className: 'eventEmitter',
    ctor: function ctor() {
      this._events = {};
      this._persistEvents = {};
      this.addListener = this.on;
    },
    __createListener: function __createListener(fn, caller) {
      caller = caller;
      return {
        fn: fn,
        caller: caller
      };
    },
    __equalsListener: function __equalsListener(listener1, listener2) {
      return listener1.fn === listener2.fn && listener1.caller === listener2.caller;
    },

    /**
     * Adds a listener
     * @api public
     */
    on: function on(name, fn, caller) {
      var listener = this.__createListener(fn, caller);

      if (!this._events[name]) {
        this._events[name] = listener;
      } else if (Array.isArray(this._events[name])) {
        this._events[name].push(listener);
      } else {
        this._events[name] = [this._events[name], listener];
      }

      return this;
    },
    onPersist: function onPersist(name, fn, caller) {
      var listener = this.__createListener(fn, caller);

      if (!this._persistEvents[name]) {
        this._persistEvents[name] = listener;
      } else if (Array.isArray(this._persistEvents[name])) {
        this._persistEvents[name].push(listener);
      } else {
        this._persistEvents[name] = [this._persistEvents[name], listener];
      }

      return this;
    },

    /**
     * Adds a volatile listener.
     * @api public
     */
    once: function once(name, fn, caller) {
      var self = this;

      var listener = this.__createListener(fn, caller);

      function on(arg1, arg2, arg3, arg4, arg5) {
        self.removeListener(name, on);
        fn.call(listener.caller, arg1, arg2, arg3, arg4, arg5);
      }

      ;
      on.listener = listener;
      this.on(name, on);
      return this;
    },

    /**
     * Removes a listener.
     * @api public
     */
    removeListener: function removeListener(name, fn, caller) {
      var listener = this.__createListener(fn, caller);

      if (this._events && this._events[name]) {
        var list = this._events[name];

        if (Array.isArray(list)) {
          var pos = -1;

          for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];

            if (this.__equalsListener(o, listener) || o.listener && this.__equalsListener(o.listener, listener)) {
              pos = i;
              break;
            }
          }

          if (pos < 0) {
            return this;
          }

          list.splice(pos, 1);

          if (!list.length) {
            delete this._events[name];
          }
        } else if (this.__equalsListener(list, listener) || list.listener && this.__equalsListener(list.listener, listener)) {
          delete this._events[name];
        }
      }

      return this;
    },
    removePersistListener: function removePersistListener(name, fn, caller) {
      var listener = this.__createListener(fn, caller);

      if (this._persistEvents && this._persistEvents[name]) {
        var list = this._persistEvents[name];

        if (Array.isArray(list)) {
          var pos = -1;

          for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];

            if (this.__equalsListener(o, listener) || o.listener && this.__equalsListener(o.listener, listener)) {
              pos = i;
              break;
            }
          }

          if (pos < 0) {
            return this;
          }

          list.splice(pos, 1);

          if (!list.length) {
            delete this._persistEvents[name];
          }
        } else if (this.__equalsListener(list, listener) || list.listener && this.__equalsListener(list.listener, listener)) {
          delete this._persistEvents[name];
        }
      }

      return this;
    },
    //移除NODE注册的所有事件。
    delListener: function delListener(caller) {
      for (var name in this._events) {
        var list = this._events[name];

        if (!Array.isArray(list)) {
          list = [list];
        }

        list = list.concat();

        for (var i in list) {
          var listener = list[i];

          if (listener.caller && listener.fn && listener.caller === caller) {
            this.removeListener(name, listener.fn, caller);
          }
        }
      }
    },

    /**
     * Removes all listeners for an event.
     * @api public
     */
    removeAllListeners: function removeAllListeners(name) {
      if (name === undefined) {
        this._events = {};
        return this;
      }

      if (this._events && this._events[name]) {
        //this._events[name] = null;
        delete this._events[name];
      }

      return this;
    },

    /**
     * Gets all listeners for a certain event.
     *
     * @api publci
     */
    listeners: function listeners(name) {
      if (!this._events[name]) {
        this._events[name] = [];
      }

      if (!Array.isArray(this._events[name])) {
        this._events[name] = [this._events[name]];
      }

      return this._events[name];
    },

    /**
     * Emits an event.
     *
     * tip: use arg1...arg5 instead of arguments for performance consider.
     *
     * @api public
     */
    emit: function emit(name, arg1, arg2, arg3, arg4, arg5) {
      this._emitPersist(name, arg1, arg2, arg3, arg4, arg5);

      var handler = this._events[name];
      if (!handler) return this;

      if (typeof handler === 'object' && !Array.isArray(handler)) {
        handler.fn.call(handler.caller || this, arg1, arg2, arg3, arg4, arg5);
      } else if (Array.isArray(handler)) {
        var listeners = new Array(handler.length);

        for (var i = 0; i < handler.length; i++) {
          listeners[i] = handler[i];
        }

        for (var i = 0, l = listeners.length; i < l; i++) {
          var h = listeners[i];
          if (h.fn.call(h.caller || this, arg1, arg2, arg3, arg4, arg5) === false) break;
        }
      }

      return this;
    },
    _emitPersist: function _emitPersist(name, arg1, arg2, arg3, arg4, arg5) {
      var handler = this._persistEvents[name];
      if (!handler) return this;

      if (typeof handler === 'object' && !Array.isArray(handler)) {
        handler.fn.call(handler.caller || this, arg1, arg2, arg3, arg4, arg5);
      } else if (Array.isArray(handler)) {
        var listeners = new Array(handler.length);

        for (var i = 0; i < handler.length; i++) {
          listeners[i] = handler[i];
        }

        for (var i = 0, l = listeners.length; i < l; i++) {
          var h = listeners[i];
          if (h.fn.call(h.caller || this, arg1, arg2, arg3, arg4, arg5) === false) break;
        }
      }

      return this;
    }
  });

  jm.eventEmitter = function () {
    var event = new jm.EventEmitter();
    event.off = event.removeListener;
    return event;
  };

  var prototype = jm.EventEmitter.prototype;
  var EventEmitter = {
    _events: {},
    _persistEvents: {},
    delListener: prototype.delListener,
    removePersistListener: prototype.removePersistListener,
    _emitPersist: prototype._emitPersist,
    __createListener: prototype.__createListener,
    __equalsListener: prototype.__equalsListener,
    on: prototype.on,
    once: prototype.once,
    onPersist: prototype.onPersist,
    addListener: prototype.on,
    removeListener: prototype.removeListener,
    removeEventListener: prototype.removeListener,
    off: prototype.removeListener,
    removeAllListeners: prototype.removeAllListeners,
    listeners: prototype.listeners,
    emit: prototype.emit
  };
  var em = EventEmitter;

  jm.enableEvent = function (obj) {
    if (obj._events !== undefined) return;

    for (var key in em) {
      obj[key] = em[key];
    }

    obj._events = {};
    return this;
  };

  jm.disableEvent = function (obj) {
    for (var key in em) {
      delete obj[key];
    }

    return this;
  };
})();

(function () {
  if (jm.TagObject) return;
  jm.TagObject = jm.EventEmitter.extend({
    _className: 'tagObject',
    ctor: function ctor() {
      this._super();

      this._tags = [];
      Object.defineProperty(this, "tags", {
        value: this._tags,
        writable: false
      });
    },
    destroy: function destroy() {
      this.emit('destroy', this);
      this.removeAllTags();
    },
    hasTag: function hasTag(tag) {
      var tags = this._tags;
      return tags.indexOf(tag) != -1;
    },
    hasTagAny: function hasTagAny(tags) {
      for (var i in tags) {
        var t = tags[i];
        if (this.hasTag(t)) return true;
      }

      return false;
    },
    hasTagAll: function hasTagAll(tags) {
      for (var i in tags) {
        var t = tags[i];
        if (!this.hasTag(t)) return false;
      }

      return true;
    },
    addTag: function addTag(tag) {
      var tags = this._tags;
      if (this.hasTag(tag)) return this;
      tags.push(tag);
      this.emit('addTag', tag);
      return this;
    },
    addTags: function addTags(tags) {
      for (var i in tags) {
        var t = tags[i];
        this.addTag(t);
      }

      return this;
    },
    removeTag: function removeTag(tag) {
      var tags = this._tags;
      var idx = tags.indexOf(tag);

      if (idx >= 0) {
        tags.splice(idx, 1);
      }

      this.emit('removeTag', tag);
      return this;
    },
    removeTags: function removeTags(tags) {
      for (var i in tags) {
        var t = tags[i];
        this.removeTag(t);
      }

      return this;
    },
    removeAllTags: function removeAllTags() {
      var v = this._tags;

      for (i in v) {
        this.emit('removeTag', v[i]);
      }

      this._tags = [];
      this.emit('removeAllTags');
      return this;
    }
  });

  jm.tagObject = function () {
    return new jm.TagObject();
  };

  var prototype = jm.TagObject.prototype;
  var Tag = {
    _tags: [],
    hasTag: prototype.hasTag,
    hasTagAny: prototype.hasTagAny,
    hasTagAll: prototype.hasTagAll,
    addTag: prototype.addTag,
    addTags: prototype.addTags,
    removeTag: prototype.removeTag,
    removeTags: prototype.removeTags,
    removeAllTags: prototype.removeAllTags
  };

  jm.enableTag = function (obj) {
    if (obj._tags != undefined) return;

    for (var key in Tag) {
      obj[key] = Tag[key];
    }

    obj._tags = [];
    Object.defineProperty(obj, "tags", {
      value: obj._tags,
      writable: false
    });
    jm.enableEvent(obj);
  };

  jm.disableTag = function (obj) {
    for (var key in Tag) {
      delete obj[key];
    }

    jm.disableEvent(obj);
  };
})();

(function () {
  if (jm.Entity) return;
  var guid = 1;

  function isEmptyObject(e) {
    var t;

    for (t in e) {
      return false;
    }

    return true;
  }

  jm.Entity = jm.TagObject.extend({
    _className: 'entity',
    ctor: function ctor(entityManager) {
      this._super();

      this.entityManager = entityManager;
      this._components = {};
      this._componentsByClass = {};
      this._componentGUID = 1;
      this.active = true;
      this.entityId = guid++;
      Object.defineProperty(this, "components", {
        value: this._components,
        writable: false
      });
      Object.defineProperty(this, "componentsByClass", {
        value: this._componentsByClass,
        writable: false
      });
      this.on('addTag', function (tag) {
        entityManager._entitiesByTag[tag] = entityManager._entitiesByTag[tag] || {};
        entityManager._entitiesByTag[tag][this.entityId] = this;
      });
      this.on('removeTag', function (tag) {
        var o = entityManager._entitiesByTag[tag];
        if (!o) return;
        delete o[this.entityId];
        if (isEmptyObject(o)) delete entityManager._entitiesByTag[tag];
      });
    },
    destroy: function destroy() {
      this.emit('destroy', this);
      this.removeAllComponents();
      this.removeAllTags();
    },
    removeChild: function removeChild(e) {
      this.entityManager.removeEntity(e.entityId);
      this.children = _.without(this.children, e);
      e.destroy();
    },
    removeFromParent: function removeFromParent() {
      this.removeAllTags();

      if (this.parent) {
        this.parent.removeChild(this);
      } else {
        this.entityManager.removeEntity(this.entityId);
      }
    },
    addComponent: function addComponent(c) {
      var components = this._components;
      var componentsByClass = this._componentsByClass;
      var name = c.name;
      var cClassName = c.className;
      var bUsedName = (name in components);

      if (bUsedName) {
        if (c.singleton) {
          if (bUsedName) throw "componen already exists with the name: " + name;
        }

        name = cClassName + this._componentGUID++;
        c.name = name;
      }

      if (cClassName in componentsByClass) {} else {
        componentsByClass[cClassName] = {};
      }

      var vByClass = componentsByClass[cClassName];
      components[name] = c;
      vByClass[name] = c;
      this[name] = c;
      this.addTag(cClassName);
      if (c.classAlias) this.addTag(c.classAlias);
      c.onAdd(this);
      c.emit('add', this);
      this.emit('addComponent', c);
      return this;
    },
    removeComponent: function removeComponent(c_or_name) {
      var components = this._components;
      var componentsByClass = this._componentsByClass;
      var c = c_or_name;

      if (typeof c == 'string') {
        c = components[c];
      }

      if (!c) return this;
      var name = c.name;
      var cClassName = c.className;
      var v = componentsByClass[cClassName];
      delete components[name];
      delete v[name];
      delete this[name];
      this.removeTag(cClassName);
      c.onRemove(this);
      c.emit('remove', this);
      this.emit('removeComponent', c);
      c.destroy();
      return this;
    },
    removeComponents: function removeComponents(className) {
      var v = this.getComponents(className);

      for (i in v) {
        this.removeComponent(i);
      }

      delete this._componentsByClass[className];
      this.emit('removeComponents', className);
      return this;
    },
    removeAllComponents: function removeAllComponents() {
      var v = this._components;

      for (i in v) {
        this.removeComponent(i);
      }

      this.emit('removeAllComponents');
      return this;
    },
    getComponent: function getComponent(name) {
      return this._components[name];
    },
    getComponents: function getComponents(className) {
      return this._componentsByClass[className];
    },

    /**
     * 鍘绘帀entityType涓凡缁忓畾涔夌殑鐩稿悓閮ㄥ垎
     */
    _clip: function _clip(origin, target) {
      if (!origin) {
        return;
      }

      var obj = target;

      for (var key in target) {
        var t = target[key];
        var o = origin[key];

        if (_.isObject(t)) {
          if (o) {
            this._clip(o, t);
          }

          if (_.isEmpty(t)) {
            delete target[key];
          }

          continue;
        }

        if (t === o) {
          delete target[key];
        }
      }
    },
    toJSON: function toJSON() {
      var em = this.entityManager;
      var type = this.type;
      var et = em.entityType(type);
      var opts = {
        type: type,
        tags: [],
        components: {}
      };
      opts.tags = _.cloneDeep(this.tags);
      opts.tags = _.without(opts.tags, type);
      var cs = opts.components;
      var v = this.components;

      for (i in v) {
        var c = v[i];
        cs[i] = c.toJSON();
        opts.tags = _.without(opts.tags, i, c.className);
        if (c.classAlias) opts.tags = _.without(opts.tags, c.classAlias);
        if (i === cs[i].className) delete cs[i].className;
      }

      for (i in et.tags) {
        opts.tags = _.without(opts.tags, et.tags[i]);
      }

      if (!opts.tags.length) delete opts.tags; //鍘绘帀entityType涓凡缁忓畾涔夌殑鐩稿悓閮ㄥ垎

      this._clip(et, opts);

      v = this.children;

      for (i in v) {
        var e = v[i];
        if (!opts.children) opts.children = [];
        opts.children.push(e.toJSON());
      }

      return opts;
    }
  });
})();

(function () {
  if (jm.Component) return;
  jm.Component = jm.TagObject.extend({
    _className: 'component',
    _singleton: true,
    _nameReadOnly: false,
    properties: {
      singleton: {
        get: 'getSignleton'
      },
      entity: {
        get: 'getEntity'
      },
      name: {
        get: 'getName',
        set: 'setName'
      }
    },
    ctor: function ctor(entity, opts) {
      this._super();

      this._entity = entity;
      this.active = true;
      if (opts) this.attr(opts);
    },
    destroy: function destroy() {},

    /**
     * on added to an entity
     * @param e
     */
    onAdd: function onAdd(e) {},

    /**
     * on removed from an entity
     * @param e
     */
    onRemove: function onRemove(e) {},
    getName: function getName() {
      return this._name || this.classAlias || this.className;
    },
    setName: function setName(name) {
      if (this._nameReadOnly) return;
      this._name = name;
    },
    getSignleton: function getSignleton() {
      return this._singleton;
    },
    getEntity: function getEntity() {
      return this._entity;
    },
    toJSON: function toJSON() {
      return {
        className: this.classAlias || this.className
      };
    }
  });
  jm.root.registries.components = {
    'component': jm.Component
  };

  jm.Component.extend = function (opts) {
    var Class = jm.Class.extend.call(this, opts);
    Class.extend = jm.Component.extend;
    jm.root.registries.components[Class.prototype._className] = Class;
    return Class;
  };
})();

(function () {
  if (jm.Factory) return;
  jm.Factory = jm.EventEmitter.extend({
    _className: 'factory',
    ctor: function ctor(entityManager, opts) {
      this._super(opts);

      this.entityManager = entityManager;
    },
    destory: function destory() {
      this.emit('destroy', this);

      this._super();
    },
    create: function create(opts) {
      var e = new jm.Entity(this.entityManager);
      if (!opts || !opts.components) return e;

      if (opts.parent) {
        e.parent = opts.parent;
      }

      var c;
      var em = this.entityManager;

      for (var name in opts.components) {
        var info = opts.components[name];
        var className = name;
        if (info.className) className = info.className;
        var C = em.component(className);

        if (!C) {
          C = jm.root.registries.components[className];

          if (C) {
            em.addComponent(C, className);
          } else {
            console.log(className);
            C = eval(className);

            if (C) {
              C = jm.root.registries.components[C.prototype._className];
            }

            if (C) {
              em.addComponent(C, className, true);
            } else {
              em.emit('warn', 'can not find component ' + className + ', ignored');
              continue;
            }
          }
        }

        c = new C(e, info);
        if (info.className) c.name = name;
        e.addComponent(c);
      }

      this.emit('create', e);
      return e;
    }
  });
  jm.root.registries.factories = {
    'factory': jm.Factory
  };

  jm.Factory.extend = function (opts) {
    var Class = jm.Class.extend.call(this, opts);
    Class.extend = jm.Factory.extend;
    jm.root.registries.factories[Class.prototype._className] = Class;
    return Class;
  };
})();

(function () {
  if (jm.EntityManager) return;

  var __parseConfigInfo = function __parseConfigInfo(opts, key) {
    var bArray = Array.isArray(opts);
    var className, name;

    if (bArray) {
      className = opts[key];
      name = null;
    } else {
      className = key;
      name = opts[key];
    }

    return {
      className: className,
      name: name
    };
  };

  jm.EntityManager = jm.EventEmitter.extend({
    _className: 'entityManager',
    ctor: function ctor(opts) {
      this._super();

      this._components = {};
      this._processors = {};
      this._factories = {};
      this._entityTypes = {};
      this._pools = {};
      this._entities = {};
      this._entitiesByName = {};
      this._entitiesByTag = {};
      Object.defineProperty(this, "components", {
        value: this._components,
        writable: false
      });
      Object.defineProperty(this, "processors", {
        value: this._processors,
        writable: false
      });
      Object.defineProperty(this, "factories", {
        value: this._factories,
        writable: false
      });
      Object.defineProperty(this, "entityTypes", {
        value: this._entityTypes,
        writable: false
      });
      Object.defineProperty(this, "pools", {
        value: this._pools,
        writable: false
      });
      Object.defineProperty(this, "entities", {
        value: this._entities,
        writable: false
      });
      Object.defineProperty(this, "entitiesByName", {
        value: this._entitiesByName,
        writable: false
      });
      Object.defineProperty(this, "entitiesByTag", {
        value: this._entitiesByTag,
        writable: false
      });
      var v = jm.root.registries.factories;

      for (var key in v) {
        var o = new v[key](this);
        this.addFactory(o, key);
      }

      this.init(opts);
    },
    init: function init(opts) {
      if (!opts) return;
      this.addComponents(opts.components);
      this.addProcessors(opts.processors);
      this.addFactories(opts.factories);
    },
    addComponents: function addComponents(opts) {
      var bArray = _.isArray(opts);

      for (var key in opts) {
        var info = __parseConfigInfo(opts, key);

        var C = eval(info.className);
        this.addComponent(C, info.className, true);
        this.addComponent(C, info.name);
      }

      return this;
    },
    addProcessors: function addProcessors(opts) {
      for (var key in opts) {
        var info = __parseConfigInfo(opts, key);

        var o = eval('new ' + info.className + '(this)');

        if (info.name) {
          this.addProcessor(o, info.name);
        } else {
          this.addProcessor(o, info.className);
        }
      }

      return this;
    },
    addFactories: function addFactories(opts) {
      for (var key in opts) {
        var info = __parseConfigInfo(opts, key);

        var o = eval('new ' + info.className + '(this)');
        this.addFactory(o, info.className);
        this.addFactory(o, info.name);
      }

      return this;
    },
    addComponent: function addComponent(C, name, notAlias) {
      if (!C) return this;

      if (!name) {
        name = C.prototype._className;
      } else {
        if (!notAlias) {
          if (name != C.prototype._className) {
            C.prototype.classAlias = name;
          }
        }
      }

      if (this._components[name]) {
        this.emit('warn', 'add Compoent already exists for ' + name + ', replaced.');
      }

      this._components[name] = C;
      this.emit('addComponent', name);
      return this;
    },
    removeComponent: function removeComponent(name) {
      var components = this._components;
      var o = components[name];

      if (o) {
        this.emit('removeComponent', name);
      }

      delete components[name];
      return this;
    },
    component: function component(name) {
      return this._components[name];
    },
    addEntityType: function addEntityType(type, opts) {
      if (this._entityTypes[type]) {
        this.emit('warn', 'add entityType already exists for ' + type + ', replaced.');
      }

      this._entityTypes[type] = opts;
    },
    addEntityTypes: function addEntityTypes(opts) {
      for (var type in opts) {
        this.addEntityType(type, opts[type]);
      }
    },
    entityType: function entityType(type) {
      return this._entityTypes[type];
    },
    addFactory: function addFactory(f, name) {
      if (!f) return this;
      name = name || f.name || f.className;

      if (this._factories[name]) {
        this.emit('warn', 'add factory already exists for ' + name + ', replaced.');
      }

      this._factories[name] = f;
      if (f.entityManager != this) f.entityManager = this;
      this.emit('addFactory', f);
      return this;
    },
    removeFactory: function removeFactory(name) {
      var factories = this._factories;
      var f = factories[name];

      if (f) {
        this.emit('removeFactory', f);
        delete factories[name];
        f.destroy();
      }

      return this;
    },
    factory: function factory(name) {
      return this._factories[name];
    },
    addProcessor: function addProcessor(p, name) {
      if (!p) return this;
      if (!name) name = p.name || p.className;

      if (this._processors[name]) {
        this.emit('warn', 'add processor already exists for ' + name + ', replaced.');
      }

      this._processors[name] = p;
      if (p.entityManager != this) p.entityManager = this;
      this.emit('addProcessor', p);
      return this;
    },
    removeProcessor: function removeProcessor(name) {
      var processors = this._processors;
      var p = processors[name];

      if (p) {
        this.emit('removeProcessor', p);
        delete processors[name];
        p.destroy();
      }

      return this;
    },
    processor: function processor(name) {
      return this._processors[name];
    },
    //__createEntityFromPool: function (type, opts, parent) {
    //    if (!this._entityTypes[type].poolable) return null;
    //    if (parent) return null;
    //    if (opts && opts.parent) return null;
    //    if (this._pools[type]) {
    //        var e = this._pools[type].shift();
    //        if (e) {
    //            e.emit('reuse', opts);
    //            this.addEntity(e);
    //            return e;
    //        }
    //    }
    //    return null;
    //},
    createEntity: function createEntity(type, opts, parent) {
      var e = null;
      var _opts = opts;
      opts = {};
      opts = _.cloneDeep(this._entityTypes[type]); //克隆

      if (_opts) {
        opts = _.merge(opts, _.cloneDeep(_opts)); //合并
      }

      var name = opts.factory || 'factory';
      var f = this._factories[name];
      if (!f) return null;
      if (parent) opts.parent = parent;
      e = f.create(opts);

      if (!e) {
        return null;
      }

      e.type = type;
      e.addTag(type);
      e.addTags(opts.tags);
      this.addEntity(e);
      this.createEntityChildren(e, opts);
      return e;
    },
    createEntityChildren: function createEntityChildren(e, opts) {
      //create Children
      for (var i in opts.children) {
        var info = opts.children[i];
        if (!info) continue;
        var o = null;
        var className = info.className || 'jm.Entity';

        if (className == 'jm.Entity') {
          var type = info.type;
          o = this.createEntity(type, info, e);
        }

        if (!e.children) {
          e.children = [];
        }

        e.children.push(o);
      }
    },
    addEntity: function addEntity(e, tag) {
      if (!e || !e.entityId) {
        return this;
      }

      if (tag) {
        e.addTag(tag);
      }

      this._entities[e.entityId] = e;

      if (e.name) {
        this._entitiesByName[e.name] = e;
      }

      e.emit('add', this);
      this.emit('addEntity', e);
      return this;
    },
    //
    //__removeEntityToPool: function (e) {
    //    var type = e.type;
    //    if (!this._entityTypes[type].poolable) return false;
    //    if (e.parent) return false;
    //    //濡傛灉鍙睜鍖? 瀛樺埌姹犻噷
    //    if (!this._pools[type]) this._pools[type] = [];
    //    var pool = this._pools[type];
    //    e.emit('unuse');
    //    pool.push(e);
    //    return true;
    //},
    //
    //clearPool: function (type) {
    //    var pool = this._pools[type];
    //    if (!pool) return;
    //    this._pools[type] = [];
    //    pool.forEach(function (e) {
    //        e.destroy();
    //    });
    //},
    //
    //clearPools: function () {
    //    for (var type in this._pools) {
    //        this.clearPool(type);
    //    }
    //},
    removeEntity: function removeEntity(entityId) {
      var e;

      if (_.isObject(entityId)) {
        e = entityId;
      } else {
        e = this._entities[entityId];
      }

      if (!e) {
        return this;
      }

      this.removeEntityChildren(e);
      e.emit('remove', this);
      this.emit('removeEntity', e);
      delete this._entities[e.entityId];

      if (e.name) {
        delete this._entitiesByName[e.name];
      } //if (this.__removeEntityToPool(e)) {
      //    return this;
      //} else {
      //    e.destroy();
      //}


      e.destroy();
      return this;
    },
    removeEntityChildren: function removeEntityChildren(e) {
      var v = e.children;

      for (var i in v) {
        var _e = v[i];
        this.removeEntity(_e.entityId);
      }
    },
    getEntityById: function getEntityById(eid) {
      return this._entities[eid];
    },
    //    getEntities('render')
    //    getEntities('render move tag1')  and
    //    getEntities('render, move, tag1')   or
    getEntities: function getEntities(selector) {
      var entities = this._entities;
      if (!selector) return entities;
      var v = {}; //select entities by tags

      if (typeof selector === 'string') {
        var and = false,
            //flags for multiple
        or = false;
        var rlist = /\s*,\s*/;
        var rspace = /\s+/;
        var del; //multiple components OR

        if (selector.indexOf(',') !== -1) {
          or = true;
          del = rlist;
        } else if (selector.indexOf(' ') !== -1) {
          and = true;
          del = rspace;
        }

        if (!and && !or) {
          return this._entitiesByTag[selector];
        }

        var tags = selector.split(del);
        var e;

        for (var entityId in entities) {
          e = entities[entityId];

          if (and) {
            if (!e.hasTagAll(tags)) continue;
          } else if (or) {
            if (!e.hasTagAny(tags)) continue;
          }

          v[entityId] = e;
        }
      }

      return v;
    },
    getEntity: function getEntity(selector) {
      var v = this.getEntities(selector);

      for (var i in v) {
        return v[i];
      }

      return null;
    },
    update: function update(delta) {
      this.emit('update', delta);
      var processors = this._processors;

      for (var name in processors) {
        var p = processors[name];
        p.process(delta);
      }
    }
  });

  jm.entityManager = function (opts) {
    return new jm.EntityManager(opts);
  };
})();

(function () {
  if (jm.sprintf) return;
  var sprintfWrapper = {
    init: function init() {
      if (typeof arguments == 'undefined') {
        return null;
      }

      if (arguments.length < 1) {
        return null;
      }

      if (typeof arguments[0] != 'string') {
        return null;
      }

      if (typeof RegExp == 'undefined') {
        return null;
      }

      var string = arguments[0];
      var exp = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g);
      var matches = new Array();
      var strings = new Array();
      var convCount = 0;
      var stringPosStart = 0;
      var stringPosEnd = 0;
      var matchPosEnd = 0;
      var newString = '';
      var match;

      while (match = exp.exec(string)) {
        if (match[9]) {
          convCount += 1;
        }

        stringPosStart = matchPosEnd;
        stringPosEnd = exp.lastIndex - match[0].length;
        strings[strings.length] = string.substring(stringPosStart, stringPosEnd);
        matchPosEnd = exp.lastIndex;
        matches[matches.length] = {
          match: match[0],
          left: match[3] ? true : false,
          sign: match[4] || '',
          pad: match[5] || ' ',
          min: match[6] || 0,
          precision: match[8],
          code: match[9] || '%',
          negative: parseInt(arguments[convCount]) < 0 ? true : false,
          argument: String(arguments[convCount])
        };
      }

      strings[strings.length] = string.substring(matchPosEnd);

      if (matches.length == 0) {
        return string;
      }

      if (arguments.length - 1 < convCount) {
        return null;
      }

      for (var i = 0; i < matches.length; i++) {
        var substitution;

        if (matches[i].code == '%') {
          substitution = '%';
        } else if (matches[i].code == 'b') {
          matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(2));
          substitution = sprintfWrapper.convert(matches[i], true);
        } else if (matches[i].code == 'c') {
          matches[i].argument = String(String.fromCharCode(parseInt(Math.abs(parseInt(matches[i].argument)))));
          substitution = sprintfWrapper.convert(matches[i], true);
        } else if (matches[i].code == 'd') {
          matches[i].argument = String(Math.abs(parseInt(matches[i].argument)));
          substitution = sprintfWrapper.convert(matches[i]);
        } else if (matches[i].code == 'f') {
          matches[i].argument = String(Math.abs(parseFloat(matches[i].argument)).toFixed(matches[i].precision ? matches[i].precision : 6));
          substitution = sprintfWrapper.convert(matches[i]);
        } else if (matches[i].code == 'o') {
          matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(8));
          substitution = sprintfWrapper.convert(matches[i]);
        } else if (matches[i].code == 's') {
          matches[i].argument = matches[i].argument.substring(0, matches[i].precision ? matches[i].precision : matches[i].argument.length);
          substitution = sprintfWrapper.convert(matches[i], true);
        } else if (matches[i].code == 'x') {
          matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(16));
          substitution = sprintfWrapper.convert(matches[i]);
        } else if (matches[i].code == 'X') {
          matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(16));
          substitution = sprintfWrapper.convert(matches[i]).toUpperCase();
        } else {
          substitution = matches[i].match;
        }

        newString += strings[i];
        newString += substitution;
      }

      newString += strings[i];
      return newString;
    },
    convert: function convert(match, nosign) {
      if (nosign) {
        match.sign = '';
      } else {
        match.sign = match.negative ? '-' : match.sign;
      }

      var l = match.min - match.argument.length + 1 - match.sign.length;
      var pad = new Array(l < 0 ? 0 : l).join(match.pad);

      if (!match.left) {
        if (match.pad == '0' || nosign) {
          return match.sign + pad + match.argument;
        } else {
          return pad + match.sign + match.argument;
        }
      } else {
        if (match.pad == '0' || nosign) {
          return match.sign + match.argument + pad.replace(/0/g, ' ');
        } else {
          return match.sign + match.argument + pad;
        }
      }
    }
  };
  jm.sprintf = sprintfWrapper.init;
})();

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/roleSpine.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '10232qRodJN9p1C27si7Dc/', 'roleSpine');
// Script/zhujie/roleSpine.js

"use strict";

cc.Class({
  "extends": cc.Component,
  //角色类
  properties: {},
  onDestroy: function onDestroy() {
    if (!this.parent) return;
    this.parent.off("roleState", this.setRoleState, this);
    this.parent.off("changeDirection", this.changeDirection, this);
    this.parent.off("switchSkin", this.switchSkin, this);
    game.off("stage.touch", this.stageTouch, this);
    game.off("gameOver", this.gameOver, this);
    this.node.off("aimPos", this.aimPos, this);
  },
  addEvent: function addEvent() {
    this.parent.on("roleState", this.setRoleState, this);
    this.parent.on("changeDirection", this.changeDirection, this);
    this.parent.on("switchSkin", this.switchSkin, this);
    game.on("stage.touch", this.stageTouch, this);
    game.on("gameOver", this.gameOver, this);
    this.node.on("aimPos", this.aimPos, this);
  },
  onLoad: function onLoad() {
    if (!this.parent) this.parent = this.node.parent;
    if (!this.parent) return;
    this.animationName = "";
    this.roleState = 0; //角色状态  0=静止 1=移动 2=跳跃

    this.scaleX = Math.abs(this.node.scaleX);
    this.sp = this.getComponent(sp.Skeleton);
    var sp_skeleton_data = this.sp._skeleton.data;
    this.animations = {};

    for (var i in sp_skeleton_data.animations) {
      var animation = sp_skeleton_data.animations[i];
      this.animations[animation.name] = {
        trackIndex: parseInt(i),
        name: animation.name,
        duration: animation.duration
      };
    }

    this.trackIndex = this.animations.idle.trackIndex;
    this.trackIndex2 = 0;
    this.action = "idle";
    this.changeAction(this.action); // let ra1 = this.animations.run.duration > this.animations.attack1.duration ? this.animations.attack1.duration : this.animations.run.duration;
    // let ra2 = this.animations.run.duration > this.animations.attack2.duration ? this.animations.attack2.duration : this.animations.run.duration;

    this.setMix('run', 'attack2', 0.1);
    this.setMix('run', 'attack1', 0.1); // this.setMix('run', 'attack2', ra1);
    // this.setMix('run', 'attack1', ra2);

    var ia1 = this.animations.idle.duration > this.animations.attack1.duration ? this.animations.attack1.duration : this.animations.idle.duration;
    var ia2 = this.animations.idle.duration > this.animations.attack2.duration ? this.animations.attack2.duration : this.animations.idle.duration;
    this.setMix('idle', 'attack2', 0.2);
    this.setMix('idle', 'attack1', 0.2); // this.setMix('idle', 'attack2', ia1);
    // this.setMix('idle', 'attack1', ia2);

    this.weaponData = require("zhujueConfig");
    this.weaponIndex = 1;
    setTimeout(this.init.bind(this), 100);
  },
  //设置角色状态
  setRoleState: function setRoleState(value) {
    this.roleState = value; //角色状态  0=静止 1=移动 2=跳跃

    switch (value) {
      case 0:
        //静止
        this.action = "idle";
        this.changeAction(this.action);
        break;

      case 1:
        //移动
        this.action = "run";
        this.changeAction(this.action);
        break;

      case 2:
        //跳跃
        this.action = "jump";
        this.changeAction("jump");
        break;
    }
  },
  changeAction: function changeAction(value) {
    if (this.sp.animation == value) return;

    switch (value) {
      case game.gameAction.idle:
        this.sp.clearTrack(this.trackIndex);
        this.sp.clearTrack(this.trackIndex2);
        this.trackIndex = this.animations.idle.trackIndex;
        this.sp.addAnimation(this.trackIndex, "idle", true);
        break;

      case game.gameAction.run:
        this.sp.clearTrack(this.trackIndex);
        this.sp.clearTrack(this.trackIndex2);
        this.trackIndex = this.animations.run.trackIndex;
        this.sp.addAnimation(this.trackIndex, "run", true);
        break;

      case game.gameAction.jump:
        // this.sp.clearTrack(this.trackIndex);
        // this.trackIndex = this.animations.jump.trackIndex;
        this.sp.clearTrack(this.trackIndex);
        this.trackIndex = this.animations.jump.trackIndex;
        this.sp.addAnimation(this.trackIndex, "jump", false);
        break;

      case game.gameAction.attack:
        // if (this.sp.animation == "jump" || this.sp.animation == "run")
        //     return;
        // this.sp.clearTrack(this.trackIndex);
        this.sp.clearTrack(this.trackIndex2);

        if (this.trackIndex == this.animations.idle.trackIndex || this.trackIndex == this.animations.jump.trackIndex) {
          this.sp.clearTrack(this.trackIndex);
        }

        var weapon = this.weaponData[this.weaponIndex];

        if (weapon.attackId == 1) {
          this.trackIndex2 = this.animations.attack1.trackIndex;
          this.sp.addAnimation(this.trackIndex2, "attack1", false);
        } else if (weapon.attackId == 2) {
          this.trackIndex2 = this.animations.attack2.trackIndex;
          this.sp.addAnimation(this.trackIndex2, "attack2", false);
        }

        break;
    }
  },
  gameOver: function gameOver() {
    this.changeAction("idle");
  },
  init: function init() {
    this.arm = this.sp.findBone("root_qiang");
    this.armPos = cc.v2(this.arm.worldX, this.arm.worldY);
    this.switchSkin(this.weaponIndex);
    this.armRotation = game.gameUtils.standardRotation(this.arm.rotation);
    this.rotationLimit = -65;
    this.rotationLimit1 = game.gameUtils.standardRotation(this.rotationLimit - 90);
    this.rotationLimit2 = game.gameUtils.standardRotation(this.rotationLimit + 90);
    this.sendTime = 0; // this.curAction = "idle";

    var self = this;
    var spine = this.sp; // //动画开始
    // let weapon = this.weaponData[this.weaponIndex];
    // this.attackTimeScale1 = 230 / (weapon.sendTime * 1000);
    // this.attackTimeScale2 = 450 / (weapon.sendTime * 1000);

    spine.setStartListener(function (trackEntry) {
      var animationName = trackEntry.animation ? trackEntry.animation.name : "";

      switch (animationName) {
        case "attack1":
          break;
      } // if (self.animationName === 'attack1') {
      //     spine.timeScale = self.attackTimeScale1;
      // }
      // else if (self.animationName === 'attack2') {
      //     spine.timeScale = self.attackTimeScale2;
      // }
      // else {
      //     spine.timeScale = 1;
      // }

    }.bind(this));
    spine.setCompleteListener(function (trackEntry) {
      var animationName = trackEntry.animation ? trackEntry.animation.name : "";

      switch (animationName) {
        case "attack1":
        case "attack2":
          this.sp.clearTrack(this.trackIndex);
          this.changeAction(this.action);
          break;
      }
    }.bind(this));
    this._isinit = true;
    this.addEvent();
  },
  stageTouch: function stageTouch(pos) {
    if (!this._isinit) return;
    if (game.isOver) return;
    var p = this.node.convertToWorldSpaceAR(this.armPos);
    var rotation = game.gameUtils.getRotation(p, pos);

    if (this.node.scaleX < 0) {
      rotation = rotation - 90 - this.weaponData[this.weaponIndex].rotation;
      rotation = 360 - rotation;
    } else {
      rotation = rotation - 90 + this.weaponData[this.weaponIndex].rotation;
    }

    rotation = game.gameUtils.standardRotation(rotation);

    if (game.gameUtils.limitRotation(rotation, this.rotationLimit1, this.rotationLimit2)) {
      this.arm.rotation = rotation;
      this.armRotation = game.gameUtils.standardRotation(this.arm.rotation);
    } else {
      this.changeDirection(this.node.scaleX * -1);
    }
  },
  aimPos: function aimPos(pos) {
    if (!this._isinit) return;
    if (game.isOver) return;
    pos.y += this.weaponData[this.weaponIndex].aimY;
    var p = this.node.convertToWorldSpaceAR(this.armPos);
    var rotation = game.gameUtils.getRotation(p, pos);

    if (this.node.scaleX < 0) {
      rotation = rotation - 90 - this.weaponData[this.weaponIndex].rotation;
      rotation = 360 - rotation;
    } else {
      rotation = rotation - 90 + this.weaponData[this.weaponIndex].rotation;
    }

    rotation = game.gameUtils.standardRotation(rotation);

    if (game.gameUtils.limitRotation(rotation, this.rotationLimit1, this.rotationLimit2)) {
      this.arm.rotation = rotation;
      this.armRotation = game.gameUtils.standardRotation(this.arm.rotation);
    }
  },
  changeDirection: function changeDirection(value) {
    this.node.scaleX = this.scaleX * value;
  },
  //切换皮肤 武器
  switchSkin: function switchSkin(idx) {
    if (game.isOver) return;

    if (!idx) {
      this.weaponIndex += 1;
      if (this.weaponIndex > 4) this.weaponIndex = 1;
      idx = this.weaponIndex;
    }

    this.weaponIndex = idx;
    game.emit("weaponIndex", this.weaponIndex);
    var weapon = this.weaponData[this.weaponIndex];
    this.sp.setSkin(weapon.name);
    this.weapon = this.sp.findBone("root_weapons" + idx);
    this.weaponPos = cc.v2(this.weapon.worldX, this.weapon.worldY); // this.attackTimeScale1 = 230 / (weapon.sendTime * 1000);
    // this.attackTimeScale2 = 450 / (weapon.sendTime * 1000);
  },
  //setMix 为所有关键帧设定混合及混合时间（从当前值开始差值）。
  setMix: function setMix(anim1, anim2, mixTime) {// this.sp.setMix(anim1, anim2, mixTime);
    // this.sp.setMix(anim2, anim1, mixTime);
  },
  start: function start() {},
  update: function update(dt) {
    if (game.isOver) return;
    if (!this._isinit) return;
    this.sendTime += dt;

    if (!game.touchDown) {
      return;
    }

    var weapon = this.weaponData[this.weaponIndex];

    if (this.sendTime > weapon.sendTime) {
      this.sendTime = 0;
      this.changeAction(game.gameAction.attack);
      var armPos = this.node.convertToWorldSpaceAR(this.armPos);
      this.weaponPos = cc.v2(this.weapon.worldX, this.weapon.worldY);
      var weaponPos = this.node.convertToWorldSpaceAR(this.weaponPos);
      var rotation = game.gameUtils.getRotation(armPos, weaponPos);
      var bulletName = "bullet" + this.weaponIndex;
      if (!this.shootData) this.shootData = {};
      this.shootData.prefabName = bulletName; //预制体名称

      this.shootData.v = weaponPos; //位置

      this.shootData.angle = rotation; //角度

      this.shootData.group = "mybull"; //组

      this.shootData.attack = weapon.attack;
      game.emit("shoot", this.shootData); //game.emit("shoot", bulletName, weaponPos, rotation, "mybull");
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/min/Stately.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '59d9ei0zZBBNLy4YnfyCw0K', 'Stately');
// Script/core/min/Stately.js

"use strict";

/*
 * Stately.js: A JavaScript based finite-state machine (FSM) engine.
 *
 * Copyright (c) 2012 Florian Schäfer (florian.schaefer@gmail.com)
 * Released under MIT license.
 *
 * Version: 2.0.0
 *
 */
(function (root, factory) {
  if (typeof exports === 'object') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(factory);
  } else {
    root.Stately = factory();
  }
})(void 0, function () {
  var toString = Object.prototype.toString,
      InvalidStateError = function () {
    function InvalidStateError(message) {
      this.name = 'InvalidStateError';
      this.message = message;
    }

    InvalidStateError.prototype = new Error();
    InvalidStateError.prototype.constructor = InvalidStateError;
    return InvalidStateError;
  }();

  function Stately(statesObject, initialStateName) {
    if (typeof statesObject === 'function') {
      statesObject = statesObject();
    }

    if (toString.call(statesObject) !== '[object Object]') {
      throw new InvalidStateError('Stately.js: Invalid states object: `' + statesObject + '`.');
    }

    function resolveSpecialEventFn(stateName, fnName) {
      for (var property in stateStore[stateName]) {
        if (stateStore[stateName].hasOwnProperty(property)) {
          if (property.toLowerCase() === fnName.toLowerCase()) {
            return stateStore[stateName][property];
          }
        }
      }
    }

    var currentState,
        stateStore = {
      getMachineState: function getMachineState() {
        return currentState.name;
      },
      setMachineState: function setMachineState(nextState
      /*, eventName */
      ) {
        var eventName = arguments[1],
            onEnterState,
            onLeaveState,
            lastState = currentState;

        if (typeof nextState === 'string') {
          nextState = stateStore[nextState];
        }

        if (!nextState || !nextState.name || !stateStore[nextState.name]) {
          throw new InvalidStateError('Stately.js: Transitioned into invalid state: `' + setMachineState.caller + '`.');
        }

        currentState = nextState;
        onLeaveState = resolveSpecialEventFn(lastState.name, "onLeave");

        if (onLeaveState && typeof onLeaveState === 'function') {
          onLeaveState.call(stateStore, eventName, lastState.name, currentState.name);
        }

        onEnterState = resolveSpecialEventFn(currentState.name, "onEnter");

        if (onEnterState && typeof onEnterState === 'function') {
          onEnterState.call(stateStore, eventName, lastState.name, nextState.name);
        }

        return this;
      },
      getMachineEvents: function getMachineEvents() {
        var events = [];

        for (var property in currentState) {
          if (currentState.hasOwnProperty(property)) {
            if (typeof currentState[property] === 'function') {
              events.push(property);
            }
          }
        }

        return events;
      }
    },
        stateMachine = {
      getMachineState: stateStore.getMachineState,
      getMachineEvents: stateStore.getMachineEvents
    },
        transition = function transition(stateName, eventName, nextEvent) {
      return function event() {
        var onBeforeEvent,
            onAfterEvent,
            nextState,
            eventValue = stateMachine;

        if (stateStore[stateName] !== currentState) {
          if (nextEvent) {
            eventValue = nextEvent.apply(stateStore, arguments);
          }

          return eventValue;
        }

        onBeforeEvent = resolveSpecialEventFn(currentState.name, "onBefore" + eventName);

        if (onBeforeEvent && typeof onBeforeEvent === 'function') {
          onBeforeEvent.call(stateStore, eventName, currentState.name, currentState.name);
        }

        eventValue = stateStore[stateName][eventName].apply(stateStore, arguments);

        if (typeof eventValue === 'undefined') {
          nextState = currentState;
          eventValue = stateMachine;
        } else if (typeof eventValue === 'string') {
          nextState = stateStore[eventValue];
          eventValue = stateMachine;
        } else if (toString.call(eventValue) === '[object Object]') {
          nextState = eventValue === stateStore ? currentState : eventValue;
          eventValue = stateMachine;
        } else if (toString.call(eventValue) === '[object Array]' && eventValue.length >= 1) {
          if (typeof eventValue[0] === 'string') {
            nextState = stateStore[eventValue[0]];
          } else {
            nextState = eventValue[0];
          }

          eventValue = eventValue[1];
        }

        onAfterEvent = resolveSpecialEventFn(currentState.name, "onAfter" + eventName);

        if (onAfterEvent && typeof onAfterEvent === 'function') {
          onAfterEvent.call(stateStore, eventName, currentState.name, nextState.name);
        }

        stateStore.setMachineState(nextState, eventName);
        return eventValue;
      };
    };

    for (var stateName in statesObject) {
      if (statesObject.hasOwnProperty(stateName)) {
        stateStore[stateName] = statesObject[stateName];

        for (var eventName in stateStore[stateName]) {
          if (stateStore[stateName].hasOwnProperty(eventName)) {
            if (typeof stateStore[stateName][eventName] === 'string') {
              stateStore[stateName][eventName] = function (stateName) {
                return function event() {
                  return this[stateName];
                };
              }(stateStore[stateName][eventName]);
            }

            if (typeof stateStore[stateName][eventName] === 'function' && !/^onEnter$/i.test(eventName) && !/^onLeave$/i.test(eventName) && !/^onBefore/i.test(eventName) && !/^onAfter/i.test(eventName)) {
              stateMachine[eventName] = transition(stateName, eventName, stateMachine[eventName]);
            }
          }
        }

        stateStore[stateName].name = stateName;

        if (!currentState) {
          currentState = stateStore[stateName];
        }
      }
    }

    if (typeof stateStore[initialStateName] !== 'undefined') {
      currentState = stateStore[initialStateName];
    }

    if (!currentState) {
      throw new InvalidStateError('Stately.js: Invalid initial state.');
    }

    return stateMachine;
  }

  Stately.machine = function machine(statesObject, initialStateName) {
    return new Stately(statesObject, initialStateName);
  };

  Stately.InvalidStateError = InvalidStateError;
  return Stately;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/blow/bomb2.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '270cf0zn19LIptyZxBKgC9L', 'bomb2');
// Script/blow/bomb2.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.dao_dan_bao_zha, false);
    this.init(data);
  },
  init: function init(data) {
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    this.node.x = data.v.x;
    this.node.y = data.v.y; //结束动画

    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bomb_atlas, data.aniName);
      var flashClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      flashClip.name = 'end';
      flashClip.wrapMode = cc.WrapMode.Normal;
      animation.addClip(flashClip);
      animation.play('end');
    } else {
      animation.playAdditive('end', 0);
    }

    animation.once("finished", function () {
      var pool = this.node.pool;

      if (pool) {
        pool.put(this.node);
      } else {
        this.node.removeFromParent(true);
        this.node.destroy();
      }
    }.bind(this));
  },
  start: function start() {},
  onDestroy: function onDestroy() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxibG93XFxib21iMi5qcyJdLCJuYW1lcyI6WyJQb29sQ29tcG9uZW50IiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwidW51c2UiLCJyZXVzZSIsImRhdGEiLCJnYW1lIiwic291bmRNYW5hZ2VyIiwicGxheUVmZmVjdCIsImdhbWVTb3VuZCIsImRhb19kYW5fYmFvX3poYSIsImluaXQiLCJncm91cCIsIm5vZGUiLCJhbmdsZSIsIngiLCJ2IiwieSIsImFuaW1hdGlvbiIsImdldENvbXBvbmVudCIsIkFuaW1hdGlvbiIsIl9pc2luaXQiLCJzcHJpdGVGcmFtZXMiLCJnYW1lVXRpbHMiLCJnZXRTcHJpdGVGcmFtZXMiLCJib21iX2F0bGFzIiwiYW5pTmFtZSIsImZsYXNoQ2xpcCIsIkFuaW1hdGlvbkNsaXAiLCJjcmVhdGVXaXRoU3ByaXRlRnJhbWVzIiwibmFtZSIsIndyYXBNb2RlIiwiV3JhcE1vZGUiLCJOb3JtYWwiLCJhZGRDbGlwIiwicGxheSIsInBsYXlBZGRpdGl2ZSIsIm9uY2UiLCJwb29sIiwicHV0IiwicmVtb3ZlRnJvbVBhcmVudCIsImRlc3Ryb3kiLCJiaW5kIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsTUFISyxvQkFHSSxDQUNSLENBSkk7QUFLTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVksQ0FDbEIsQ0FQSTtBQVFMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CQyxJQUFBQSxJQUFJLENBQUNDLFlBQUwsQ0FBa0JDLFVBQWxCLENBQTZCRixJQUFJLENBQUNHLFNBQUwsQ0FBZUMsZUFBNUMsRUFBNEQsS0FBNUQ7QUFDQSxTQUFLQyxJQUFMLENBQVVOLElBQVY7QUFDSCxHQVpJO0FBYUxNLEVBQUFBLElBYkssZ0JBYUFOLElBYkEsRUFhTTtBQUNQLFFBQUlBLElBQUksQ0FBQ08sS0FBVCxFQUFnQixLQUFLQyxJQUFMLENBQVVELEtBQVYsR0FBa0JQLElBQUksQ0FBQ08sS0FBdkI7QUFDaEIsU0FBS0MsSUFBTCxDQUFVQyxLQUFWLEdBQWtCVCxJQUFJLENBQUNTLEtBQXZCO0FBQ0EsU0FBS0QsSUFBTCxDQUFVRSxDQUFWLEdBQWNWLElBQUksQ0FBQ1csQ0FBTCxDQUFPRCxDQUFyQjtBQUNBLFNBQUtGLElBQUwsQ0FBVUksQ0FBVixHQUFjWixJQUFJLENBQUNXLENBQUwsQ0FBT0MsQ0FBckIsQ0FKTyxDQUtQOztBQUNBLFFBQUlDLFNBQVMsR0FBRyxLQUFLTCxJQUFMLENBQVVNLFlBQVYsQ0FBdUJwQixFQUFFLENBQUNxQixTQUExQixDQUFoQixDQU5PLENBTThDOztBQUNyRCxRQUFJLENBQUMsS0FBS0MsT0FBVixFQUFtQjtBQUNmLFVBQUlDLFlBQVksR0FBR2hCLElBQUksQ0FBQ2lCLFNBQUwsQ0FBZUMsZUFBZixDQUErQmxCLElBQUksQ0FBQ21CLFVBQXBDLEVBQWdEcEIsSUFBSSxDQUFDcUIsT0FBckQsQ0FBbkI7QUFDQSxVQUFJQyxTQUFTLEdBQUc1QixFQUFFLENBQUM2QixhQUFILENBQWlCQyxzQkFBakIsQ0FBd0NQLFlBQXhDLEVBQXNELEVBQXRELENBQWhCO0FBQ0FLLE1BQUFBLFNBQVMsQ0FBQ0csSUFBVixHQUFpQixLQUFqQjtBQUNBSCxNQUFBQSxTQUFTLENBQUNJLFFBQVYsR0FBcUJoQyxFQUFFLENBQUNpQyxRQUFILENBQVlDLE1BQWpDO0FBQ0FmLE1BQUFBLFNBQVMsQ0FBQ2dCLE9BQVYsQ0FBa0JQLFNBQWxCO0FBQ0FULE1BQUFBLFNBQVMsQ0FBQ2lCLElBQVYsQ0FBZSxLQUFmO0FBQ0gsS0FQRCxNQVFLO0FBQ0RqQixNQUFBQSxTQUFTLENBQUNrQixZQUFWLENBQXVCLEtBQXZCLEVBQThCLENBQTlCO0FBQ0g7O0FBQ0RsQixJQUFBQSxTQUFTLENBQUNtQixJQUFWLENBQWUsVUFBZixFQUEyQixZQUFZO0FBQ25DLFVBQUlDLElBQUksR0FBRyxLQUFLekIsSUFBTCxDQUFVeUIsSUFBckI7O0FBQ0EsVUFBSUEsSUFBSixFQUFVO0FBQ05BLFFBQUFBLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUsxQixJQUFkO0FBQ0gsT0FGRCxNQUdLO0FBQ0QsYUFBS0EsSUFBTCxDQUFVMkIsZ0JBQVYsQ0FBMkIsSUFBM0I7QUFDQSxhQUFLM0IsSUFBTCxDQUFVNEIsT0FBVjtBQUNIO0FBQ0osS0FUMEIsQ0FTekJDLElBVHlCLENBU3BCLElBVG9CLENBQTNCO0FBVUgsR0F6Q0k7QUEwQ0xDLEVBQUFBLEtBMUNLLG1CQTBDRyxDQUNQLENBM0NJO0FBNENMQyxFQUFBQSxTQTVDSyx1QkE0Q08sQ0FDWDtBQTdDSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICB9LFxyXG4gICAgLy/lm57mlLZcclxuICAgIHVudXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB9LFxyXG4gICAgLy/ph43nlKhcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGdhbWUuc291bmRNYW5hZ2VyLnBsYXlFZmZlY3QoZ2FtZS5nYW1lU291bmQuZGFvX2Rhbl9iYW9femhhLGZhbHNlKTtcclxuICAgICAgICB0aGlzLmluaXQoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaW5pdChkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuZ3JvdXApIHRoaXMubm9kZS5ncm91cCA9IGRhdGEuZ3JvdXA7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFuZ2xlID0gZGF0YS5hbmdsZTtcclxuICAgICAgICB0aGlzLm5vZGUueCA9IGRhdGEudi54O1xyXG4gICAgICAgIHRoaXMubm9kZS55ID0gZGF0YS52Lnk7XHJcbiAgICAgICAgLy/nu5PmnZ/liqjnlLtcclxuICAgICAgICBsZXQgYW5pbWF0aW9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pOy8v5Yqo55S757uE5Lu2XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc2luaXQpIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZUZyYW1lcyA9IGdhbWUuZ2FtZVV0aWxzLmdldFNwcml0ZUZyYW1lcyhnYW1lLmJvbWJfYXRsYXMsIGRhdGEuYW5pTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBmbGFzaENsaXAgPSBjYy5BbmltYXRpb25DbGlwLmNyZWF0ZVdpdGhTcHJpdGVGcmFtZXMoc3ByaXRlRnJhbWVzLCAyMCk7XHJcbiAgICAgICAgICAgIGZsYXNoQ2xpcC5uYW1lID0gJ2VuZCc7XHJcbiAgICAgICAgICAgIGZsYXNoQ2xpcC53cmFwTW9kZSA9IGNjLldyYXBNb2RlLk5vcm1hbDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLmFkZENsaXAoZmxhc2hDbGlwKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXkoJ2VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXlBZGRpdGl2ZSgnZW5kJywgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuaW1hdGlvbi5vbmNlKFwiZmluaXNoZWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgcG9vbCA9IHRoaXMubm9kZS5wb29sO1xyXG4gICAgICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICAgICAgcG9vbC5wdXQodGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5yZW1vdmVGcm9tUGFyZW50KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSlcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet3.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6a362sK4ytJJY0zBnn5VZae', 'bullet3');
// Script/bullet/bullet3.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    head: cc.Animation
  },
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.zhong_xing_qiang_jie5, false);
    this.init(data);
  },
  init: function init(data) {
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * (this.node.width / 2 + this.head.node.width);
    this.speedY = Math.sin(hd) * (this.node.width / 2 + this.head.node.width);
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY; //闪电头子动画

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, "flashHead");
      var startClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 30);
      startClip.name = 'start';
      startClip.wrapMode = cc.WrapMode.Normal;
      this.head.addClip(startClip);
    }

    this.head.playAdditive('start', 0); //自身动画

    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isinit) {
      var _spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.prefabName);

      var flashClip = cc.AnimationClip.createWithSpriteFrames(_spriteFrames, 20);
      flashClip.name = 'flash';
      flashClip.wrapMode = cc.WrapMode.Normal;
      animation.addClip(flashClip);
    }

    animation.playAdditive('flash', 0);
    animation.once("finished", function () {
      var pool = this.node.pool;

      if (pool) {
        pool.put(this.node);
      } else {
        this.node.removeFromParent(true);
        this.node.destroy();
      }
    }.bind(this));
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxidWxsZXRcXGJ1bGxldDMuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsImhlYWQiLCJBbmltYXRpb24iLCJvbkxvYWQiLCJ1bnVzZSIsInJldXNlIiwiZGF0YSIsImdhbWUiLCJzb3VuZE1hbmFnZXIiLCJwbGF5RWZmZWN0IiwiZ2FtZVNvdW5kIiwiemhvbmdfeGluZ19xaWFuZ19qaWU1IiwiaW5pdCIsImdyb3VwIiwibm9kZSIsImFuZ2xlIiwiaGQiLCJNYXRoIiwiUEkiLCJzcGVlZFgiLCJjb3MiLCJ3aWR0aCIsInNwZWVkWSIsInNpbiIsIngiLCJ2IiwieSIsIl9pc2luaXQiLCJzcHJpdGVGcmFtZXMiLCJnYW1lVXRpbHMiLCJnZXRTcHJpdGVGcmFtZXMiLCJidWxsZXRfYXRsYXMiLCJzdGFydENsaXAiLCJBbmltYXRpb25DbGlwIiwiY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyIsIm5hbWUiLCJ3cmFwTW9kZSIsIldyYXBNb2RlIiwiTm9ybWFsIiwiYWRkQ2xpcCIsInBsYXlBZGRpdGl2ZSIsImFuaW1hdGlvbiIsImdldENvbXBvbmVudCIsInByZWZhYk5hbWUiLCJmbGFzaENsaXAiLCJvbmNlIiwicG9vbCIsInB1dCIsInJlbW92ZUZyb21QYXJlbnQiLCJkZXN0cm95IiwiYmluZCIsInN0YXJ0Iiwib25EZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBM0IsRUFBOEM7OztBQUM5Q0MsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTSCxhQURKO0FBRUxJLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUVILEVBQUUsQ0FBQ0k7QUFERCxHQUZQO0FBS0xDLEVBQUFBLE1BTEssb0JBS0ksQ0FDUixDQU5JO0FBT0w7QUFDQUMsRUFBQUEsS0FBSyxFQUFFLGlCQUFZLENBQ2xCLENBVEk7QUFVTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsZUFBVUMsSUFBVixFQUFnQjtBQUNuQkMsSUFBQUEsSUFBSSxDQUFDQyxZQUFMLENBQWtCQyxVQUFsQixDQUE2QkYsSUFBSSxDQUFDRyxTQUFMLENBQWVDLHFCQUE1QyxFQUFtRSxLQUFuRTtBQUNBLFNBQUtDLElBQUwsQ0FBVU4sSUFBVjtBQUNILEdBZEk7QUFlTE0sRUFBQUEsSUFmSyxnQkFlQU4sSUFmQSxFQWVNO0FBQ1AsUUFBSUEsSUFBSSxDQUFDTyxLQUFULEVBQWdCLEtBQUtDLElBQUwsQ0FBVUQsS0FBVixHQUFrQlAsSUFBSSxDQUFDTyxLQUF2QjtBQUNoQixTQUFLQyxJQUFMLENBQVVDLEtBQVYsR0FBa0JULElBQUksQ0FBQ1MsS0FBdkI7QUFDQSxRQUFJQyxFQUFFLEdBQUcsS0FBS0YsSUFBTCxDQUFVQyxLQUFWLEdBQWtCRSxJQUFJLENBQUNDLEVBQXZCLEdBQTRCLEdBQXJDO0FBQ0EsU0FBS0MsTUFBTCxHQUFjRixJQUFJLENBQUNHLEdBQUwsQ0FBU0osRUFBVCxLQUFnQixLQUFLRixJQUFMLENBQVVPLEtBQVYsR0FBa0IsQ0FBbEIsR0FBc0IsS0FBS3BCLElBQUwsQ0FBVWEsSUFBVixDQUFlTyxLQUFyRCxDQUFkO0FBQ0EsU0FBS0MsTUFBTCxHQUFjTCxJQUFJLENBQUNNLEdBQUwsQ0FBU1AsRUFBVCxLQUFnQixLQUFLRixJQUFMLENBQVVPLEtBQVYsR0FBa0IsQ0FBbEIsR0FBc0IsS0FBS3BCLElBQUwsQ0FBVWEsSUFBVixDQUFlTyxLQUFyRCxDQUFkO0FBQ0EsU0FBS1AsSUFBTCxDQUFVVSxDQUFWLEdBQWNsQixJQUFJLENBQUNtQixDQUFMLENBQU9ELENBQVAsR0FBVyxLQUFLTCxNQUE5QjtBQUNBLFNBQUtMLElBQUwsQ0FBVVksQ0FBVixHQUFjcEIsSUFBSSxDQUFDbUIsQ0FBTCxDQUFPQyxDQUFQLEdBQVcsS0FBS0osTUFBOUIsQ0FQTyxDQVFQOztBQUNBLFFBQUksQ0FBQyxLQUFLSyxPQUFWLEVBQW1CO0FBQ2YsVUFBSUMsWUFBWSxHQUFHckIsSUFBSSxDQUFDc0IsU0FBTCxDQUFlQyxlQUFmLENBQStCdkIsSUFBSSxDQUFDd0IsWUFBcEMsRUFBa0QsV0FBbEQsQ0FBbkI7QUFDQSxVQUFJQyxTQUFTLEdBQUdsQyxFQUFFLENBQUNtQyxhQUFILENBQWlCQyxzQkFBakIsQ0FBd0NOLFlBQXhDLEVBQXNELEVBQXRELENBQWhCO0FBQ0FJLE1BQUFBLFNBQVMsQ0FBQ0csSUFBVixHQUFpQixPQUFqQjtBQUNBSCxNQUFBQSxTQUFTLENBQUNJLFFBQVYsR0FBcUJ0QyxFQUFFLENBQUN1QyxRQUFILENBQVlDLE1BQWpDO0FBQ0EsV0FBS3JDLElBQUwsQ0FBVXNDLE9BQVYsQ0FBa0JQLFNBQWxCO0FBQ0g7O0FBQ0QsU0FBSy9CLElBQUwsQ0FBVXVDLFlBQVYsQ0FBdUIsT0FBdkIsRUFBZ0MsQ0FBaEMsRUFoQk8sQ0FpQlA7O0FBQ0EsUUFBSUMsU0FBUyxHQUFHLEtBQUszQixJQUFMLENBQVU0QixZQUFWLENBQXVCNUMsRUFBRSxDQUFDSSxTQUExQixDQUFoQixDQWxCTyxDQWtCOEM7O0FBQ3JELFFBQUksQ0FBQyxLQUFLeUIsT0FBVixFQUFtQjtBQUNmLFVBQUlDLGFBQVksR0FBR3JCLElBQUksQ0FBQ3NCLFNBQUwsQ0FBZUMsZUFBZixDQUErQnZCLElBQUksQ0FBQ3dCLFlBQXBDLEVBQWtEekIsSUFBSSxDQUFDcUMsVUFBdkQsQ0FBbkI7O0FBQ0EsVUFBSUMsU0FBUyxHQUFHOUMsRUFBRSxDQUFDbUMsYUFBSCxDQUFpQkMsc0JBQWpCLENBQXdDTixhQUF4QyxFQUFzRCxFQUF0RCxDQUFoQjtBQUNBZ0IsTUFBQUEsU0FBUyxDQUFDVCxJQUFWLEdBQWlCLE9BQWpCO0FBQ0FTLE1BQUFBLFNBQVMsQ0FBQ1IsUUFBVixHQUFxQnRDLEVBQUUsQ0FBQ3VDLFFBQUgsQ0FBWUMsTUFBakM7QUFDQUcsTUFBQUEsU0FBUyxDQUFDRixPQUFWLENBQWtCSyxTQUFsQjtBQUNIOztBQUNESCxJQUFBQSxTQUFTLENBQUNELFlBQVYsQ0FBdUIsT0FBdkIsRUFBZ0MsQ0FBaEM7QUFDQUMsSUFBQUEsU0FBUyxDQUFDSSxJQUFWLENBQWUsVUFBZixFQUEyQixZQUFZO0FBQ25DLFVBQUlDLElBQUksR0FBRyxLQUFLaEMsSUFBTCxDQUFVZ0MsSUFBckI7O0FBQ0EsVUFBSUEsSUFBSixFQUFVO0FBQ05BLFFBQUFBLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUtqQyxJQUFkO0FBQ0gsT0FGRCxNQUdLO0FBQ0QsYUFBS0EsSUFBTCxDQUFVa0MsZ0JBQVYsQ0FBMkIsSUFBM0I7QUFDQSxhQUFLbEMsSUFBTCxDQUFVbUMsT0FBVjtBQUNIO0FBQ0osS0FUMEIsQ0FTekJDLElBVHlCLENBU3BCLElBVG9CLENBQTNCO0FBVUgsR0FwREk7QUFxRExDLEVBQUFBLEtBckRLLG1CQXFERyxDQUNQLENBdERJO0FBdURMQyxFQUFBQSxTQXZESyx1QkF1RE8sQ0FDWCxDQXhESSxDQXlETDs7QUF6REssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFBvb2xDb21wb25lbnQgPSByZXF1aXJlKFwiUG9vbENvbXBvbmVudFwiKTsgLy/msaDlrZDnu4Tku7ZcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogUG9vbENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBoZWFkOiBjYy5BbmltYXRpb24sXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8v5Zue5pS2XHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIC8v6YeN55SoXHJcbiAgICByZXVzZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBnYW1lLnNvdW5kTWFuYWdlci5wbGF5RWZmZWN0KGdhbWUuZ2FtZVNvdW5kLnpob25nX3hpbmdfcWlhbmdfamllNSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaW5pdChkYXRhKTtcclxuICAgIH0sXHJcbiAgICBpbml0KGRhdGEpIHtcclxuICAgICAgICBpZiAoZGF0YS5ncm91cCkgdGhpcy5ub2RlLmdyb3VwID0gZGF0YS5ncm91cDtcclxuICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSBkYXRhLmFuZ2xlO1xyXG4gICAgICAgIGxldCBoZCA9IHRoaXMubm9kZS5hbmdsZSAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgdGhpcy5zcGVlZFggPSBNYXRoLmNvcyhoZCkgKiAodGhpcy5ub2RlLndpZHRoIC8gMiArIHRoaXMuaGVhZC5ub2RlLndpZHRoKTtcclxuICAgICAgICB0aGlzLnNwZWVkWSA9IE1hdGguc2luKGhkKSAqICh0aGlzLm5vZGUud2lkdGggLyAyICsgdGhpcy5oZWFkLm5vZGUud2lkdGgpO1xyXG4gICAgICAgIHRoaXMubm9kZS54ID0gZGF0YS52LnggKyB0aGlzLnNwZWVkWDtcclxuICAgICAgICB0aGlzLm5vZGUueSA9IGRhdGEudi55ICsgdGhpcy5zcGVlZFk7XHJcbiAgICAgICAgLy/pl6rnlLXlpLTlrZDliqjnlLtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzaW5pdCkge1xyXG4gICAgICAgICAgICBsZXQgc3ByaXRlRnJhbWVzID0gZ2FtZS5nYW1lVXRpbHMuZ2V0U3ByaXRlRnJhbWVzKGdhbWUuYnVsbGV0X2F0bGFzLCBcImZsYXNoSGVhZFwiKTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0Q2xpcCA9IGNjLkFuaW1hdGlvbkNsaXAuY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyhzcHJpdGVGcmFtZXMsIDMwKTtcclxuICAgICAgICAgICAgc3RhcnRDbGlwLm5hbWUgPSAnc3RhcnQnO1xyXG4gICAgICAgICAgICBzdGFydENsaXAud3JhcE1vZGUgPSBjYy5XcmFwTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZC5hZGRDbGlwKHN0YXJ0Q2xpcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGVhZC5wbGF5QWRkaXRpdmUoJ3N0YXJ0JywgMCk7XHJcbiAgICAgICAgLy/oh6rouqvliqjnlLtcclxuICAgICAgICBsZXQgYW5pbWF0aW9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pOy8v5Yqo55S757uE5Lu2XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc2luaXQpIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZUZyYW1lcyA9IGdhbWUuZ2FtZVV0aWxzLmdldFNwcml0ZUZyYW1lcyhnYW1lLmJ1bGxldF9hdGxhcywgZGF0YS5wcmVmYWJOYW1lKTtcclxuICAgICAgICAgICAgbGV0IGZsYXNoQ2xpcCA9IGNjLkFuaW1hdGlvbkNsaXAuY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyhzcHJpdGVGcmFtZXMsIDIwKTtcclxuICAgICAgICAgICAgZmxhc2hDbGlwLm5hbWUgPSAnZmxhc2gnO1xyXG4gICAgICAgICAgICBmbGFzaENsaXAud3JhcE1vZGUgPSBjYy5XcmFwTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5hZGRDbGlwKGZsYXNoQ2xpcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuaW1hdGlvbi5wbGF5QWRkaXRpdmUoJ2ZsYXNoJywgMCk7XHJcbiAgICAgICAgYW5pbWF0aW9uLm9uY2UoXCJmaW5pc2hlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBwb29sID0gdGhpcy5ub2RlLnBvb2w7XHJcbiAgICAgICAgICAgIGlmIChwb29sKSB7XHJcbiAgICAgICAgICAgICAgICBwb29sLnB1dCh0aGlzLm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUZyb21QYXJlbnQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/config/gamePopup.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e05cdId3yhDAYthH4sFvSsL', 'gamePopup');
// Script/config/gamePopup.js

"use strict";

module.exports = {
  gameOver_loss: {
    url: "/ui/gameOver_loss"
  },
  gameOver_win: {
    url: "/ui/gameOver_win"
  },
  gamePause: {
    url: "/ui/gamePause"
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb25maWdcXGdhbWVQb3B1cC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ2FtZU92ZXJfbG9zcyIsInVybCIsImdhbWVPdmVyX3dpbiIsImdhbWVQYXVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLGFBQWEsRUFBRztBQUNaQyxJQUFBQSxHQUFHLEVBQUc7QUFETSxHQURIO0FBSWJDLEVBQUFBLFlBQVksRUFBRztBQUNYRCxJQUFBQSxHQUFHLEVBQUc7QUFESyxHQUpGO0FBT2JFLEVBQUFBLFNBQVMsRUFBRztBQUNSRixJQUFBQSxHQUFHLEVBQUc7QUFERTtBQVBDLENBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnYW1lT3Zlcl9sb3NzOiAge1xuICAgICAgICB1cmw6ICBcIi91aS9nYW1lT3Zlcl9sb3NzXCJcbiAgICB9LFxuICAgIGdhbWVPdmVyX3dpbjogIHtcbiAgICAgICAgdXJsOiAgXCIvdWkvZ2FtZU92ZXJfd2luXCJcbiAgICB9LFxuICAgIGdhbWVQYXVzZTogIHtcbiAgICAgICAgdXJsOiAgXCIvdWkvZ2FtZVBhdXNlXCJcbiAgICB9XG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/control.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '32d83Ai421OJrJRzNVOS66h', 'control');
// Script/control/control.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    joystick: cc.Node,
    btnContinue: cc.Node
  },
  onLoad: function onLoad() {
    this.joystick.active = false; //this.joystick.active = true;

    this.btnContinue.active = false;

    if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS) {//ANDROID IOS
    } else {
      this.node.addComponent("keyboard"); //键盘组件
      //cc.log("添加键盘组件")
    }

    game.on("enterGame", this.enterGame, this);
    game.on("levelGame", this.levelGame, this);
  },
  enterGame: function enterGame() {
    this.btnContinue.active = true;
  },
  levelGame: function levelGame() {
    this.btnContinue.active = false;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb250cm9sXFxjb250cm9sLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiam95c3RpY2siLCJOb2RlIiwiYnRuQ29udGludWUiLCJvbkxvYWQiLCJhY3RpdmUiLCJzeXMiLCJvcyIsIk9TX0FORFJPSUQiLCJPU19JT1MiLCJub2RlIiwiYWRkQ29tcG9uZW50IiwiZ2FtZSIsIm9uIiwiZW50ZXJHYW1lIiwibGV2ZWxHYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsUUFBUSxFQUFFSixFQUFFLENBQUNLLElBREw7QUFFUkMsSUFBQUEsV0FBVyxFQUFFTixFQUFFLENBQUNLO0FBRlIsR0FGUDtBQU1MRSxFQUFBQSxNQU5LLG9CQU1JO0FBQ0wsU0FBS0gsUUFBTCxDQUFjSSxNQUFkLEdBQXVCLEtBQXZCLENBREssQ0FFTDs7QUFDQSxTQUFLRixXQUFMLENBQWlCRSxNQUFqQixHQUEwQixLQUExQjs7QUFDQSxRQUFJUixFQUFFLENBQUNTLEdBQUgsQ0FBT0MsRUFBUCxJQUFhVixFQUFFLENBQUNTLEdBQUgsQ0FBT0UsVUFBcEIsSUFBa0NYLEVBQUUsQ0FBQ1MsR0FBSCxDQUFPQyxFQUFQLElBQWFWLEVBQUUsQ0FBQ1MsR0FBSCxDQUFPRyxNQUExRCxFQUFrRSxDQUFFO0FBQ25FLEtBREQsTUFDTztBQUNILFdBQUtDLElBQUwsQ0FBVUMsWUFBVixDQUF1QixVQUF2QixFQURHLENBQ2lDO0FBQ3BDO0FBQ0g7O0FBQ0RDLElBQUFBLElBQUksQ0FBQ0MsRUFBTCxDQUFRLFdBQVIsRUFBcUIsS0FBS0MsU0FBMUIsRUFBcUMsSUFBckM7QUFDQUYsSUFBQUEsSUFBSSxDQUFDQyxFQUFMLENBQVEsV0FBUixFQUFxQixLQUFLRSxTQUExQixFQUFxQyxJQUFyQztBQUNILEdBakJJO0FBa0JMRCxFQUFBQSxTQWxCSyx1QkFrQk87QUFDUixTQUFLWCxXQUFMLENBQWlCRSxNQUFqQixHQUEwQixJQUExQjtBQUNILEdBcEJJO0FBcUJMVSxFQUFBQSxTQXJCSyx1QkFxQk87QUFDUixTQUFLWixXQUFMLENBQWlCRSxNQUFqQixHQUEwQixLQUExQjtBQUNIO0FBdkJJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXHJcbi8vIExlYXJuIEF0dHJpYnV0ZTpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxyXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgam95c3RpY2s6IGNjLk5vZGUsXHJcbiAgICAgICAgYnRuQ29udGludWU6IGNjLk5vZGVcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5qb3lzdGljay5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAvL3RoaXMuam95c3RpY2suYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJ0bkNvbnRpbnVlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQgfHwgY2Muc3lzLm9zID09IGNjLnN5cy5PU19JT1MpIHsgLy9BTkRST0lEIElPU1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5hZGRDb21wb25lbnQoXCJrZXlib2FyZFwiKTsgLy/plK7nm5jnu4Tku7ZcclxuICAgICAgICAgICAgLy9jYy5sb2coXCLmt7vliqDplK7nm5jnu4Tku7ZcIilcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2FtZS5vbihcImVudGVyR2FtZVwiLCB0aGlzLmVudGVyR2FtZSwgdGhpcyk7XHJcbiAgICAgICAgZ2FtZS5vbihcImxldmVsR2FtZVwiLCB0aGlzLmxldmVsR2FtZSwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgZW50ZXJHYW1lKCkge1xyXG4gICAgICAgIHRoaXMuYnRuQ29udGludWUuYWN0aXZlID0gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBsZXZlbEdhbWUoKSB7XHJcbiAgICAgICAgdGhpcy5idG5Db250aW51ZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemyFind.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8d998z5n41AVYtBN8l0zRCj', 'enemyFind');
// Script/enemy/enemyFind.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  onEnable: function onEnable() {},
  //当该组件被禁用或节点变为无效时调用。
  onDisable: function onDisable() {},
  //该方法为生命周期方法，父类未必会有实现。
  onDestroy: function onDestroy() {},
  unuse: function unuse() {},
  reuse: function reuse(data) {
    this.node.x = this.x - Math.random() * data.findX;
  },
  onLoad: function onLoad() {
    this.parent = this.node.parent.parent;
    this.x = this.node.x;
  },
  //碰撞进入
  onCollisionEnter: function onCollisionEnter(other, self) {
    if (game.isOver) return;
    this.parent.emit("onCollisionEnter", other, self);
  },
  //碰撞停留
  onCollisionStay: function onCollisionStay(other, self) {},
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {
    if (game.isOver) return;
    this.parent.emit("onCollisionExit", other, self);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxlbmVteVxcZW5lbXlGaW5kLmpzIl0sIm5hbWVzIjpbIlBvb2xDb21wb25lbnQiLCJyZXF1aXJlIiwiY2MiLCJDbGFzcyIsInByb3BlcnRpZXMiLCJvbkVuYWJsZSIsIm9uRGlzYWJsZSIsIm9uRGVzdHJveSIsInVudXNlIiwicmV1c2UiLCJkYXRhIiwibm9kZSIsIngiLCJNYXRoIiwicmFuZG9tIiwiZmluZFgiLCJvbkxvYWQiLCJwYXJlbnQiLCJvbkNvbGxpc2lvbkVudGVyIiwib3RoZXIiLCJzZWxmIiwiZ2FtZSIsImlzT3ZlciIsImVtaXQiLCJvbkNvbGxpc2lvblN0YXkiLCJvbkNvbGxpc2lvbkV4aXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsUUFISyxzQkFHTSxDQUNWLENBSkk7QUFLTDtBQUNBQyxFQUFBQSxTQU5LLHVCQU1PLENBQ1gsQ0FQSTtBQVFMO0FBQ0FDLEVBQUFBLFNBVEssdUJBU08sQ0FDWCxDQVZJO0FBV0xDLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQVpJO0FBYUxDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CLFNBQUtDLElBQUwsQ0FBVUMsQ0FBVixHQUFZLEtBQUtBLENBQUwsR0FBT0MsSUFBSSxDQUFDQyxNQUFMLEtBQWNKLElBQUksQ0FBQ0ssS0FBdEM7QUFDSCxHQWZJO0FBZ0JMQyxFQUFBQSxNQWhCSyxvQkFnQkk7QUFDTCxTQUFLQyxNQUFMLEdBQWMsS0FBS04sSUFBTCxDQUFVTSxNQUFWLENBQWlCQSxNQUEvQjtBQUNBLFNBQUtMLENBQUwsR0FBUyxLQUFLRCxJQUFMLENBQVVDLENBQW5CO0FBQ0gsR0FuQkk7QUFvQkw7QUFDQU0sRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3JDLFFBQUlDLElBQUksQ0FBQ0MsTUFBVCxFQUFpQjtBQUNqQixTQUFLTCxNQUFMLENBQVlNLElBQVosQ0FBaUIsa0JBQWpCLEVBQXFDSixLQUFyQyxFQUE0Q0MsSUFBNUM7QUFDSCxHQXhCSTtBQXlCTDtBQUNBSSxFQUFBQSxlQUFlLEVBQUUseUJBQVVMLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCLENBQ3ZDLENBM0JJO0FBNEJMO0FBQ0FLLEVBQUFBLGVBQWUsRUFBRSx5QkFBVU4sS0FBVixFQUFpQkMsSUFBakIsRUFBdUI7QUFDcEMsUUFBSUMsSUFBSSxDQUFDQyxNQUFULEVBQWlCO0FBQ2pCLFNBQUtMLE1BQUwsQ0FBWU0sSUFBWixDQUFpQixpQkFBakIsRUFBb0NKLEtBQXBDLEVBQTJDQyxJQUEzQztBQUNIO0FBaENJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIik7IC8v5rGg5a2Q57uE5Lu2XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IFBvb2xDb21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uRW5hYmxlKCkge1xyXG4gICAgfSxcclxuICAgIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICBvbkRpc2FibGUoKSB7XHJcbiAgICB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMubm9kZS54PXRoaXMueC1NYXRoLnJhbmRvbSgpKmRhdGEuZmluZFg7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5ub2RlLnBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy5ub2RlLng7XHJcbiAgICB9LFxyXG4gICAgLy/norDmkp7ov5vlhaVcclxuICAgIG9uQ29sbGlzaW9uRW50ZXI6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIGlmIChnYW1lLmlzT3ZlcikgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMucGFyZW50LmVtaXQoXCJvbkNvbGxpc2lvbkVudGVyXCIsIG90aGVyLCBzZWxmKVxyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe5YGc55WZXHJcbiAgICBvbkNvbGxpc2lvblN0YXk6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe6YCA5Ye6XHJcbiAgICBvbkNvbGxpc2lvbkV4aXQ6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIGlmIChnYW1lLmlzT3ZlcikgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMucGFyZW50LmVtaXQoXCJvbkNvbGxpc2lvbkV4aXRcIiwgb3RoZXIsIHNlbGYpXHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/factory/enemyFactory.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '56cacldgGxOdYNwEYYMWqXC', 'enemyFactory');
// Script/factory/enemyFactory.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    bingTime: 10 //每隔5秒出一个军官

  },
  onDestroy: function onDestroy() {//clearInterval(this.makeJunGuan)
  },
  onLoad: function onLoad() {
    this.fff = true;
    this.nextBin = 0;
    this.parent = this.node.parent;
    this.bingPos = this.node.convertToWorldSpaceAR(cc.v2(0, 0));

    var gameConfig = require(game.guanKaInfo);

    this.config = gameConfig;
    this.bingList = [];

    for (var i in gameConfig) {
      var opts = gameConfig[i];

      for (var j = 0; j < opts.count; j++) {
        this.bingList.push(i);
      }
    }

    var length = this.bingList.length;
    this.bingList.sort(function (a, b) {
      var c = parseInt(Math.random() * length - length / 2);
      return c;
    });
  },
  start: function start() {},
  update: function update(dt) {
    if (game.isOver) return;
    if (this.parent.isDeath) return;
    this.nextBin += dt;

    if (this.nextBin < this.bingTime) {
      return;
    }

    this.nextBin = 0;
    var bing = this.bingList.shift();
    this.bingList.push(bing);
    var data = this.config[bing];

    if (this.fff) {
      // this.fff = false;
      game.emit("chubing", bing, this.bingPos, data);
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxmYWN0b3J5XFxlbmVteUZhY3RvcnkuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJiaW5nVGltZSIsIm9uRGVzdHJveSIsIm9uTG9hZCIsImZmZiIsIm5leHRCaW4iLCJwYXJlbnQiLCJub2RlIiwiYmluZ1BvcyIsImNvbnZlcnRUb1dvcmxkU3BhY2VBUiIsInYyIiwiZ2FtZUNvbmZpZyIsInJlcXVpcmUiLCJnYW1lIiwiZ3VhbkthSW5mbyIsImNvbmZpZyIsImJpbmdMaXN0IiwiaSIsIm9wdHMiLCJqIiwiY291bnQiLCJwdXNoIiwibGVuZ3RoIiwic29ydCIsImEiLCJiIiwiYyIsInBhcnNlSW50IiwiTWF0aCIsInJhbmRvbSIsInN0YXJ0IiwidXBkYXRlIiwiZHQiLCJpc092ZXIiLCJpc0RlYXRoIiwiYmluZyIsInNoaWZ0IiwiZGF0YSIsImVtaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxRQUFRLEVBQUUsRUFERixDQUNNOztBQUROLEdBRlA7QUFLTEMsRUFBQUEsU0FMSyx1QkFLTyxDQUNSO0FBQ0gsR0FQSTtBQVFMQyxFQUFBQSxNQVJLLG9CQVFJO0FBQ0wsU0FBS0MsR0FBTCxHQUFXLElBQVg7QUFDQSxTQUFLQyxPQUFMLEdBQWUsQ0FBZjtBQUNBLFNBQUtDLE1BQUwsR0FBYyxLQUFLQyxJQUFMLENBQVVELE1BQXhCO0FBQ0EsU0FBS0UsT0FBTCxHQUFlLEtBQUtELElBQUwsQ0FBVUUscUJBQVYsQ0FBZ0NaLEVBQUUsQ0FBQ2EsRUFBSCxDQUFNLENBQU4sRUFBUyxDQUFULENBQWhDLENBQWY7O0FBQ0EsUUFBSUMsVUFBVSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsVUFBTixDQUF4Qjs7QUFDQSxTQUFLQyxNQUFMLEdBQWNKLFVBQWQ7QUFDQSxTQUFLSyxRQUFMLEdBQWdCLEVBQWhCOztBQUNBLFNBQUssSUFBSUMsQ0FBVCxJQUFjTixVQUFkLEVBQTBCO0FBQ3RCLFVBQUlPLElBQUksR0FBR1AsVUFBVSxDQUFDTSxDQUFELENBQXJCOztBQUNBLFdBQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsSUFBSSxDQUFDRSxLQUF6QixFQUFnQ0QsQ0FBQyxFQUFqQyxFQUFxQztBQUNqQyxhQUFLSCxRQUFMLENBQWNLLElBQWQsQ0FBbUJKLENBQW5CO0FBQ0g7QUFDSjs7QUFDRCxRQUFJSyxNQUFNLEdBQUcsS0FBS04sUUFBTCxDQUFjTSxNQUEzQjtBQUNBLFNBQUtOLFFBQUwsQ0FBY08sSUFBZCxDQUFtQixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDL0IsVUFBSUMsQ0FBQyxHQUFHQyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQlAsTUFBaEIsR0FBeUJBLE1BQU0sR0FBRyxDQUFuQyxDQUFoQjtBQUNBLGFBQU9JLENBQVA7QUFDSCxLQUhEO0FBSUgsR0EzQkk7QUE0QkxJLEVBQUFBLEtBNUJLLG1CQTRCRyxDQUNQLENBN0JJO0FBOEJMQyxFQUFBQSxNQTlCSyxrQkE4QkVDLEVBOUJGLEVBOEJNO0FBQ1AsUUFBSW5CLElBQUksQ0FBQ29CLE1BQVQsRUFBaUI7QUFDakIsUUFBSSxLQUFLM0IsTUFBTCxDQUFZNEIsT0FBaEIsRUFBeUI7QUFDekIsU0FBSzdCLE9BQUwsSUFBZ0IyQixFQUFoQjs7QUFDQSxRQUFJLEtBQUszQixPQUFMLEdBQWUsS0FBS0osUUFBeEIsRUFBa0M7QUFDOUI7QUFDSDs7QUFDRCxTQUFLSSxPQUFMLEdBQWUsQ0FBZjtBQUNBLFFBQUk4QixJQUFJLEdBQUcsS0FBS25CLFFBQUwsQ0FBY29CLEtBQWQsRUFBWDtBQUNBLFNBQUtwQixRQUFMLENBQWNLLElBQWQsQ0FBbUJjLElBQW5CO0FBQ0EsUUFBSUUsSUFBSSxHQUFHLEtBQUt0QixNQUFMLENBQVlvQixJQUFaLENBQVg7O0FBQ0EsUUFBSSxLQUFLL0IsR0FBVCxFQUFjO0FBQ1Y7QUFDQVMsTUFBQUEsSUFBSSxDQUFDeUIsSUFBTCxDQUFVLFNBQVYsRUFBcUJILElBQXJCLEVBQTJCLEtBQUszQixPQUFoQyxFQUF5QzZCLElBQXpDO0FBQ0g7QUFDSjtBQTdDSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgYmluZ1RpbWU6IDEwLCAvL+avj+malDXnp5Llh7rkuIDkuKrlhpvlrphcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgLy9jbGVhckludGVydmFsKHRoaXMubWFrZUp1bkd1YW4pXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMuZmZmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5leHRCaW4gPSAwO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5ub2RlLnBhcmVudDtcclxuICAgICAgICB0aGlzLmJpbmdQb3MgPSB0aGlzLm5vZGUuY29udmVydFRvV29ybGRTcGFjZUFSKGNjLnYyKDAsIDApKTtcclxuICAgICAgICBsZXQgZ2FtZUNvbmZpZyA9IHJlcXVpcmUoZ2FtZS5ndWFuS2FJbmZvKTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGdhbWVDb25maWc7XHJcbiAgICAgICAgdGhpcy5iaW5nTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gZ2FtZUNvbmZpZykge1xyXG4gICAgICAgICAgICBsZXQgb3B0cyA9IGdhbWVDb25maWdbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb3B0cy5jb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmdMaXN0LnB1c2goaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxlbmd0aCA9IHRoaXMuYmluZ0xpc3QubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuYmluZ0xpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICBsZXQgYyA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiBsZW5ndGggLSBsZW5ndGggLyAyKTtcclxuICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICB1cGRhdGUoZHQpIHtcclxuICAgICAgICBpZiAoZ2FtZS5pc092ZXIpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQuaXNEZWF0aCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMubmV4dEJpbiArPSBkdDtcclxuICAgICAgICBpZiAodGhpcy5uZXh0QmluIDwgdGhpcy5iaW5nVGltZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmV4dEJpbiA9IDA7XHJcbiAgICAgICAgbGV0IGJpbmcgPSB0aGlzLmJpbmdMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgdGhpcy5iaW5nTGlzdC5wdXNoKGJpbmcpO1xyXG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5jb25maWdbYmluZ107XHJcbiAgICAgICAgaWYgKHRoaXMuZmZmKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZmZmID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGdhbWUuZW1pdChcImNodWJpbmdcIiwgYmluZywgdGhpcy5iaW5nUG9zLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/fire/fire.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd3611yaI9lNuapmc728jxg/', 'fire');
// Script/fire/fire.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    this.init(data);
  },
  //开火动画
  init: function init(data) {
    if (!this._isinit) {
      this._isinit = true;
      this.aniNames = [];
    }

    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (this.aniNames.indexOf(data.aniName) < 0) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.aniName);
      var clip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 40);
      this.aniNames.push(data.aniName);
      clip.name = data.aniName;
      clip.wrapMode = cc.WrapMode.Normal;
      animation.addClip(clip);
    }

    animation.playAdditive(data.aniName, 0);
    animation.once("finished", function () {
      var pool = this.node.pool;

      if (pool) {
        pool.put(this.node);
      } else {
        this.node.removeFromParent(true);
        this.node.destroy();
      }
    }.bind(this));
  },
  start: function start() {},
  onDestroy: function onDestroy() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxmaXJlXFxmaXJlLmpzIl0sIm5hbWVzIjpbIlBvb2xDb21wb25lbnQiLCJyZXF1aXJlIiwiY2MiLCJDbGFzcyIsInByb3BlcnRpZXMiLCJvbkxvYWQiLCJ1bnVzZSIsInJldXNlIiwiZGF0YSIsImluaXQiLCJfaXNpbml0IiwiYW5pTmFtZXMiLCJub2RlIiwiYW5nbGUiLCJoZCIsIk1hdGgiLCJQSSIsInNwZWVkWCIsImNvcyIsIndpZHRoIiwic3BlZWRZIiwic2luIiwieCIsInYiLCJ5IiwiYW5pbWF0aW9uIiwiZ2V0Q29tcG9uZW50IiwiQW5pbWF0aW9uIiwiaW5kZXhPZiIsImFuaU5hbWUiLCJzcHJpdGVGcmFtZXMiLCJnYW1lIiwiZ2FtZVV0aWxzIiwiZ2V0U3ByaXRlRnJhbWVzIiwiYnVsbGV0X2F0bGFzIiwiY2xpcCIsIkFuaW1hdGlvbkNsaXAiLCJjcmVhdGVXaXRoU3ByaXRlRnJhbWVzIiwicHVzaCIsIm5hbWUiLCJ3cmFwTW9kZSIsIldyYXBNb2RlIiwiTm9ybWFsIiwiYWRkQ2xpcCIsInBsYXlBZGRpdGl2ZSIsIm9uY2UiLCJwb29sIiwicHV0IiwicmVtb3ZlRnJvbVBhcmVudCIsImRlc3Ryb3kiLCJiaW5kIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsTUFISyxvQkFHSSxDQUNSLENBSkk7QUFLTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVksQ0FDbEIsQ0FQSTtBQVFMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CLFNBQUtDLElBQUwsQ0FBVUQsSUFBVjtBQUNILEdBWEk7QUFZTDtBQUNBQyxFQUFBQSxJQWJLLGdCQWFBRCxJQWJBLEVBYU07QUFDUCxRQUFJLENBQUMsS0FBS0UsT0FBVixFQUFtQjtBQUNmLFdBQUtBLE9BQUwsR0FBZSxJQUFmO0FBQ0EsV0FBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNIOztBQUNELFNBQUtDLElBQUwsQ0FBVUMsS0FBVixHQUFrQkwsSUFBSSxDQUFDSyxLQUF2QjtBQUNBLFFBQUlDLEVBQUUsR0FBRyxLQUFLRixJQUFMLENBQVVDLEtBQVYsR0FBa0JFLElBQUksQ0FBQ0MsRUFBdkIsR0FBNEIsR0FBckM7QUFDQSxTQUFLQyxNQUFMLEdBQWNGLElBQUksQ0FBQ0csR0FBTCxDQUFTSixFQUFULElBQWUsS0FBS0YsSUFBTCxDQUFVTyxLQUF6QixHQUFpQyxDQUEvQztBQUNBLFNBQUtDLE1BQUwsR0FBY0wsSUFBSSxDQUFDTSxHQUFMLENBQVNQLEVBQVQsSUFBZSxLQUFLRixJQUFMLENBQVVPLEtBQXpCLEdBQWlDLENBQS9DO0FBQ0EsU0FBS1AsSUFBTCxDQUFVVSxDQUFWLEdBQWNkLElBQUksQ0FBQ2UsQ0FBTCxDQUFPRCxDQUFQLEdBQVcsS0FBS0wsTUFBOUI7QUFDQSxTQUFLTCxJQUFMLENBQVVZLENBQVYsR0FBY2hCLElBQUksQ0FBQ2UsQ0FBTCxDQUFPQyxDQUFQLEdBQVcsS0FBS0osTUFBOUI7QUFDQSxRQUFJSyxTQUFTLEdBQUcsS0FBS2IsSUFBTCxDQUFVYyxZQUFWLENBQXVCeEIsRUFBRSxDQUFDeUIsU0FBMUIsQ0FBaEIsQ0FYTyxDQVc4Qzs7QUFDckQsUUFBSSxLQUFLaEIsUUFBTCxDQUFjaUIsT0FBZCxDQUFzQnBCLElBQUksQ0FBQ3FCLE9BQTNCLElBQXNDLENBQTFDLEVBQTZDO0FBQ3pDLFVBQUlDLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVDLGVBQWYsQ0FBK0JGLElBQUksQ0FBQ0csWUFBcEMsRUFBa0QxQixJQUFJLENBQUNxQixPQUF2RCxDQUFuQjtBQUNBLFVBQUlNLElBQUksR0FBR2pDLEVBQUUsQ0FBQ2tDLGFBQUgsQ0FBaUJDLHNCQUFqQixDQUF3Q1AsWUFBeEMsRUFBc0QsRUFBdEQsQ0FBWDtBQUNBLFdBQUtuQixRQUFMLENBQWMyQixJQUFkLENBQW1COUIsSUFBSSxDQUFDcUIsT0FBeEI7QUFDQU0sTUFBQUEsSUFBSSxDQUFDSSxJQUFMLEdBQVkvQixJQUFJLENBQUNxQixPQUFqQjtBQUNBTSxNQUFBQSxJQUFJLENBQUNLLFFBQUwsR0FBZ0J0QyxFQUFFLENBQUN1QyxRQUFILENBQVlDLE1BQTVCO0FBQ0FqQixNQUFBQSxTQUFTLENBQUNrQixPQUFWLENBQWtCUixJQUFsQjtBQUNIOztBQUNEVixJQUFBQSxTQUFTLENBQUNtQixZQUFWLENBQXVCcEMsSUFBSSxDQUFDcUIsT0FBNUIsRUFBcUMsQ0FBckM7QUFDQUosSUFBQUEsU0FBUyxDQUFDb0IsSUFBVixDQUFlLFVBQWYsRUFBMkIsWUFBWTtBQUNuQyxVQUFJQyxJQUFJLEdBQUcsS0FBS2xDLElBQUwsQ0FBVWtDLElBQXJCOztBQUNBLFVBQUlBLElBQUosRUFBVTtBQUNOQSxRQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxLQUFLbkMsSUFBZDtBQUNILE9BRkQsTUFHSztBQUNELGFBQUtBLElBQUwsQ0FBVW9DLGdCQUFWLENBQTJCLElBQTNCO0FBQ0EsYUFBS3BDLElBQUwsQ0FBVXFDLE9BQVY7QUFDSDtBQUNKLEtBVDBCLENBU3pCQyxJQVR5QixDQVNwQixJQVRvQixDQUEzQjtBQVVILEdBNUNJO0FBNkNMQyxFQUFBQSxLQTdDSyxtQkE2Q0csQ0FDUCxDQTlDSTtBQStDTEMsRUFBQUEsU0EvQ0ssdUJBK0NPLENBQ1g7QUFoREksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFBvb2xDb21wb25lbnQgPSByZXF1aXJlKFwiUG9vbENvbXBvbmVudFwiKTsgLy/msaDlrZDnu4Tku7ZcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogUG9vbENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8v5Zue5pS2XHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIC8v6YeN55SoXHJcbiAgICByZXVzZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmluaXQoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgLy/lvIDngavliqjnlLtcclxuICAgIGluaXQoZGF0YSkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNpbml0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzaW5pdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pTmFtZXMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ub2RlLmFuZ2xlID0gZGF0YS5hbmdsZTtcclxuICAgICAgICBsZXQgaGQgPSB0aGlzLm5vZGUuYW5nbGUgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgIHRoaXMuc3BlZWRYID0gTWF0aC5jb3MoaGQpICogdGhpcy5ub2RlLndpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLnNwZWVkWSA9IE1hdGguc2luKGhkKSAqIHRoaXMubm9kZS53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy5ub2RlLnggPSBkYXRhLnYueCArIHRoaXMuc3BlZWRYO1xyXG4gICAgICAgIHRoaXMubm9kZS55ID0gZGF0YS52LnkgKyB0aGlzLnNwZWVkWTtcclxuICAgICAgICBsZXQgYW5pbWF0aW9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pOy8v5Yqo55S757uE5Lu2XHJcbiAgICAgICAgaWYgKHRoaXMuYW5pTmFtZXMuaW5kZXhPZihkYXRhLmFuaU5hbWUpIDwgMCkge1xyXG4gICAgICAgICAgICBsZXQgc3ByaXRlRnJhbWVzID0gZ2FtZS5nYW1lVXRpbHMuZ2V0U3ByaXRlRnJhbWVzKGdhbWUuYnVsbGV0X2F0bGFzLCBkYXRhLmFuaU5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgY2xpcCA9IGNjLkFuaW1hdGlvbkNsaXAuY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyhzcHJpdGVGcmFtZXMsIDQwKTtcclxuICAgICAgICAgICAgdGhpcy5hbmlOYW1lcy5wdXNoKGRhdGEuYW5pTmFtZSk7XHJcbiAgICAgICAgICAgIGNsaXAubmFtZSA9IGRhdGEuYW5pTmFtZTtcclxuICAgICAgICAgICAgY2xpcC53cmFwTW9kZSA9IGNjLldyYXBNb2RlLk5vcm1hbDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLmFkZENsaXAoY2xpcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuaW1hdGlvbi5wbGF5QWRkaXRpdmUoZGF0YS5hbmlOYW1lLCAwKTtcclxuICAgICAgICBhbmltYXRpb24ub25jZShcImZpbmlzaGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBvb2wgPSB0aGlzLm5vZGUucG9vbDtcclxuICAgICAgICAgICAgaWYgKHBvb2wpIHtcclxuICAgICAgICAgICAgICAgIHBvb2wucHV0KHRoaXMubm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/gameControl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '44382HMcClF0oWihawsLo2W', 'gameControl');
// Script/game/gameControl.js

"use strict";

module.exports = {
  left: "left",
  //
  right: "right",
  down: "down",
  up: "up",
  weapons: "weapons" //切花武器

};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lXFxnYW1lQ29udHJvbC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibGVmdCIsInJpZ2h0IiwiZG93biIsInVwIiwid2VhcG9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxNQURPO0FBQ0M7QUFDZEMsRUFBQUEsS0FBSyxFQUFFLE9BRk07QUFHYkMsRUFBQUEsSUFBSSxFQUFFLE1BSE87QUFJYkMsRUFBQUEsRUFBRSxFQUFFLElBSlM7QUFLYkMsRUFBQUEsT0FBTyxFQUFFLFNBTEksQ0FLTTs7QUFMTixDQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBsZWZ0OiBcImxlZnRcIiwgLy9cclxuICAgIHJpZ2h0OiBcInJpZ2h0XCIsXHJcbiAgICBkb3duOiBcImRvd25cIixcclxuICAgIHVwOiBcInVwXCIsXHJcbiAgICB3ZWFwb25zOiBcIndlYXBvbnNcIiwvL+WIh+iKseatpuWZqFxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/guangka/guankazhang.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3b58aCTCodDPLCOgoy76tOS', 'guankazhang');
// Script/guangka/guankazhang.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    num: 1
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxndWFuZ2thXFxndWFua2F6aGFuZy5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm51bSIsIm9uRGVzdHJveSIsIm9uTG9hZCIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsR0FBRyxFQUFFO0FBREcsR0FGUDtBQUtMQyxFQUFBQSxTQUxLLHVCQUtPLENBQ1gsQ0FOSTtBQU9MQyxFQUFBQSxNQVBLLG9CQU9JLENBQ1IsQ0FSSTtBQVNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsS0FqQkssbUJBaUJHLENBQ1AsQ0FsQkksQ0FtQkw7O0FBbkJLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBudW06IDFcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy/lvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgIJcclxuICAgIC8vIG9uRW5hYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8vIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICAvLyBvbkRpc2FibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/layer/shootBullet.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7b412irmTBCk7rwyHAKfT2b', 'shootBullet');
// Script/layer/shootBullet.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    game.off("shoot", this.shoot, this); //
  },
  onLoad: function onLoad() {
    game.on("shoot", this.shoot, this); //
  },

  /****
   * 发射子弹
   * ****/
  shoot: function shoot(data) {
    var pool = game.bulletPool[data.prefabName];

    if (pool && pool.prefab) {
      pool.getNode(data, this.node); //this.node.addChild(b);
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxsYXllclxcc2hvb3RCdWxsZXQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJnYW1lIiwib2ZmIiwic2hvb3QiLCJvbkxvYWQiLCJvbiIsImRhdGEiLCJwb29sIiwiYnVsbGV0UG9vbCIsInByZWZhYk5hbWUiLCJwcmVmYWIiLCJnZXROb2RlIiwibm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsU0FISyx1QkFHTztBQUNSQyxJQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxPQUFULEVBQWtCLEtBQUtDLEtBQXZCLEVBQThCLElBQTlCLEVBRFEsQ0FDNEI7QUFDdkMsR0FMSTtBQU1MQyxFQUFBQSxNQU5LLG9CQU1JO0FBQ0xILElBQUFBLElBQUksQ0FBQ0ksRUFBTCxDQUFRLE9BQVIsRUFBaUIsS0FBS0YsS0FBdEIsRUFBNkIsSUFBN0IsRUFESyxDQUM4QjtBQUN0QyxHQVJJOztBQVNMO0FBQ0o7QUFDQTtBQUNJQSxFQUFBQSxLQVpLLGlCQVlDRyxJQVpELEVBWU87QUFDUixRQUFJQyxJQUFJLEdBQUdOLElBQUksQ0FBQ08sVUFBTCxDQUFnQkYsSUFBSSxDQUFDRyxVQUFyQixDQUFYOztBQUNBLFFBQUlGLElBQUksSUFBSUEsSUFBSSxDQUFDRyxNQUFqQixFQUF5QjtBQUNyQkgsTUFBQUEsSUFBSSxDQUFDSSxPQUFMLENBQWFMLElBQWIsRUFBa0IsS0FBS00sSUFBdkIsRUFEcUIsQ0FFckI7QUFDSDtBQUNKO0FBbEJJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIGdhbWUub2ZmKFwic2hvb3RcIiwgdGhpcy5zaG9vdCwgdGhpcyk7Ly9cclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgZ2FtZS5vbihcInNob290XCIsIHRoaXMuc2hvb3QsIHRoaXMpOy8vXHJcbiAgICB9LFxyXG4gICAgLyoqKipcclxuICAgICAqIOWPkeWwhOWtkOW8uVxyXG4gICAgICogKioqKi9cclxuICAgIHNob290KGRhdGEpIHtcclxuICAgICAgICBsZXQgcG9vbCA9IGdhbWUuYnVsbGV0UG9vbFtkYXRhLnByZWZhYk5hbWVdO1xyXG4gICAgICAgIGlmIChwb29sICYmIHBvb2wucHJlZmFiKSB7XHJcbiAgICAgICAgICAgIHBvb2wuZ2V0Tm9kZShkYXRhLHRoaXMubm9kZSk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5ub2RlLmFkZENoaWxkKGIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSlcclxuO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/pool/PoolComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '60730Nd0lZMaan6479QnPar', 'PoolComponent');
// Script/pool/PoolComponent.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {},
  onComplete: function onComplete() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxwb29sXFxQb29sQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwidW51c2UiLCJyZXVzZSIsImRhdGEiLCJvbkNvbXBsZXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQUxJO0FBTUw7QUFDQUMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0IsQ0FDdEIsQ0FSSTtBQVNMQyxFQUFBQSxVQUFVLEVBQUUsc0JBQVksQ0FDdkI7QUFWSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIC8v5Zue5pS2XHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIC8v6YeN55SoXHJcbiAgICByZXVzZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIH0sXHJcbiAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/addMap.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd00fe6c691KLKbLOpXcCm8A', 'addMap');
// Script/test/addMap.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    cell: cc.Node
  },
  onLoad: function onLoad() {
    this.node.removeAllChildren();
    var num = 30;

    for (var i = 0; i < num; i++) {
      var cell = cc.instantiate(this.cell);
      var r = parseInt(Math.random() * 255);
      var g = parseInt(Math.random() * 255);
      var b = parseInt(Math.random() * 255);
      cell.color = cc.color(r, g, b);
      cell.getComponent("itemTest").setInfo(i);
      this.node.addChild(cell);
    }
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxhZGRNYXAuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJjZWxsIiwiTm9kZSIsIm9uTG9hZCIsIm5vZGUiLCJyZW1vdmVBbGxDaGlsZHJlbiIsIm51bSIsImkiLCJpbnN0YW50aWF0ZSIsInIiLCJwYXJzZUludCIsIk1hdGgiLCJyYW5kb20iLCJnIiwiYiIsImNvbG9yIiwiZ2V0Q29tcG9uZW50Iiwic2V0SW5mbyIsImFkZENoaWxkIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUVKLEVBQUUsQ0FBQ0s7QUFERCxHQUZQO0FBS0xDLEVBQUFBLE1BTEssb0JBS0k7QUFDTCxTQUFLQyxJQUFMLENBQVVDLGlCQUFWO0FBQ0EsUUFBSUMsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxHQUFwQixFQUF5QkMsQ0FBQyxFQUExQixFQUE4QjtBQUMxQixVQUFJTixJQUFJLEdBQUdKLEVBQUUsQ0FBQ1csV0FBSCxDQUFlLEtBQUtQLElBQXBCLENBQVg7QUFDQSxVQUFJUSxDQUFDLEdBQUdDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLEdBQWpCLENBQWhCO0FBQ0EsVUFBSUMsQ0FBQyxHQUFHSCxRQUFRLENBQUNDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixHQUFqQixDQUFoQjtBQUNBLFVBQUlFLENBQUMsR0FBR0osUUFBUSxDQUFDQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsR0FBakIsQ0FBaEI7QUFDQVgsTUFBQUEsSUFBSSxDQUFDYyxLQUFMLEdBQWFsQixFQUFFLENBQUNrQixLQUFILENBQVNOLENBQVQsRUFBWUksQ0FBWixFQUFlQyxDQUFmLENBQWI7QUFDQWIsTUFBQUEsSUFBSSxDQUFDZSxZQUFMLENBQWtCLFVBQWxCLEVBQThCQyxPQUE5QixDQUFzQ1YsQ0FBdEM7QUFDQSxXQUFLSCxJQUFMLENBQVVjLFFBQVYsQ0FBbUJqQixJQUFuQjtBQUNIO0FBQ0osR0FqQkk7QUFrQkxrQixFQUFBQSxLQWxCSyxtQkFrQkcsQ0FDUCxDQW5CSTtBQW9CTEMsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkksQ0FzQkw7O0FBdEJLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBjZWxsOiBjYy5Ob2RlXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIHZhciBudW0gPSAzMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBjZWxsID0gY2MuaW5zdGFudGlhdGUodGhpcy5jZWxsKTtcclxuICAgICAgICAgICAgbGV0IHIgPSBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMjU1KTtcclxuICAgICAgICAgICAgbGV0IGcgPSBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMjU1KTtcclxuICAgICAgICAgICAgbGV0IGIgPSBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMjU1KTtcclxuICAgICAgICAgICAgY2VsbC5jb2xvciA9IGNjLmNvbG9yKHIsIGcsIGIpO1xyXG4gICAgICAgICAgICBjZWxsLmdldENvbXBvbmVudChcIml0ZW1UZXN0XCIpLnNldEluZm8oaSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5hZGRDaGlsZChjZWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/gameMain.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1ef624xfbNLtpi98CtasLrt', 'gameMain');
// Script/scene/gameMain.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {
    game.emit("levelGame");
  },
  onLoad: function onLoad() {
    game.emit("enterGame");
    game.soundManager.playMusic(game.gameSound.bgm1_1, true);
  },
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxzY2VuZVxcZ2FtZU1haW4uanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJnYW1lIiwiZW1pdCIsIm9uTG9hZCIsInNvdW5kTWFuYWdlciIsInBsYXlNdXNpYyIsImdhbWVTb3VuZCIsImJnbTFfMSIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsQ0FDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCUSxHQUZQO0FBb0JMQyxFQUFBQSxTQXBCSyx1QkFvQk87QUFDUkMsSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsV0FBVjtBQUNILEdBdEJJO0FBdUJMQyxFQUFBQSxNQXZCSyxvQkF1Qkk7QUFDTEYsSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsV0FBVjtBQUNBRCxJQUFBQSxJQUFJLENBQUNHLFlBQUwsQ0FBa0JDLFNBQWxCLENBQTRCSixJQUFJLENBQUNLLFNBQUwsQ0FBZUMsTUFBM0MsRUFBa0QsSUFBbEQ7QUFFSCxHQTNCSTtBQTRCTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLEVBQUFBLEtBcENLLG1CQW9DRyxDQUNQLENBckNJLENBc0NMOztBQXRDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgLy8gZm9vOiB7XHJcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XHJcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxyXG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICAgIC8vICAgICB0b29sdGlwOiBcIuaPj+i/sHRpcHNcIlxyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gYmFyOiB7XHJcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xyXG4gICAgICAgIC8vICAgICB9LFxyXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH0sXHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIGdhbWUuZW1pdChcImxldmVsR2FtZVwiKTtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgZ2FtZS5lbWl0KFwiZW50ZXJHYW1lXCIpO1xyXG4gICAgICAgIGdhbWUuc291bmRNYW5hZ2VyLnBsYXlNdXNpYyhnYW1lLmdhbWVTb3VuZC5iZ20xXzEsdHJ1ZSk7XHJcbiAgICAgICAgXHJcbiAgICB9LFxyXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XHJcbiAgICAvL+W9k+ivpee7hOS7tuiiq+WQr+eUqO+8jOW5tuS4lOWug+eahOiKgueCueS5n+a/gOa0u+aXtuOAglxyXG4gICAgLy8gb25FbmFibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gLy/lvZPor6Xnu4Tku7booqvnpoHnlKjmiJboioLngrnlj5jkuLrml6DmlYjml7bosIPnlKjjgIJcclxuICAgIC8vIG9uRGlzYWJsZSgpIHtcclxuICAgIC8vIH0sXHJcbiAgICAvL+ivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAglxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/ui/gameOverWinPanel .js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7d373VHBIdCQZyFeggSUsS8', 'gameOverWinPanel ');
// Script/ui/gameOverWinPanel .js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    this.data = data;
  },
  onClosed: function onClosed(e) {
    game.emit(game.gameEvent.load_scene, game.gameScene.hall);
    game.emit(game.gameEvent.closed_prefab, this.node);
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx1aVxcZ2FtZU92ZXJXaW5QYW5lbCAuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInVudXNlIiwicmV1c2UiLCJkYXRhIiwib25DbG9zZWQiLCJlIiwiZ2FtZSIsImVtaXQiLCJnYW1lRXZlbnQiLCJsb2FkX3NjZW5lIiwiZ2FtZVNjZW5lIiwiaGFsbCIsImNsb3NlZF9wcmVmYWIiLCJub2RlIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVksQ0FDbEIsQ0FMSTtBQU1MO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CLFNBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNILEdBVEk7QUFVTEMsRUFBQUEsUUFWSyxvQkFVSUMsQ0FWSixFQVVPO0FBQ1JDLElBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVRCxJQUFJLENBQUNFLFNBQUwsQ0FBZUMsVUFBekIsRUFBcUNILElBQUksQ0FBQ0ksU0FBTCxDQUFlQyxJQUFwRDtBQUNBTCxJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVUQsSUFBSSxDQUFDRSxTQUFMLENBQWVJLGFBQXpCLEVBQXdDLEtBQUtDLElBQTdDO0FBQ0gsR0FiSTtBQWNMQyxFQUFBQSxLQWRLLG1CQWNHLENBQ1A7QUFmSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICAvL+WbnuaUtlxyXG4gICAgdW51c2U6IGZ1bmN0aW9uICgpIHtcclxuICAgIH0sXHJcbiAgICAvL+mHjeeUqFxyXG4gICAgcmV1c2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH0sXHJcbiAgICBvbkNsb3NlZChlKSB7XHJcbiAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmxvYWRfc2NlbmUsIGdhbWUuZ2FtZVNjZW5lLmhhbGwpO1xyXG4gICAgICAgIGdhbWUuZW1pdChnYW1lLmdhbWVFdmVudC5jbG9zZWRfcHJlZmFiLCB0aGlzLm5vZGUpO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/uuids.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '810e3c1w3hCSaPwmtairUcx', 'uuids');
// Script/core/uuids.js

"use strict";

module.exports = {
  "d74d7172-1fa1-41e8-ae9e-1445ebea0cd8": "./Scene/gameGuanka.fire",
  "c121fa0b-79d4-4da2-9501-b6f47d741f31": "./Scene/gameMain.fire",
  "6893700d-458b-4d35-a7b4-13324ee4e80a": "./Scene/hall.fire",
  "f9e4f40f-79e5-4a17-a89d-98190f3b0c1f": "./Scene/login.fire",
  "722f8927-0f8a-454c-a29a-451c3c78ddc6": "./Scene/edit/mapEdit.fire",
  "d4920577-b3d4-48b1-b263-c2296232b89e": "./Scene/edit/roleEdit.fire",
  "ba2eee8c-0715-4bce-a4a6-b869f819d7c8": "./resources/bg/guankabg.jpg",
  "1948c7a5-087a-46eb-92a8-ceeba2b119cb": "./resources/bg/loginBg.jpg",
  "53e07a1a-b349-47cd-9001-bf409925e79a": "./resources/bg/ztbg.png",
  "aceab0cc-a72f-4f67-a699-60f836d6597d": "./resources/fnt/djb.fnt",
  "84f8d933-f260-4aa0-a747-bf9074997abc": "./resources/fnt/djb.png",
  "76dddb12-e5dc-4569-a677-290b63ff9fc9": "./resources/fnt/gk.fnt",
  "4ef34dfa-8f37-4487-ae66-47f8caff1cb2": "./resources/fnt/gk.png",
  "ac99f0d4-f1a7-4383-8228-be069253714a": "./resources/fnt/shm.fnt",
  "145be925-1992-4ede-ba47-c48fb0ac68f5": "./resources/fnt/shm.png",
  "a1a251c5-123f-4f6d-815d-94657961f2a5": "./resources/fnt/shyzd.fnt",
  "1f39306a-b852-4e2b-9743-5abe80628cbd": "./resources/fnt/shyzd.png",
  "6d00b8b2-e61f-4abf-8ef7-99d2472512d8": "./resources/fnt/sz.fnt",
  "39ec2272-d7cc-47f4-8ea7-8e95e168e269": "./resources/fnt/sz.png",
  "2bcdf419-1e3e-434a-b178-3aff3599dfe1": "./resources/fnt/xb.fnt",
  "25d2a150-8424-4374-8b88-ca504b7379ee": "./resources/fnt/xb.png",
  "60a51721-5c82-4649-b09e-5a8cd3f556fb": "./resources/fnt/xjb.fnt",
  "4ac294cc-8060-4bae-8449-0c00998d6d64": "./resources/fnt/xjb.png",
  "a3f10d4b-8617-4002-8a6b-10b5ab5037e8": "./resources/map/map1_1.jpg",
  "66584e35-8531-4b88-8da1-95f08dca7859": "./resources/map/map1_2.jpg",
  "82bdfc19-5df3-49f2-b012-f1acc986d873": "./resources/plist/bomb.plist",
  "68588a96-c0f8-4d25-be2e-087f5da1774b": "./resources/plist/bomb.png",
  "748536db-9909-4ac1-a12c-364d0aa53022": "./resources/plist/bullet.plist",
  "a450a7c0-4f64-47f0-a73d-1154469851d5": "./resources/plist/bullet.png",
  "82a9b684-4c52-4f0c-904f-98282d700caa": "./resources/plist/loading.plist",
  "b4b5aa8c-d9b4-45c8-9bcd-1a8e23e06ec2": "./resources/plist/loading.png",
  "2a4c8933-3824-49bd-b51c-4f41d2c5669f": "./resources/plist/map.plist",
  "a9094eb2-11ed-40fc-b6c6-cb53666c2ca6": "./resources/plist/map.png",
  "1f9a16e3-a619-4eaf-bb25-d6046caecb9a": "./resources/plist/ui.plist",
  "17a8720c-1a8a-4d2f-ae3f-0abf80ede220": "./resources/plist/ui.png",
  "edd686c3-69e1-4abb-95eb-937536448a80": "./resources/res/dot.png",
  "784999e0-c15d-4cbc-884a-6454252e25d5": "./resources/res/joystick.png",
  "8a35ac54-2e27-44c0-8a89-bfb6190c0260": "./resources/res/noise1.png",
  "7dfd1234-d9a6-4e42-b0d9-43bfc7e9dbcf": "./resources/res/rockerBg.png",
  "5923f13c-05f1-4c37-9e84-b6a847ad8bec": "./resources/sound/bao_zha_jing_bao.mp3",
  "42e52b4d-c8d9-44c0-b434-8f8122e073af": "./resources/sound/bgm1_1.mp3",
  "6a0ef7eb-70f3-4f0b-84c4-d2d2555f6713": "./resources/sound/bgm1_2.mp3",
  "77e9e707-4e99-46a0-a12b-8573de050390": "./resources/sound/bgm1_3.mp3",
  "382d9ea1-540d-49bc-80af-6dddb98615cd": "./resources/sound/bgm2_1.mp3",
  "bb79dbb4-3568-4b09-9f7c-e46abed3f4b0": "./resources/sound/bgm2_2.mp3",
  "added5c0-fd60-4bb0-a7d7-d3d47a2d0661": "./resources/sound/bgm2_3.mp3",
  "c6dbb023-0bdc-4afe-b1d2-7ac6c2a4c836": "./resources/sound/bgm2_4.mp3",
  "17814bcb-6bf6-4a5e-8cf6-69edd02371d9": "./resources/sound/bgm3_1.mp3",
  "7158748d-fef8-47af-8df1-cb2c938e5f02": "./resources/sound/bgm3_2.mp3",
  "62e4bf93-ae55-45d1-966e-0bc5f34c42fb": "./resources/sound/bgm3_3.mp3",
  "b5066e85-d3a7-4361-8093-6213c44c63b9": "./resources/sound/bgm4_1.mp3",
  "dc304605-47aa-4294-b956-836ea36d2e49": "./resources/sound/bgm4_2.mp3",
  "cc5a8177-2ff6-450f-9a32-66267f93dca7": "./resources/sound/bgm4_3.mp3",
  "cc35a6c0-9fee-4fd9-8586-5e6f9b4ca1ae": "./resources/sound/bgm4_4.mp3",
  "d9be01ee-f87c-4d1a-9710-2a34edb22a07": "./resources/sound/bgm_lose.mp3",
  "adf6919a-b418-4319-be48-bce33504ecc7": "./resources/sound/bgm_win.mp3",
  "b5679139-1b0f-4c25-87ad-259c8bd8cdf5": "./resources/sound/bi_sha_yin_xiao1.mp3",
  "4c6210cd-49a8-4ffc-a499-beda3d9f80e6": "./resources/sound/bi_sha_yin_xiao2.mp3",
  "8ff34567-5577-4bc8-9466-be4fcd60b997": "./resources/sound/bi_sha_yin_xiao3.mp3",
  "76000b4b-a75c-4cd2-be48-fc78fb02db8f": "./resources/sound/bo_li_po_sui.mp3",
  "ceec43ef-13d4-4894-8467-f16c4eda962b": "./resources/sound/boss_jing_bao.mp3",
  "02481be8-e4bb-4981-8dbd-869ab7cdd022": "./resources/sound/bu_chong_dan_yao.mp3",
  "c3c68ad3-d9ba-4bf3-b083-2cbc86b579ec": "./resources/sound/chong_xing_qiang_jie1.mp3",
  "cf7d62ea-7b74-4ac6-a0ee-1a38740aec90": "./resources/sound/chong_xing_qiang_jie2.mp3",
  "484b3047-5b17-41c8-8077-6696fbb48588": "./resources/sound/chong_xing_qiang_jie3.mp3",
  "36329aef-0c59-4153-8481-d35dcbd2f515": "./resources/sound/chong_xing_qiang_jie4.mp3",
  "f5f9cdc3-1cc3-4d9b-8f27-2aa388d69a4e": "./resources/sound/chong_xing_qiang_jie5.mp3",
  "9be6ca02-0fca-4c8c-b25a-773e595bc89f": "./resources/sound/chong_xing_qiang_jie6.mp3",
  "7c983613-6ba3-486a-b97b-294c1fc009f1": "./resources/sound/chong_xing_qiang_jie7.mp3",
  "8d7309d1-df37-4232-926c-e37af479b59d": "./resources/sound/chu_shui.mp3",
  "785ff632-b997-4849-b48b-e6215bdf590d": "./resources/sound/da_bao_zha.mp3",
  "8ce30dd6-b74b-437c-897e-c1b37736b09a": "./resources/sound/da_ji_sheng_yin.mp3",
  "b16e541e-9dbd-4f1f-bf65-ac0f3dee5ae8": "./resources/sound/da_tiao_yue.mp3",
  "6212f79b-8b44-49de-bb57-5ffe12546d4f": "./resources/sound/da_xiang_jiao_sheng.mp3",
  "81173b70-1514-4264-b2ad-1e49ffd20ef2": "./resources/sound/dao_dan_bao_zha.mp3",
  "da3314f5-2a03-41be-a516-5ddce4c1fb57": "./resources/sound/di_bing_si_wang01.mp3",
  "72b015e8-5388-453f-9c89-e33c2576ecff": "./resources/sound/di_bing_si_wang02.mp3",
  "8b2242ae-2e83-41fd-8c59-92f5c1284dbd": "./resources/sound/di_bing_si_wang03.mp3",
  "8f78eedb-98bc-409c-8226-731829480a38": "./resources/sound/di_bing_si_wang04.mp3",
  "053c4e8a-2aaa-4d53-8b37-480cb0739cc5": "./resources/sound/e_yu1.mp3",
  "39c7784e-d3a0-4fa5-acab-cdfa17f571ea": "./resources/sound/fei_ji_fei_guo.mp3",
  "ea4e3f35-a763-4fe2-9875-da968b5f5064": "./resources/sound/fei_ji_fei_lai.mp3",
  "406ae0c7-be52-44d5-ad74-f8e408267574": "./resources/sound/fei_ji_fei_zou.mp3",
  "828a49df-93ab-41ca-a0ea-eb6a11bdd6c1": "./resources/sound/fei_ji_jin_ru.mp3",
  "7b7e5b14-b647-442a-81c8-3ff9f88cdb8b": "./resources/sound/fei_ji_tiao_chu.mp3",
  "19ad5542-1625-4503-b262-c50bcd8dfa5a": "./resources/sound/gong_fu_bo_dong_quan.mp3",
  "eea41dcb-74ed-4375-af75-196f04dc61e1": "./resources/sound/gong_fu_da_xiao.mp3",
  "6a7bf3ac-2ceb-4147-9907-90b0af130e6a": "./resources/sound/gong_fu_sheng_long_quan.mp3",
  "2b5e460e-6cd1-4222-aa7f-aea47d72d9d3": "./resources/sound/gong_fu_xuan_feng_tui.mp3",
  "fddbdf19-62e7-44db-bd2f-7ed3720a7528": "./resources/sound/gong_gong_ji1.mp3",
  "ea4ba105-01a6-4c25-862c-05766f22a1eb": "./resources/sound/gong_gong_ji2.mp3",
  "243beeb9-3d54-468e-8a38-ae9acc3b20fc": "./resources/sound/gong_ji.mp3",
  "9c0e4762-b897-497d-91e9-007b3dae08a6": "./resources/sound/hong_zha_ji_luo_dan.mp3",
  "74e2c78b-95c1-4ca8-863c-863f5530b19b": "./resources/sound/huo_che1.mp3",
  "fb01ddd8-3646-49c5-92c8-d029688a0b10": "./resources/sound/huo_che2.mp3",
  "60ce20b3-e1d4-405e-b256-fbc15778bd37": "./resources/sound/huo_jian_fa_she.mp3",
  "00436054-5924-49ae-80a5-45fdf18ad5d6": "./resources/sound/ji_fen_yin_xiao.mp3",
  "a91971a2-780c-4111-aa6a-f7b8d5e4ea3e": "./resources/sound/ji_guang_pao.mp3",
  "23a0228e-17f7-4e06-8f19-8a066578f08f": "./resources/sound/ji_qiang1.mp3",
  "b2e813aa-e29e-4342-9bcc-19ef1edc54ec": "./resources/sound/ji_qiang2.mp3",
  "bc38dff1-da3b-4339-a4fb-8690144a7bff": "./resources/sound/ji_qiang3.mp3",
  "caf67b9f-4c4e-4938-90e6-9a8c51a191fc": "./resources/sound/ji_qiang4.mp3",
  "e5bd938e-a6b2-401e-951d-3e6ec80d0ff7": "./resources/sound/ji_qiang5.mp3",
  "a7c6985c-3b59-49de-b559-40c1f1564db6": "./resources/sound/ji_qiang6.mp3",
  "0675de16-7951-4d80-ba38-63b8feb9b2a1": "./resources/sound/ji_qiang7.mp3",
  "71461f37-447a-4888-85b8-b2e588fce6e7": "./resources/sound/ji_qiang8.mp3",
  "96f9f85b-bd87-4fa5-b1b9-8240f14ac4eb": "./resources/sound/jian_dao_fen_shu.mp3",
  "70bbdde9-d486-4bc2-90e0-a8c7af97ae41": "./resources/sound/kan_dao.mp3",
  "21c38d01-bfe3-42e3-8efb-cd0a8c61faa0": "./resources/sound/kong_zi_dan.mp3",
  "aab9d84e-2069-4f49-a121-c8b64dc52e79": "./resources/sound/luo_shui.mp3",
  "d7e49f6d-22a5-43b3-be52-d932cd55f0c7": "./resources/sound/ma_sheng_yin1.mp3",
  "6d7efd66-f60d-4877-b925-616f38315c81": "./resources/sound/ma_sheng_yin2.mp3",
  "ef50fb6e-2f96-4ec6-9904-9a34b85c26b6": "./resources/sound/mu_xiang_po_sui.mp3",
  "e3deaadc-f5a4-4869-a011-fc932cb5d30a": "./resources/sound/op.mp3",
  "b5d94dc8-a07e-42d2-b464-fea03b79340c": "./resources/sound/qia_che_cha_che.mp3",
  "cfa5d072-9c4d-4a44-93c9-25fd62d61309": "./resources/sound/qia_che_kai_dong.mp3",
  "9f25e94a-1146-41e3-95c0-c99c4082125c": "./resources/sound/qing_xing_qiang_jie1.mp3",
  "68e72ccb-9e6b-475b-8dc9-cb4d03febca8": "./resources/sound/qing_xing_qiang_jie2.mp3",
  "d554fe6f-d7b2-4e39-96e4-ad2d381b3626": "./resources/sound/qing_xing_qiang_jie3.mp3",
  "73769868-e8fb-4cb9-88b3-5b049d783b6f": "./resources/sound/qing_xing_qiang_jie4.mp3",
  "6bd765f7-c5cf-4501-9ccd-f53b0680bd1f": "./resources/sound/reng_shou_lei.mp3",
  "edc78f33-856c-4578-8f1d-c74f3c6df9cd": "./resources/sound/shi_bing_shou_liang.mp3",
  "13ee1ed9-4525-4a42-adc7-1bd6cd4a8ec3": "./resources/sound/shou_lei_bao_zha.mp3",
  "4c0fca4c-f5b1-4a72-a2da-e672d3d1dd17": "./resources/sound/shou_qiang_shang_zi_dan.mp3",
  "1ce5dd04-7251-4163-913f-3e15555185bf": "./resources/sound/tan_ke_she_ji.mp3",
  "ef562280-0de4-4d7d-913b-f52bb6efb4f0": "./resources/sound/tan_ke_yun_xing.mp3",
  "cef8102c-baf1-4573-8f8a-7eef5140fb11": "./resources/sound/teng_tiao.mp3",
  "7c028552-b4aa-4d85-bbe3-5bfe4db4a81b": "./resources/sound/wen_chong1.mp3",
  "4f9c0f60-474a-4556-81d8-f971cd623a85": "./resources/sound/wen_chong2.mp3",
  "ce85cbaa-0a78-4374-8d2e-8a4aa1fae41c": "./resources/sound/xi_xie_cao_gong_ji.mp3",
  "9e025219-615a-46be-bfdb-b07237e9805e": "./resources/sound/xiao_dao01.mp3",
  "d7a9af53-c9e9-40ed-8efe-13f8191e44e2": "./resources/sound/xiao_dao02.mp3",
  "1a5642f7-d86c-4069-bd3d-1cc6dc9dbdd6": "./resources/sound/xiao_dao03.mp3",
  "c644ab44-e1f2-4db5-b6c5-2d8dca7859b9": "./resources/sound/xiao_dao04.mp3",
  "0b2a09d8-081b-42c8-95c5-214faa5789f4": "./resources/sound/xiao_dao_chu_dao.mp3",
  "8acfa13a-a57f-421f-a95d-211d97ee7f3e": "./resources/sound/xiao_gui_chang_lao_si_wang.mp3",
  "5e46b8f8-c6fe-49f4-8523-003a3fbb7201": "./resources/sound/xiao_gui_chui_jian.mp3",
  "2137eb51-7702-41a3-b3c2-ab98f2a81ac0": "./resources/sound/xiao_gui_gong_ji.mp3",
  "fc667369-8869-4f52-a6c3-e9955b092e74": "./resources/sound/xiao_gui_si_wang.mp3",
  "c18fb841-23a1-4af4-8f1a-64ba916a5725": "./resources/sound/xiao_gui_zhan_li.mp3",
  "5e9f609d-a95f-433b-acc5-d32d36837f98": "./resources/sound/xiao_yin1.mp3",
  "bd39a5c9-0e7d-47c3-b57c-3631fb82dc65": "./resources/sound/xiao_yin2.mp3",
  "afba2962-98f0-4f31-924d-2f93937dfb7c": "./resources/sound/xiao_yin3.mp3",
  "12279e82-9382-42b2-a883-4d4494cf5305": "./resources/sound/xiao_yin4.mp3",
  "faef6d38-dbd9-4b3b-9b77-5f3d435299db": "./resources/sound/zha_lan_kai_qi.mp3",
  "e9420ee6-2c99-4f1a-99f8-4accdc37eb96": "./resources/sound/zhi_sheng_fei_ji.mp3",
  "90dbd414-a83e-4619-a8ab-e5633b0b59b0": "./resources/sound/zhong_dan1.mp3",
  "212fe3f6-8663-4d50-9d8c-682f6e4c20d6": "./resources/sound/zhong_dan2.mp3",
  "7e51dda1-06dd-4fd5-9181-27c3aa6b6be0": "./resources/sound/zhong_xing_qiang_jie1.mp3",
  "75a96c1e-8a17-47c3-b67e-0ae4dd88f5bf": "./resources/sound/zhong_xing_qiang_jie2.mp3",
  "7349f8cb-3f82-47a2-8007-0da7426ffee5": "./resources/sound/zhong_xing_qiang_jie3.mp3",
  "aa662cf7-9fa7-49f2-97e1-15249ccbdc3c": "./resources/sound/zhong_xing_qiang_jie4.mp3",
  "a424fbd2-991a-47cc-8c62-3892f6045a00": "./resources/sound/zhong_xing_qiang_jie5.mp3",
  "5bbbc6aa-c77a-4f8a-a37f-3b3cfc8449c4": "./resources/sound/zhu_jiao_si_wang1.mp3",
  "c9f8e421-20e1-4a76-acef-d0d0732ddcaa": "./resources/sound/zhu_jiao_si_wang2.mp3",
  "c3d01c9f-06f6-487e-8b99-957723041898": "./resources/ui/gameOver_loss.prefab",
  "b74a1d9b-be79-4ad6-bea4-dfdacb389997": "./resources/ui/gameOver_win.prefab",
  "50bb7197-d7d8-4837-9de1-82e2b1dfa773": "./resources/ui/gamePause.prefab",
  "4a1b3fc5-0aec-44a7-8b91-b55e0b8c17f2": "./resources/prefab/bomb/bomb1.prefab",
  "6b129464-2a51-4763-9944-fe99e5971c72": "./resources/prefab/bomb/bomb2.prefab",
  "fb6d40da-2dbc-448e-a5f3-6defca3a36ea": "./resources/prefab/bomb/bomb3.prefab",
  "6fdceaf3-db4c-4eb6-ad92-3c8bec1edccf": "./resources/prefab/bullet/bullet1.prefab",
  "9a4afb81-d4ae-4f99-94ae-2214e513646e": "./resources/prefab/bullet/bullet10.prefab",
  "4481caf5-0fa1-4282-a9b2-95a1c9df9b8f": "./resources/prefab/bullet/bullet2.prefab",
  "10c5b3ef-952e-4497-8710-2080fcac9c16": "./resources/prefab/bullet/bullet3.prefab",
  "c29ee5ce-f9d5-4635-84e8-206eeb97b576": "./resources/prefab/bullet/bullet4.prefab",
  "a8e86f80-c28a-47c9-bb3e-cc114500cb66": "./resources/prefab/bullet/bullet5.prefab",
  "5f8934bd-e457-43bc-b6ce-3c1e1e43272c": "./resources/prefab/bullet/bullet6.prefab",
  "b05cc512-0023-438b-affc-5efb61fa6d67": "./resources/prefab/bullet/bullet7.prefab",
  "c8a124bf-5a70-4b51-8584-2ff1e9090cf1": "./resources/prefab/bullet/bullet8.prefab",
  "924daa2a-c30d-460e-870f-7d167f76f0e1": "./resources/prefab/bullet/bullet9.prefab",
  "b30db9cc-97bb-4978-bfbf-c678f6a4e7f4": "./resources/prefab/eff/fire.prefab",
  "7f96de80-6290-4af2-972f-66a96eff7815": "./resources/prefab/enemy/bl_man.prefab",
  "46d88b77-fd4e-46b9-9c83-5a87b7ed85b5": "./resources/prefab/enemy/bl_woman.prefab",
  "1a12f395-f854-449d-a9b7-84b9af33ff5d": "./resources/prefab/enemy/de_bu.prefab",
  "10617c07-9c0a-4077-9017-5e23cd66e265": "./resources/prefab/enemy/de_jun.prefab",
  "b908855b-451b-4a35-8626-9be644c51c1a": "./resources/prefab/enemy/de_pao.prefab",
  "c39cd3c7-3c5c-4c11-bd5a-c7878a568168": "./resources/prefab/enemy/hanjian.prefab",
  "3bf4636a-ac47-4981-b30c-a8a09b945604": "./resources/prefab/enemy/rb_bu.prefab",
  "e224540e-9273-4521-962d-518e27c94db5": "./resources/prefab/enemy/rb_qi.prefab",
  "735f3df8-c7e1-45ac-b398-4cd945525615": "./resources/prefab/enemy/rb_quan.prefab",
  "79c2a587-a61b-4ef0-93d5-cc2b4bf7699b": "./resources/prefab/enemy/rb_wu.prefab",
  "96251dca-50dd-4c6d-a462-4c3fc223c48b": "./resources/prefab/enemy/rb_zu.prefab",
  "7941fe60-bb88-4551-b05b-705ded65b9aa": "./resources/prefab/ta/factoryBox-en.prefab",
  "ae822c9f-5d0d-4ab1-9b37-555aee7abd8c": "./resources/prefab/ta/factoryBox-my.prefab",
  "58994d51-c7af-4fcb-8186-89e81c5e8973": "./resources/prefab/you/y_bu.prefab",
  "af435d6b-8897-4054-8163-b30288b37dc6": "./resources/spine/bl/bl_man.atlas",
  "d28e0554-cd1e-4a9f-808c-d5e47e6884fc": "./resources/spine/bl/bl_man.json",
  "2aeeee88-9d07-4d71-967e-ca6ff2f9d42a": "./resources/spine/bl/bl_man.png",
  "b8c260e8-1108-434e-a19f-e3d8abf4d08a": "./resources/spine/bl/bl_woman.atlas",
  "ad8bb846-4d36-48fc-b7bb-43e2a9f2000e": "./resources/spine/bl/bl_woman.json",
  "a06a81e2-0c87-44e3-922a-65ed73992dad": "./resources/spine/bl/bl_woman.png",
  "d2b78e13-308b-4ba5-90b1-524f5d4f8d5a": "./resources/spine/de/de_bu.atlas",
  "e76a360a-16cc-41e1-b156-80579989b315": "./resources/spine/de/de_bu.json",
  "b318b1f8-4379-4bca-a42d-08d9a43e5996": "./resources/spine/de/de_bu.png",
  "fb077dee-7461-4727-953e-a7f934db8cd8": "./resources/spine/de/de_bubing.atlas",
  "62ccc97a-0ed0-4912-a063-532c0854a359": "./resources/spine/de/de_bubing.json",
  "d778568d-148b-4e0b-8d21-758705a4e1ac": "./resources/spine/de/de_bubing.png",
  "ee90971f-2c1d-4cb2-9795-5c94c19c6916": "./resources/spine/de/de_jun.atlas",
  "9af5ef60-fc6d-4245-a87d-01f482587470": "./resources/spine/de/de_jun.json",
  "6cba3c31-1ee9-4041-9d93-9a8aa25d3591": "./resources/spine/de/de_jun.png",
  "ee880050-75b2-4203-933d-03579f54a416": "./resources/spine/de/de_pao.atlas",
  "d9609912-b99d-4472-ad90-705944fe5781": "./resources/spine/de/de_pao.json",
  "0ae7f48f-7b94-4a8a-b663-f4daa5a8f24c": "./resources/spine/de/de_pao.png",
  "784aab60-1595-4fe4-8c67-623eca92cd5e": "./resources/spine/hero/hero.atlas",
  "e3f712fe-b9a8-4c6f-b78a-7a1818ca1dc6": "./resources/spine/hero/hero.json",
  "7b3bf0b7-b05f-48fe-b8e0-58088860455a": "./resources/spine/hero/hero.png",
  "3d12b588-94ae-4005-91a8-f8a4823544e8": "./resources/spine/hero/zhujue.atlas",
  "90603e77-1a6a-4075-a5d0-9c262e2992bc": "./resources/spine/hero/zhujue.json",
  "47428093-6708-414b-bd16-9a9709ff7a98": "./resources/spine/hero/zhujue.png",
  "c17e2eca-6072-4af0-9f4e-e8fd089a3d1d": "./resources/spine/rb/hanjian.atlas",
  "b2179323-b8b2-4aea-ba9e-2938db071b72": "./resources/spine/rb/hanjian.json",
  "6213aa0b-5d14-4413-89f7-33f46fcbec44": "./resources/spine/rb/hanjian.png",
  "30f6433a-b584-4f8a-9ed8-b3af0cbe26b5": "./resources/spine/rb/rb_bu.atlas",
  "9bfd3f2e-a7dd-4ce6-b516-294820c72f6b": "./resources/spine/rb/rb_bu.json",
  "8469bf2e-700c-46f6-ba02-29205890033f": "./resources/spine/rb/rb_bu.png",
  "9a0754c7-f627-45a2-8d5b-1e2d24770705": "./resources/spine/rb/rb_qi.atlas",
  "9f341c3c-f148-4e75-9061-a57f89b97535": "./resources/spine/rb/rb_qi.json",
  "181f2173-ea11-4515-86ef-a18b99c7effb": "./resources/spine/rb/rb_qi.png",
  "7e0ddc9c-6538-4924-be43-7ff9a24d8939": "./resources/spine/rb/rb_quan.atlas",
  "c9bef81a-cf66-4835-b27d-c428fe0b9534": "./resources/spine/rb/rb_quan.json",
  "54fb58de-2046-4b43-94e7-f2e94d2bf375": "./resources/spine/rb/rb_quan.png",
  "090f4474-8326-4ee1-9ab3-3b61e3edd720": "./resources/spine/rb/rb_wu.atlas",
  "440b6d6a-696a-436a-b835-e76f93897ba0": "./resources/spine/rb/rb_wu.json",
  "afd47a59-cfd7-4538-a7c2-8c0d835f6103": "./resources/spine/rb/rb_wu.png",
  "27005419-26ee-4d0e-b800-71655458fc98": "./resources/spine/rb/rb_zu.atlas",
  "9fc247b8-f7af-4c76-91c7-798e4980d468": "./resources/spine/rb/rb_zu.json",
  "ba601b5a-a671-4923-86c7-b95bd4bead22": "./resources/spine/rb/rb_zu.png",
  "9b0bb07f-21ee-462f-bd16-27d3e7503a03": "./resources/spine/you/y_bu.atlas",
  "9be7b5e4-2032-4cb3-990e-102e32d4dc47": "./resources/spine/you/y_bu.json",
  "b8a607e2-d40d-406a-abff-33fe820c3522": "./resources/spine/you/y_bu.png",
  "f63c0b96-6717-4c63-bbd4-a87efcfeafa2": "./resources/spine/you/y_motuo.atlas",
  "94d5569c-5c26-48f2-9ab8-837feb93972e": "./resources/spine/you/y_motuo.json",
  "f91294bd-8ac0-4d46-bae6-1bf7b3440453": "./resources/spine/you/y_motuo.png",
  "17d00811-a977-43e5-b274-aa5fe9c34fa2": "./resources/spine/you/y_pao.atlas",
  "0a2dd1d7-fcef-455a-9058-867c7aeecdf8": "./resources/spine/you/y_pao.json",
  "9b2d9fda-3564-4310-88f5-369c25356f8e": "./resources/spine/you/y_pao.png",
  "beb80f1b-7edd-4cbc-b80e-dcf3a9387b88": "./resources/spine/you/y_qi.atlas",
  "74242578-1c17-48d2-9751-6352836deaea": "./resources/spine/you/y_qi.json",
  "5cd22f2d-1bc4-4194-be95-a5cf80543187": "./resources/spine/you/y_qi.png",
  "d6a74371-7ebf-4940-8a5c-6d28e20469d5": "./resources/spine/you/y_tan.atlas",
  "c3d3ee02-2adb-4f93-927a-bfa2b6f31f6d": "./resources/spine/you/y_tan.json",
  "8196b422-d426-40e3-86b5-af8093f95558": "./resources/spine/you/y_tan.png",
  "ba6c7efe-15de-49c4-adb6-daf8c1ceabc5": "./resources/texture/effects/dissolve.effect",
  "4cd24669-e56c-45c7-bd29-b7f868a4666f": "./resources/texture/materials/dissolve.mtl"
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youHp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0ca96ino9tMzrYQSA80vf/L', 'youHp');
// Script/you/youHp.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdUhwLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25EZXN0cm95Iiwib25Mb2FkIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaEJRLEdBRlA7QUFvQkxDLEVBQUFBLFNBcEJLLHVCQW9CTyxDQUNYLENBckJJO0FBc0JMQyxFQUFBQSxNQXRCSyxvQkFzQkksQ0FDUixDQXZCSTtBQXdCTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLEVBQUFBLEtBaENLLG1CQWdDRyxDQUNQLENBakNJLENBa0NMOztBQWxDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgLy8gZm9vOiB7XHJcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XHJcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxyXG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICAgIC8vICAgICB0b29sdGlwOiBcIuaPj+i/sHRpcHNcIlxyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gYmFyOiB7XHJcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xyXG4gICAgICAgIC8vICAgICB9LFxyXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH0sXHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuICAgIC8v5b2T6K+l57uE5Lu26KKr5ZCv55So77yM5bm25LiU5a6D55qE6IqC54K55Lmf5r+A5rS75pe244CCXHJcbiAgICAvLyBvbkVuYWJsZSgpIHtcclxuICAgIC8vIH0sXHJcbiAgICAvLyAvL+W9k+ivpee7hOS7tuiiq+emgeeUqOaIluiKgueCueWPmOS4uuaXoOaViOaXtuiwg+eUqOOAglxyXG4gICAgLy8gb25EaXNhYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8v6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CCXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet4.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8e80432QD5C6qnZlH4oU+gy', 'bullet4');
// Script/bullet/bullet4.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 500,
    fire: cc.Animation,
    addSpeedY: 100,
    range: 2000
  },
  onLoad: function onLoad() {
    this._lastPos = cc.v2(0, 0);
    this._curPos = cc.v2(0, 0);
  },
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie4, false);
    this.data = data;
    game.emit("shootFire", {
      aniName: "eff2",
      v: data.v,
      angle: data.angle
    }); //开火动画

    this.init(data);
  },
  init: function init(data) {
    this.idx = 0;
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    this.curRange = this.range; //火焰动画

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, "fire1");
      var fireClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 30);
      fireClip.name = 'fire';
      fireClip.wrapMode = cc.WrapMode.Loop;
      this.fire.addClip(fireClip);
      this.fire.play('fire');
    }

    this.state = "move";
    this.node.active = true;
  },
  start: function start() {},
  onDestroy: function onDestroy() {},
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    this.data = _.assign(this.data, {
      aniName: "bomb1",
      //预制体名称
      v: cc.v2(this.node.x, this.node.y),
      //位置
      angle: 0,
      //角度
      group: this.node.group //组

    });
    game.emit("bomb1", this.data); //爆炸

    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    } // let hd = this.node.angle * Math.PI / 180;
    // this.speedX = Math.cos(hd) * this.speed;
    // this.speedY = Math.sin(hd) * this.speed;
    //


    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    }

    this._lastPos.x = this.node.x;
    this._lastPos.y = this.node.y; // let curPos = cc.v2(this.node.x, this.node.y);

    this.speedY -= 9.8;
    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt;
    this._curPos.x = this.node.x;
    this._curPos.y = this.node.y; //let pos = cc.v2(this.node.x, this.node.y);

    var rotation = game.gameUtils.getRotation(this._lastPos, this._curPos);
    this.node.angle = rotation;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/blow/bomb1.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3c9f5FhmlNNe7ZF5Dgt7tjs', 'bomb1');
// Script/blow/bomb1.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.dao_dan_bao_zha, false);
    this.init(data);
  },
  init: function init(data) {
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    this.node.x = data.v.x;
    this.node.y = data.v.y; //结束动画

    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bomb_atlas, data.aniName);
      var flashClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      flashClip.name = 'end';
      flashClip.wrapMode = cc.WrapMode.Normal;
      animation.addClip(flashClip);
      animation.play('end');
    } else {
      animation.playAdditive('end', 0);
    }

    animation.once("finished", function () {
      var pool = this.node.pool;

      if (pool) {
        pool.put(this.node);
      } else {
        this.node.removeFromParent(true);
        this.node.destroy();
      }
    }.bind(this));
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxibG93XFxib21iMS5qcyJdLCJuYW1lcyI6WyJQb29sQ29tcG9uZW50IiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwidW51c2UiLCJyZXVzZSIsImRhdGEiLCJnYW1lIiwic291bmRNYW5hZ2VyIiwicGxheUVmZmVjdCIsImdhbWVTb3VuZCIsImRhb19kYW5fYmFvX3poYSIsImluaXQiLCJncm91cCIsIm5vZGUiLCJhbmdsZSIsIngiLCJ2IiwieSIsImFuaW1hdGlvbiIsImdldENvbXBvbmVudCIsIkFuaW1hdGlvbiIsIl9pc2luaXQiLCJzcHJpdGVGcmFtZXMiLCJnYW1lVXRpbHMiLCJnZXRTcHJpdGVGcmFtZXMiLCJib21iX2F0bGFzIiwiYW5pTmFtZSIsImZsYXNoQ2xpcCIsIkFuaW1hdGlvbkNsaXAiLCJjcmVhdGVXaXRoU3ByaXRlRnJhbWVzIiwibmFtZSIsIndyYXBNb2RlIiwiV3JhcE1vZGUiLCJOb3JtYWwiLCJhZGRDbGlwIiwicGxheSIsInBsYXlBZGRpdGl2ZSIsIm9uY2UiLCJwb29sIiwicHV0IiwicmVtb3ZlRnJvbVBhcmVudCIsImRlc3Ryb3kiLCJiaW5kIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsTUFISyxvQkFHSSxDQUNSLENBSkk7QUFLTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVksQ0FDbEIsQ0FQSTtBQVFMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CQyxJQUFBQSxJQUFJLENBQUNDLFlBQUwsQ0FBa0JDLFVBQWxCLENBQTZCRixJQUFJLENBQUNHLFNBQUwsQ0FBZUMsZUFBNUMsRUFBNEQsS0FBNUQ7QUFDQSxTQUFLQyxJQUFMLENBQVVOLElBQVY7QUFDSCxHQVpJO0FBYUxNLEVBQUFBLElBYkssZ0JBYUFOLElBYkEsRUFhTTtBQUNQLFFBQUlBLElBQUksQ0FBQ08sS0FBVCxFQUFnQixLQUFLQyxJQUFMLENBQVVELEtBQVYsR0FBa0JQLElBQUksQ0FBQ08sS0FBdkI7QUFDaEIsU0FBS0MsSUFBTCxDQUFVQyxLQUFWLEdBQWtCVCxJQUFJLENBQUNTLEtBQXZCO0FBQ0EsU0FBS0QsSUFBTCxDQUFVRSxDQUFWLEdBQWNWLElBQUksQ0FBQ1csQ0FBTCxDQUFPRCxDQUFyQjtBQUNBLFNBQUtGLElBQUwsQ0FBVUksQ0FBVixHQUFjWixJQUFJLENBQUNXLENBQUwsQ0FBT0MsQ0FBckIsQ0FKTyxDQUtQOztBQUNBLFFBQUlDLFNBQVMsR0FBRyxLQUFLTCxJQUFMLENBQVVNLFlBQVYsQ0FBdUJwQixFQUFFLENBQUNxQixTQUExQixDQUFoQixDQU5PLENBTThDOztBQUNyRCxRQUFJLENBQUMsS0FBS0MsT0FBVixFQUFtQjtBQUNmLFVBQUlDLFlBQVksR0FBR2hCLElBQUksQ0FBQ2lCLFNBQUwsQ0FBZUMsZUFBZixDQUErQmxCLElBQUksQ0FBQ21CLFVBQXBDLEVBQWdEcEIsSUFBSSxDQUFDcUIsT0FBckQsQ0FBbkI7QUFDQSxVQUFJQyxTQUFTLEdBQUc1QixFQUFFLENBQUM2QixhQUFILENBQWlCQyxzQkFBakIsQ0FBd0NQLFlBQXhDLEVBQXNELEVBQXRELENBQWhCO0FBQ0FLLE1BQUFBLFNBQVMsQ0FBQ0csSUFBVixHQUFpQixLQUFqQjtBQUNBSCxNQUFBQSxTQUFTLENBQUNJLFFBQVYsR0FBcUJoQyxFQUFFLENBQUNpQyxRQUFILENBQVlDLE1BQWpDO0FBQ0FmLE1BQUFBLFNBQVMsQ0FBQ2dCLE9BQVYsQ0FBa0JQLFNBQWxCO0FBQ0FULE1BQUFBLFNBQVMsQ0FBQ2lCLElBQVYsQ0FBZSxLQUFmO0FBQ0gsS0FQRCxNQVFLO0FBQ0RqQixNQUFBQSxTQUFTLENBQUNrQixZQUFWLENBQXVCLEtBQXZCLEVBQThCLENBQTlCO0FBQ0g7O0FBQ0RsQixJQUFBQSxTQUFTLENBQUNtQixJQUFWLENBQWUsVUFBZixFQUEyQixZQUFZO0FBQ25DLFVBQUlDLElBQUksR0FBRyxLQUFLekIsSUFBTCxDQUFVeUIsSUFBckI7O0FBQ0EsVUFBSUEsSUFBSixFQUFVO0FBQ05BLFFBQUFBLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUsxQixJQUFkO0FBQ0gsT0FGRCxNQUdLO0FBQ0QsYUFBS0EsSUFBTCxDQUFVMkIsZ0JBQVYsQ0FBMkIsSUFBM0I7QUFDQSxhQUFLM0IsSUFBTCxDQUFVNEIsT0FBVjtBQUNIO0FBQ0osS0FUMEIsQ0FTekJDLElBVHlCLENBU3BCLElBVG9CLENBQTNCO0FBVUgsR0F6Q0k7QUEwQ0xDLEVBQUFBLEtBMUNLLG1CQTBDRyxDQUNQLENBM0NJO0FBNENMQyxFQUFBQSxTQTVDSyx1QkE0Q08sQ0FDWCxDQTdDSSxDQThDTDs7QUE5Q0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFBvb2xDb21wb25lbnQgPSByZXF1aXJlKFwiUG9vbENvbXBvbmVudFwiKTsgLy/msaDlrZDnu4Tku7ZcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogUG9vbENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8v5Zue5pS2XHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIC8v6YeN55SoXHJcbiAgICByZXVzZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBnYW1lLnNvdW5kTWFuYWdlci5wbGF5RWZmZWN0KGdhbWUuZ2FtZVNvdW5kLmRhb19kYW5fYmFvX3poYSxmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbml0KGRhdGEpO1xyXG4gICAgfSxcclxuICAgIGluaXQoZGF0YSkge1xyXG4gICAgICAgIGlmIChkYXRhLmdyb3VwKSB0aGlzLm5vZGUuZ3JvdXAgPSBkYXRhLmdyb3VwO1xyXG4gICAgICAgIHRoaXMubm9kZS5hbmdsZSA9IGRhdGEuYW5nbGU7XHJcbiAgICAgICAgdGhpcy5ub2RlLnggPSBkYXRhLnYueDtcclxuICAgICAgICB0aGlzLm5vZGUueSA9IGRhdGEudi55O1xyXG4gICAgICAgIC8v57uT5p2f5Yqo55S7XHJcbiAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTsvL+WKqOeUu+e7hOS7tlxyXG4gICAgICAgIGlmICghdGhpcy5faXNpbml0KSB7XHJcbiAgICAgICAgICAgIGxldCBzcHJpdGVGcmFtZXMgPSBnYW1lLmdhbWVVdGlscy5nZXRTcHJpdGVGcmFtZXMoZ2FtZS5ib21iX2F0bGFzLCBkYXRhLmFuaU5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgZmxhc2hDbGlwID0gY2MuQW5pbWF0aW9uQ2xpcC5jcmVhdGVXaXRoU3ByaXRlRnJhbWVzKHNwcml0ZUZyYW1lcywgMjApO1xyXG4gICAgICAgICAgICBmbGFzaENsaXAubmFtZSA9ICdlbmQnO1xyXG4gICAgICAgICAgICBmbGFzaENsaXAud3JhcE1vZGUgPSBjYy5XcmFwTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5hZGRDbGlwKGZsYXNoQ2xpcCk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5KCdlbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5QWRkaXRpdmUoJ2VuZCcsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbmltYXRpb24ub25jZShcImZpbmlzaGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHBvb2wgPSB0aGlzLm5vZGUucG9vbDtcclxuICAgICAgICAgICAgaWYgKHBvb2wpIHtcclxuICAgICAgICAgICAgICAgIHBvb2wucHV0KHRoaXMubm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LmJpbmQodGhpcykpXHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet1.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8ef45j/DSNLpJMtSjU0fAD2', 'bullet1');
// Script/bullet/bullet1.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 1000,
    range: 1000
  },
  onLoad: function onLoad() {},
  start: function start() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie2, false);
    this.state = "ready";
    this.idx = 0;
    this.curRange = this.range;
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isInit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.prefabName);
      var readyClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      readyClip.name = 'move';
      readyClip.wrapMode = cc.WrapMode.Loop;
      animation.addClip(readyClip);
      animation.play("move");
      this._isInit = true;
    } else {
      animation.playAdditive('move', 0);
    }

    this.state = "move";
    this.init(data);
  },
  init: function init(data) {
    game.emit("shootFire", {
      aniName: "eff1",
      v: data.v,
      angle: data.angle
    }); //开火动画
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    var curPos = cc.v2(this.node.x, this.node.y);
    var angle = this.node.angle;
    game.emit("shootFire", {
      aniName: "eff2",
      v: curPos,
      angle: angle
    }); //开火动画
    // game.emit("shootFire", "eff1", "eff2", curPos, angle);//开火动画

    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }
  },
  onDestroy: function onDestroy() {},
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    }

    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    }

    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet7.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c7335ZUP/9NDavQNCbw8oIQ', 'bullet7');
// Script/bullet/bullet7.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 1000,
    range: 1000
  },
  onLoad: function onLoad() {},
  start: function start() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie3, false);
    this.init(data);
  },
  init: function init(data) {
    this.state = "ready";
    this.idx = 0;
    this.curRange = this.range; //game.emit("shootFire", "fire", "eff1", v, angle);//开火动画

    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isInit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.prefabName);
      var readyClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      readyClip.name = 'move';
      readyClip.wrapMode = cc.WrapMode.Loop;
      animation.addClip(readyClip);
      animation.play("move");
      this._isInit = true;
    } else {
      animation.playAdditive('move', 0);
    }

    this.state = "move";
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }

    var curPos = cc.v2(this.node.x, this.node.y);
    var angle = this.node.angle; // game.emit("shootFire", "fire", "eff2", curPos, angle);//开火动画

    game.emit("shootFire", {
      aniName: "eff2",
      v: curPos,
      angle: angle
    }); //开火动画
  },
  onDestroy: function onDestroy() {},
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    }

    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    }

    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxidWxsZXRcXGJ1bGxldDcuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInNwZWVkIiwicmFuZ2UiLCJvbkxvYWQiLCJzdGFydCIsInVudXNlIiwicmV1c2UiLCJkYXRhIiwiZ2FtZSIsInNvdW5kTWFuYWdlciIsInBsYXlFZmZlY3QiLCJnYW1lU291bmQiLCJxaW5nX3hpbmdfcWlhbmdfamllMyIsImluaXQiLCJzdGF0ZSIsImlkeCIsImN1clJhbmdlIiwiZ3JvdXAiLCJub2RlIiwiYW5nbGUiLCJoZCIsIk1hdGgiLCJQSSIsInNwZWVkWCIsImNvcyIsIndpZHRoIiwic3BlZWRZIiwic2luIiwieCIsInYiLCJ5IiwiYW5pbWF0aW9uIiwiZ2V0Q29tcG9uZW50IiwiQW5pbWF0aW9uIiwiX2lzSW5pdCIsInNwcml0ZUZyYW1lcyIsImdhbWVVdGlscyIsImdldFNwcml0ZUZyYW1lcyIsImJ1bGxldF9hdGxhcyIsInByZWZhYk5hbWUiLCJyZWFkeUNsaXAiLCJBbmltYXRpb25DbGlwIiwiY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyIsIm5hbWUiLCJ3cmFwTW9kZSIsIldyYXBNb2RlIiwiTG9vcCIsImFkZENsaXAiLCJwbGF5IiwicGxheUFkZGl0aXZlIiwiZW5kIiwicG9vbCIsInB1dCIsInJlbW92ZUZyb21QYXJlbnQiLCJkZXN0cm95IiwiY3VyUG9zIiwidjIiLCJlbWl0IiwiYW5pTmFtZSIsIm9uRGVzdHJveSIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvdGhlciIsInNlbGYiLCJ1cGRhdGUiLCJkdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTNCLEVBQThDOzs7QUFDOUNDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsYUFESjtBQUVMSSxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsS0FBSyxFQUFFLElBREM7QUFFUkMsSUFBQUEsS0FBSyxFQUFFO0FBRkMsR0FGUDtBQU1MQyxFQUFBQSxNQU5LLG9CQU1JLENBQ1IsQ0FQSTtBQVFMQyxFQUFBQSxLQVJLLG1CQVFHLENBQ1AsQ0FUSTtBQVVMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQVpJO0FBYUw7QUFDQUMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0I7QUFDbkJDLElBQUFBLElBQUksQ0FBQ0MsWUFBTCxDQUFrQkMsVUFBbEIsQ0FBNkJGLElBQUksQ0FBQ0csU0FBTCxDQUFlQyxvQkFBNUMsRUFBaUUsS0FBakU7QUFDQSxTQUFLQyxJQUFMLENBQVVOLElBQVY7QUFDSCxHQWpCSTtBQWtCTE0sRUFBQUEsSUFsQkssZ0JBa0JBTixJQWxCQSxFQWtCTTtBQUNQLFNBQUtPLEtBQUwsR0FBYSxPQUFiO0FBQ0EsU0FBS0MsR0FBTCxHQUFXLENBQVg7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLEtBQUtkLEtBQXJCLENBSE8sQ0FJUDs7QUFDQSxRQUFJSyxJQUFJLENBQUNVLEtBQVQsRUFBZ0IsS0FBS0MsSUFBTCxDQUFVRCxLQUFWLEdBQWtCVixJQUFJLENBQUNVLEtBQXZCO0FBQ2hCLFNBQUtDLElBQUwsQ0FBVUMsS0FBVixHQUFrQlosSUFBSSxDQUFDWSxLQUF2QjtBQUdBLFFBQUlDLEVBQUUsR0FBRyxLQUFLRixJQUFMLENBQVVDLEtBQVYsR0FBa0JFLElBQUksQ0FBQ0MsRUFBdkIsR0FBNEIsR0FBckM7QUFDQSxTQUFLQyxNQUFMLEdBQWNGLElBQUksQ0FBQ0csR0FBTCxDQUFTSixFQUFULElBQWUsS0FBS0YsSUFBTCxDQUFVTyxLQUF6QixHQUFpQyxDQUEvQztBQUNBLFNBQUtDLE1BQUwsR0FBY0wsSUFBSSxDQUFDTSxHQUFMLENBQVNQLEVBQVQsSUFBZSxLQUFLRixJQUFMLENBQVVPLEtBQXpCLEdBQWlDLENBQS9DO0FBQ0EsU0FBS1AsSUFBTCxDQUFVVSxDQUFWLEdBQWNyQixJQUFJLENBQUNzQixDQUFMLENBQU9ELENBQVAsR0FBVyxLQUFLTCxNQUE5QjtBQUNBLFNBQUtMLElBQUwsQ0FBVVksQ0FBVixHQUFjdkIsSUFBSSxDQUFDc0IsQ0FBTCxDQUFPQyxDQUFQLEdBQVcsS0FBS0osTUFBOUI7QUFDQSxTQUFLSCxNQUFMLEdBQWNGLElBQUksQ0FBQ0csR0FBTCxDQUFTSixFQUFULElBQWUsS0FBS25CLEtBQWxDO0FBQ0EsU0FBS3lCLE1BQUwsR0FBY0wsSUFBSSxDQUFDTSxHQUFMLENBQVNQLEVBQVQsSUFBZSxLQUFLbkIsS0FBbEM7QUFDQSxRQUFJOEIsU0FBUyxHQUFHLEtBQUtiLElBQUwsQ0FBVWMsWUFBVixDQUF1QmxDLEVBQUUsQ0FBQ21DLFNBQTFCLENBQWhCLENBaEJPLENBZ0I4Qzs7QUFDckQsUUFBSSxDQUFDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZixVQUFJQyxZQUFZLEdBQUczQixJQUFJLENBQUM0QixTQUFMLENBQWVDLGVBQWYsQ0FBK0I3QixJQUFJLENBQUM4QixZQUFwQyxFQUFrRC9CLElBQUksQ0FBQ2dDLFVBQXZELENBQW5CO0FBQ0EsVUFBSUMsU0FBUyxHQUFHMUMsRUFBRSxDQUFDMkMsYUFBSCxDQUFpQkMsc0JBQWpCLENBQXdDUCxZQUF4QyxFQUFzRCxFQUF0RCxDQUFoQjtBQUNBSyxNQUFBQSxTQUFTLENBQUNHLElBQVYsR0FBaUIsTUFBakI7QUFDQUgsTUFBQUEsU0FBUyxDQUFDSSxRQUFWLEdBQXFCOUMsRUFBRSxDQUFDK0MsUUFBSCxDQUFZQyxJQUFqQztBQUNBZixNQUFBQSxTQUFTLENBQUNnQixPQUFWLENBQWtCUCxTQUFsQjtBQUNBVCxNQUFBQSxTQUFTLENBQUNpQixJQUFWLENBQWUsTUFBZjtBQUNBLFdBQUtkLE9BQUwsR0FBZSxJQUFmO0FBQ0gsS0FSRCxNQVNLO0FBQ0RILE1BQUFBLFNBQVMsQ0FBQ2tCLFlBQVYsQ0FBdUIsTUFBdkIsRUFBK0IsQ0FBL0I7QUFDSDs7QUFDRCxTQUFLbkMsS0FBTCxHQUFhLE1BQWI7QUFDSCxHQWhESTtBQWlETG9DLEVBQUFBLEdBakRLLGlCQWlEQztBQUNGLFFBQUksS0FBS3BDLEtBQUwsSUFBYyxLQUFsQixFQUF5QjtBQUN6QixTQUFLQSxLQUFMLEdBQWEsS0FBYjtBQUNBLFFBQUlxQyxJQUFJLEdBQUcsS0FBS2pDLElBQUwsQ0FBVWlDLElBQXJCOztBQUNBLFFBQUlBLElBQUosRUFBVTtBQUNOQSxNQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxLQUFLbEMsSUFBZDtBQUNILEtBRkQsTUFHSztBQUNELFdBQUtBLElBQUwsQ0FBVW1DLGdCQUFWLENBQTJCLElBQTNCO0FBQ0EsV0FBS25DLElBQUwsQ0FBVW9DLE9BQVY7QUFDSDs7QUFDRCxRQUFJQyxNQUFNLEdBQUd6RCxFQUFFLENBQUMwRCxFQUFILENBQU0sS0FBS3RDLElBQUwsQ0FBVVUsQ0FBaEIsRUFBbUIsS0FBS1YsSUFBTCxDQUFVWSxDQUE3QixDQUFiO0FBQ0EsUUFBSVgsS0FBSyxHQUFHLEtBQUtELElBQUwsQ0FBVUMsS0FBdEIsQ0FaRSxDQWFIOztBQUNDWCxJQUFBQSxJQUFJLENBQUNpRCxJQUFMLENBQVUsV0FBVixFQUF1QjtBQUFDQyxNQUFBQSxPQUFPLEVBQUUsTUFBVjtBQUFpQjdCLE1BQUFBLENBQUMsRUFBRTBCLE1BQXBCO0FBQTRCcEMsTUFBQUEsS0FBSyxFQUFFQTtBQUFuQyxLQUF2QixFQWRFLENBY2dFO0FBQ3JFLEdBaEVJO0FBaUVMd0MsRUFBQUEsU0FqRUssdUJBaUVPLENBQ1gsQ0FsRUk7QUFtRUxDLEVBQUFBLGdCQUFnQixFQUFFLDBCQUFVQyxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUNyQyxTQUFLWixHQUFMO0FBQ0gsR0FyRUk7QUFzRUxhLEVBQUFBLE1BdEVLLGtCQXNFRUMsRUF0RUYsRUFzRU07QUFDUCxRQUFJLEtBQUtsRCxLQUFMLElBQWMsTUFBbEIsRUFBMEI7QUFDdEI7QUFDSDs7QUFDRCxTQUFLQyxHQUFMO0FBQ0EsU0FBS0MsUUFBTCxJQUFpQixLQUFLZixLQUFMLEdBQWErRCxFQUE5Qjs7QUFDQSxRQUFJLEtBQUtoRCxRQUFMLElBQWlCLENBQXJCLEVBQXdCO0FBQ3BCLFdBQUtrQyxHQUFMO0FBQ0E7QUFDSDs7QUFDRCxTQUFLaEMsSUFBTCxDQUFVVSxDQUFWLElBQWUsS0FBS0wsTUFBTCxHQUFjeUMsRUFBN0I7QUFDQSxTQUFLOUMsSUFBTCxDQUFVWSxDQUFWLElBQWUsS0FBS0osTUFBTCxHQUFjc0MsRUFBN0I7QUFDSDtBQWxGSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHNwZWVkOiAxMDAwLFxyXG4gICAgICAgIHJhbmdlOiAxMDAwXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8v5Zue5pS2XHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIC8v6YeN55SoXHJcbiAgICByZXVzZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBnYW1lLnNvdW5kTWFuYWdlci5wbGF5RWZmZWN0KGdhbWUuZ2FtZVNvdW5kLnFpbmdfeGluZ19xaWFuZ19qaWUzLGZhbHNlKTtcclxuICAgICAgICB0aGlzLmluaXQoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaW5pdChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFwicmVhZHlcIjtcclxuICAgICAgICB0aGlzLmlkeCA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJSYW5nZSA9IHRoaXMucmFuZ2U7XHJcbiAgICAgICAgLy9nYW1lLmVtaXQoXCJzaG9vdEZpcmVcIiwgXCJmaXJlXCIsIFwiZWZmMVwiLCB2LCBhbmdsZSk7Ly/lvIDngavliqjnlLtcclxuICAgICAgICBpZiAoZGF0YS5ncm91cCkgdGhpcy5ub2RlLmdyb3VwID0gZGF0YS5ncm91cDtcclxuICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSBkYXRhLmFuZ2xlO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IGhkID0gdGhpcy5ub2RlLmFuZ2xlICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICB0aGlzLnNwZWVkWCA9IE1hdGguY29zKGhkKSAqIHRoaXMubm9kZS53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy5zcGVlZFkgPSBNYXRoLnNpbihoZCkgKiB0aGlzLm5vZGUud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMubm9kZS54ID0gZGF0YS52LnggKyB0aGlzLnNwZWVkWDtcclxuICAgICAgICB0aGlzLm5vZGUueSA9IGRhdGEudi55ICsgdGhpcy5zcGVlZFk7XHJcbiAgICAgICAgdGhpcy5zcGVlZFggPSBNYXRoLmNvcyhoZCkgKiB0aGlzLnNwZWVkO1xyXG4gICAgICAgIHRoaXMuc3BlZWRZID0gTWF0aC5zaW4oaGQpICogdGhpcy5zcGVlZDtcclxuICAgICAgICBsZXQgYW5pbWF0aW9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pOy8v5Yqo55S757uE5Lu2XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0luaXQpIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZUZyYW1lcyA9IGdhbWUuZ2FtZVV0aWxzLmdldFNwcml0ZUZyYW1lcyhnYW1lLmJ1bGxldF9hdGxhcywgZGF0YS5wcmVmYWJOYW1lKTtcclxuICAgICAgICAgICAgbGV0IHJlYWR5Q2xpcCA9IGNjLkFuaW1hdGlvbkNsaXAuY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyhzcHJpdGVGcmFtZXMsIDIwKTtcclxuICAgICAgICAgICAgcmVhZHlDbGlwLm5hbWUgPSAnbW92ZSc7XHJcbiAgICAgICAgICAgIHJlYWR5Q2xpcC53cmFwTW9kZSA9IGNjLldyYXBNb2RlLkxvb3A7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5hZGRDbGlwKHJlYWR5Q2xpcCk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5KFwibW92ZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5faXNJbml0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5QWRkaXRpdmUoJ21vdmUnLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFwibW92ZVwiO1xyXG4gICAgfSxcclxuICAgIGVuZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSBcImVuZFwiKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFwiZW5kXCI7XHJcbiAgICAgICAgdmFyIHBvb2wgPSB0aGlzLm5vZGUucG9vbDtcclxuICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICBwb29sLnB1dCh0aGlzLm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUZyb21QYXJlbnQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJQb3MgPSBjYy52Mih0aGlzLm5vZGUueCwgdGhpcy5ub2RlLnkpO1xyXG4gICAgICAgIHZhciBhbmdsZSA9IHRoaXMubm9kZS5hbmdsZTtcclxuICAgICAgIC8vIGdhbWUuZW1pdChcInNob290RmlyZVwiLCBcImZpcmVcIiwgXCJlZmYyXCIsIGN1clBvcywgYW5nbGUpOy8v5byA54Gr5Yqo55S7XHJcbiAgICAgICAgZ2FtZS5lbWl0KFwic2hvb3RGaXJlXCIsIHthbmlOYW1lOiBcImVmZjJcIix2OiBjdXJQb3MsIGFuZ2xlOiBhbmdsZX0pOy8v5byA54Gr5Yqo55S7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uQ29sbGlzaW9uRW50ZXI6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIHRoaXMuZW5kKCk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlKGR0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT0gXCJtb3ZlXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlkeCsrO1xyXG4gICAgICAgIHRoaXMuY3VyUmFuZ2UgLT0gdGhpcy5zcGVlZCAqIGR0O1xyXG4gICAgICAgIGlmICh0aGlzLmN1clJhbmdlIDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5lbmQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vZGUueCArPSB0aGlzLnNwZWVkWCAqIGR0O1xyXG4gICAgICAgIHRoaXMubm9kZS55ICs9IHRoaXMuc3BlZWRZICogZHQ7XHJcbiAgICB9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/config/zhujueConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd0980ErXYNDFrIP0KHlhGQJ', 'zhujueConfig');
// Script/config/zhujueConfig.js

"use strict";

module.exports = {
  hp: 2500,
  //初始血量
  "1": {
    name: "weapons1",
    //武器皮肤名称
    rotation: 20,
    sendTime: 0.3,
    //子弹发射时间
    attackId: 1,
    //攻击动作id
    attack: 13,
    //攻击力
    bid: 1,
    aimY: 0
  },
  //手枪
  "2": {
    name: "weapons2",
    rotation: 22,
    sendTime: 0.6,
    attackId: 2,
    attack: 20,
    bid: 1,
    aimY: 0
  },
  //来福枪
  "3": {
    name: "weapons3",
    rotation: 25,
    sendTime: 0.6,
    attackId: 2,
    attack: 28,
    //
    bid: 1,
    aimY: -50
  },
  //闪电枪
  "4": {
    name: "weapons4",
    rotation: 25,
    sendTime: 0.6,
    //子弹发射时间
    attackId: 2,
    //攻击动作id
    attack: 37,
    //攻击力
    bid: 1,
    //子弹id
    aimY: 0
  } //火箭筒

};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb25maWdcXHpodWp1ZUNvbmZpZy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaHAiLCJuYW1lIiwicm90YXRpb24iLCJzZW5kVGltZSIsImF0dGFja0lkIiwiYXR0YWNrIiwiYmlkIiwiYWltWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLEVBQUUsRUFBRSxJQURTO0FBQ0g7QUFDVixPQUFLO0FBQ0RDLElBQUFBLElBQUksRUFBRSxVQURMO0FBQ2lCO0FBQ2xCQyxJQUFBQSxRQUFRLEVBQUUsRUFGVDtBQUdEQyxJQUFBQSxRQUFRLEVBQUUsR0FIVDtBQUdhO0FBQ2RDLElBQUFBLFFBQVEsRUFBRSxDQUpUO0FBSVc7QUFDWkMsSUFBQUEsTUFBTSxFQUFFLEVBTFA7QUFLVTtBQUNYQyxJQUFBQSxHQUFHLEVBQUUsQ0FOSjtBQU9EQyxJQUFBQSxJQUFJLEVBQUU7QUFQTCxHQUZRO0FBVVg7QUFDRixPQUFLO0FBQ0ROLElBQUFBLElBQUksRUFBRSxVQURMO0FBRURDLElBQUFBLFFBQVEsRUFBRSxFQUZUO0FBR0RDLElBQUFBLFFBQVEsRUFBRSxHQUhUO0FBSURDLElBQUFBLFFBQVEsRUFBRSxDQUpUO0FBS0RDLElBQUFBLE1BQU0sRUFBRSxFQUxQO0FBTURDLElBQUFBLEdBQUcsRUFBRSxDQU5KO0FBT0RDLElBQUFBLElBQUksRUFBRTtBQVBMLEdBWFE7QUFtQlg7QUFDRixPQUFLO0FBQ0ROLElBQUFBLElBQUksRUFBRSxVQURMO0FBRURDLElBQUFBLFFBQVEsRUFBRSxFQUZUO0FBR0RDLElBQUFBLFFBQVEsRUFBRSxHQUhUO0FBSURDLElBQUFBLFFBQVEsRUFBRSxDQUpUO0FBS0RDLElBQUFBLE1BQU0sRUFBRSxFQUxQO0FBS1c7QUFDWkMsSUFBQUEsR0FBRyxFQUFFLENBTko7QUFPREMsSUFBQUEsSUFBSSxFQUFFLENBQUM7QUFQTixHQXBCUTtBQTRCWDtBQUNGLE9BQUs7QUFDRE4sSUFBQUEsSUFBSSxFQUFFLFVBREw7QUFFREMsSUFBQUEsUUFBUSxFQUFFLEVBRlQ7QUFHREMsSUFBQUEsUUFBUSxFQUFFLEdBSFQ7QUFHYztBQUNmQyxJQUFBQSxRQUFRLEVBQUUsQ0FKVDtBQUljO0FBQ2ZDLElBQUFBLE1BQU0sRUFBRSxFQUxQO0FBS1k7QUFDYkMsSUFBQUEsR0FBRyxFQUFFLENBTko7QUFNYTtBQUNkQyxJQUFBQSxJQUFJLEVBQUU7QUFQTCxHQTdCUSxDQXFDWjs7QUFyQ1ksQ0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaHA6IDI1MDAsIC8v5Yid5aeL6KGA6YePXHJcbiAgICBcIjFcIjoge1xyXG4gICAgICAgIG5hbWU6IFwid2VhcG9uczFcIiwgLy/mrablmajnmq7ogqTlkI3np7BcclxuICAgICAgICByb3RhdGlvbjogMjAsXHJcbiAgICAgICAgc2VuZFRpbWU6IDAuMywvL+WtkOW8ueWPkeWwhOaXtumXtFxyXG4gICAgICAgIGF0dGFja0lkOiAxLC8v5pS75Ye75Yqo5L2caWRcclxuICAgICAgICBhdHRhY2s6IDEzLC8v5pS75Ye75YqbXHJcbiAgICAgICAgYmlkOiAxLFxyXG4gICAgICAgIGFpbVk6IDBcclxuICAgIH0sLy/miYvmnqpcclxuICAgIFwiMlwiOiB7XHJcbiAgICAgICAgbmFtZTogXCJ3ZWFwb25zMlwiLFxyXG4gICAgICAgIHJvdGF0aW9uOiAyMixcclxuICAgICAgICBzZW5kVGltZTogMC42LFxyXG4gICAgICAgIGF0dGFja0lkOiAyLFxyXG4gICAgICAgIGF0dGFjazogMjAsXHJcbiAgICAgICAgYmlkOiAxLFxyXG4gICAgICAgIGFpbVk6IDBcclxuICAgIH0sLy/mnaXnpo/mnqpcclxuICAgIFwiM1wiOiB7XHJcbiAgICAgICAgbmFtZTogXCJ3ZWFwb25zM1wiLFxyXG4gICAgICAgIHJvdGF0aW9uOiAyNSxcclxuICAgICAgICBzZW5kVGltZTogMC42LFxyXG4gICAgICAgIGF0dGFja0lkOiAyLFxyXG4gICAgICAgIGF0dGFjazogMjgsIC8vXHJcbiAgICAgICAgYmlkOiAxLFxyXG4gICAgICAgIGFpbVk6IC01MFxyXG4gICAgfSwvL+mXqueUteaeqlxyXG4gICAgXCI0XCI6IHtcclxuICAgICAgICBuYW1lOiBcIndlYXBvbnM0XCIsXHJcbiAgICAgICAgcm90YXRpb246IDI1LFxyXG4gICAgICAgIHNlbmRUaW1lOiAwLjYsIC8v5a2Q5by55Y+R5bCE5pe26Ze0XHJcbiAgICAgICAgYXR0YWNrSWQ6IDIsICAgLy/mlLvlh7vliqjkvZxpZFxyXG4gICAgICAgIGF0dGFjazogMzcsICAvL+aUu+WHu+WKm1xyXG4gICAgICAgIGJpZDogMSwgICAgICAgLy/lrZDlvLlpZFxyXG4gICAgICAgIGFpbVk6IDBcclxuICAgIH0vL+eBq+eureetklxyXG59OyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet10.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '92255K1Bt1EpJNQGgCB1c66', 'bullet10');
// Script/bullet/bullet10.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 500,
    fire: cc.Animation,
    addSpeedY: 100,
    range: 2000
  },
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie4, false);
    this.data = data;
    this.init(data);
  },
  init: function init(data) {
    this.idx = 0;
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    this.curRange = this.range; //火焰动画

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, "fire1");
      var fireClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 30);
      fireClip.name = 'fire';
      fireClip.wrapMode = cc.WrapMode.Loop;
      this.fire.addClip(fireClip);
      this.fire.play('fire');
    }

    this.state = "move";
    this.node.active = true;
  },
  start: function start() {},
  onDestroy: function onDestroy() {},
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    this.data = _.assign(this.data, {
      aniName: "bomb1",
      //预制体名称
      v: cc.v2(this.node.x, this.node.y),
      //位置
      angle: 0,
      //角度
      group: this.node.group //组

    });
    game.emit("bomb3", this.data); //爆炸

    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    } // let hd = this.node.angle * Math.PI / 180;
    // this.speedX = Math.cos(hd) * this.speed;
    // this.speedY = Math.sin(hd) * this.speed;
    //


    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    } // let curPos = cc.v2(this.node.x, this.node.y);
    // // this.speedY -= 9.8;


    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt; // let pos = cc.v2(this.node.x, this.node.y);
    // let rotation = game.gameUtils.getRotation(curPos, pos);
    // this.node.angle = rotation;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet5.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '711dbd0tLZACopU4NMproPG', 'bullet5');
// Script/bullet/bullet5.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 1000,
    range: 1000
  },
  onLoad: function onLoad() {},
  start: function start() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie1, false);
    this.init(data);
  },
  init: function init(data) {
    this.state = "ready";
    this.idx = 0;
    this.curRange = this.range;
    game.emit("shootFire", {
      aniName: "eff2",
      v: data.v,
      angle: data.angle
    }); //开火动画

    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isInit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.prefabName);
      var readyClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      readyClip.name = 'move';
      readyClip.wrapMode = cc.WrapMode.Loop;
      animation.addClip(readyClip);
      animation.play("move");
      this._isInit = true;
    } else {
      animation.playAdditive('move', 0);
    }

    this.state = "move";
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }

    var curPos = cc.v2(this.node.x, this.node.y);
    var angle = this.node.angle; //game.emit("shootFire", "fire", "eff5", curPos, angle);//开火动画

    game.emit("shootFire", {
      aniName: "eff5",
      v: curPos,
      angle: angle
    }); //开火动画
  },
  onDestroy: function onDestroy() {},
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    }

    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    }

    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet8.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a40d17AxzNGcIQgjoKLEzi+', 'bullet8');
// Script/bullet/bullet8.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 500,
    fire: cc.Animation,
    addSpeedY: 100,
    range: 2000
  },
  onLoad: function onLoad() {
    this._lastPos = cc.v2(0, 0);
    this._curPos = cc.v2(0, 0);
  },
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie4, false);
    this.data = data;
    this.init(data);
  },
  init: function init(data) {
    this.idx = 0;
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    this.curRange = this.range; //火焰动画

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, "fire1");
      var fireClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 30);
      fireClip.name = 'fire';
      fireClip.wrapMode = cc.WrapMode.Loop;
      this.fire.addClip(fireClip);
      this.fire.play('fire');
    }

    this.state = "move";
    this.node.active = true;
  },
  start: function start() {},
  onDestroy: function onDestroy() {},
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    this.data = _.assign(this.data, {
      aniName: "bomb1",
      //预制体名称
      v: cc.v2(this.node.x, this.node.y),
      //位置
      angle: 0,
      //角度
      group: this.node.group //组

    });
    game.emit("bomb2", this.data); //爆炸

    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    }

    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    } // this._lastPos.x = this.node.x;
    // this._lastPos.y = this.node.y;
    // // this.speedY -= 9.8;


    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt; // let pos = cc.v2(this.node.x, this.node.y);
    // let rotation = game.gameUtils.getRotation(curPos, pos);
    // this.node.angle = rotation;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet6.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '96c5bwgt5FGFb7fDB4d92/w', 'bullet6');
// Script/bullet/bullet6.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 1000,
    range: 1000
  },
  onLoad: function onLoad() {},
  start: function start() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.gong_fu_bo_dong_quan, false);
    this.init(data);
  },
  init: function init(data) {
    this.state = "ready";
    this.idx = 0;
    this.curRange = this.range; //game.emit("shootFire", "fire", "eff1", v, angle);//开火动画

    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isInit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.prefabName);
      var readyClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      readyClip.name = 'move';
      readyClip.wrapMode = cc.WrapMode.Loop;
      animation.addClip(readyClip);
      animation.play("move");
      this._isInit = true;
    } else {
      animation.playAdditive('move', 0);
    }

    this.state = "move";
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }

    var curPos = cc.v2(this.node.x, this.node.y);
    var angle = this.node.angle; //
    // this.data = _.assign(this.data, {
    //     aniName: "bomb1",//预制体名称
    //     v: cc.v2(this.node.x, this.node.y), //位置
    //     angle: 0,//角度
    //     group: this.node.group //组
    // });
    // game.emit("bomb1", this.data);//爆炸
    //game.emit("shootFire", "fire", "eff2", curPos, angle);//开火动画

    game.emit("shootFire", {
      aniName: "eff2",
      v: curPos,
      angle: angle
    }); //开火动画
  },
  onDestroy: function onDestroy() {},
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    }

    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    }

    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/hurt.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c1c80I0dKpEvK5HjoS3Lizf', 'hurt');
// Script/bullet/hurt.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    value: 10,
    //伤害值
    type: 0,
    //0=伤害1个  1=范围伤害
    hurtValue: {
      get: function get() {
        if (this.state == 1) {
          return this.value;
        }

        return 0;
      }
    }
  },
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    this.state = 1;

    if (data.attack) {
      this.value = data.attack;
    }
  },
  end: function end() {
    if (this.type == 0) {
      this.state = 0;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxidWxsZXRcXGh1cnQuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInZhbHVlIiwidHlwZSIsImh1cnRWYWx1ZSIsImdldCIsInN0YXRlIiwidW51c2UiLCJyZXVzZSIsImRhdGEiLCJhdHRhY2siLCJlbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLEtBQUssRUFBRSxFQURDO0FBQ0U7QUFDVkMsSUFBQUEsSUFBSSxFQUFFLENBRkU7QUFFQTtBQUNSQyxJQUFBQSxTQUFTLEVBQUU7QUFDUEMsTUFBQUEsR0FETyxpQkFDRDtBQUNGLFlBQUksS0FBS0MsS0FBTCxJQUFjLENBQWxCLEVBQXFCO0FBQ2pCLGlCQUFPLEtBQUtKLEtBQVo7QUFDSDs7QUFDRCxlQUFPLENBQVA7QUFDSDtBQU5NO0FBSEgsR0FGUDtBQWNMO0FBQ0FLLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQWhCSTtBQWlCTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsZUFBVUMsSUFBVixFQUFnQjtBQUNuQixTQUFLSCxLQUFMLEdBQWEsQ0FBYjs7QUFDQSxRQUFJRyxJQUFJLENBQUNDLE1BQVQsRUFBaUI7QUFDYixXQUFLUixLQUFMLEdBQWFPLElBQUksQ0FBQ0MsTUFBbEI7QUFDSDtBQUNKLEdBdkJJO0FBd0JMQyxFQUFBQSxHQXhCSyxpQkF3QkM7QUFDRixRQUFJLEtBQUtSLElBQUwsSUFBYSxDQUFqQixFQUFvQjtBQUNoQixXQUFLRyxLQUFMLEdBQWEsQ0FBYjtBQUNIO0FBQ0o7QUE1QkksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFBvb2xDb21wb25lbnQgPSByZXF1aXJlKFwiUG9vbENvbXBvbmVudFwiKTsgLy/msaDlrZDnu4Tku7ZcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogUG9vbENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICB2YWx1ZTogMTAsLy/kvKTlrrPlgLxcclxuICAgICAgICB0eXBlOiAwLC8vMD3kvKTlrrMx5LiqICAxPeiMg+WbtOS8pOWus1xyXG4gICAgICAgIGh1cnRWYWx1ZToge1xyXG4gICAgICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgLy/lm57mlLZcclxuICAgIHVudXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB9LFxyXG4gICAgLy/ph43nlKhcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSAxO1xyXG4gICAgICAgIGlmIChkYXRhLmF0dGFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS5hdHRhY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGVuZCgpIHtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet9.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e1f08FGqmJMcLYH9RElpzP/', 'bullet9');
// Script/bullet/bullet9.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    speed: 500,
    fire: cc.Animation,
    addSpeedY: 100,
    range: 2000
  },
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie4, false);
    this.data = data;
    this.init(data);
  },
  init: function init(data) {
    this.idx = 0;
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    this.speedX = Math.cos(hd) * this.speed;
    this.speedY = Math.sin(hd) * this.speed;
    this.curRange = this.range; //火焰动画

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, "fire1");
      var fireClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 30);
      fireClip.name = 'fire';
      fireClip.wrapMode = cc.WrapMode.Loop;
      this.fire.addClip(fireClip);
      this.fire.play('fire');
    }

    this.state = "move";
    this.node.active = true;
  },
  start: function start() {},
  onDestroy: function onDestroy() {},
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.end();
  },
  end: function end() {
    if (this.state == "end") return;
    this.state = "end";
    this.data = _.assign(this.data, {
      aniName: "bomb1",
      //预制体名称
      v: cc.v2(this.node.x, this.node.y),
      //位置
      angle: 0,
      //角度
      group: this.node.group //组

    });
    game.emit("bomb2", this.data); //爆炸

    var pool = this.node.pool;

    if (pool) {
      pool.put(this.node);
    } else {
      this.node.removeFromParent(true);
      this.node.destroy();
    }
  },
  update: function update(dt) {
    if (this.state != "move") {
      return;
    } // let hd = this.node.angle * Math.PI / 180;
    // this.speedX = Math.cos(hd) * this.speed;
    // this.speedY = Math.sin(hd) * this.speed;
    //


    this.idx++;
    this.curRange -= this.speed * dt;

    if (this.curRange <= 0) {
      this.end();
      return;
    } // let curPos = cc.v2(this.node.x, this.node.y);
    // // this.speedY -= 9.8;


    this.node.x += this.speedX * dt;
    this.node.y += this.speedY * dt; // let pos = cc.v2(this.node.x, this.node.y);
    // let rotation = game.gameUtils.getRotation(curPos, pos);
    // this.node.angle = rotation;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/bullet/bullet2.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '68c6azHekhFwLiKPVsMN0F3', 'bullet2');
// Script/bullet/bullet2.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie1, false);
    this.init(data);
  },
  init: function init(data) {
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    var hd = this.node.angle * Math.PI / 180;
    this.speedX = Math.cos(hd) * this.node.width / 2;
    this.speedY = Math.sin(hd) * this.node.width / 2;
    this.node.x = data.v.x + this.speedX;
    this.node.y = data.v.y + this.speedY;
    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isInit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, "bullet2");
      var clip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      clip.name = 'start';
      clip.wrapMode = cc.WrapMode.Normal;
      animation.addClip(clip);
      this._isInit = true;
    }

    animation.playAdditive('start', 0);
    animation.once("finished", function () {
      var pool = this.node.pool;

      if (pool) {
        pool.put(this.node);
      } else {
        this.node.removeFromParent(true);
        this.node.destroy();
      }
    }.bind(this));
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxidWxsZXRcXGJ1bGxldDIuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsIm9uTG9hZCIsInVudXNlIiwicmV1c2UiLCJkYXRhIiwiZ2FtZSIsInNvdW5kTWFuYWdlciIsInBsYXlFZmZlY3QiLCJnYW1lU291bmQiLCJxaW5nX3hpbmdfcWlhbmdfamllMSIsImluaXQiLCJncm91cCIsIm5vZGUiLCJhbmdsZSIsImhkIiwiTWF0aCIsIlBJIiwic3BlZWRYIiwiY29zIiwid2lkdGgiLCJzcGVlZFkiLCJzaW4iLCJ4IiwidiIsInkiLCJhbmltYXRpb24iLCJnZXRDb21wb25lbnQiLCJBbmltYXRpb24iLCJfaXNJbml0Iiwic3ByaXRlRnJhbWVzIiwiZ2FtZVV0aWxzIiwiZ2V0U3ByaXRlRnJhbWVzIiwiYnVsbGV0X2F0bGFzIiwiY2xpcCIsIkFuaW1hdGlvbkNsaXAiLCJjcmVhdGVXaXRoU3ByaXRlRnJhbWVzIiwibmFtZSIsIndyYXBNb2RlIiwiV3JhcE1vZGUiLCJOb3JtYWwiLCJhZGRDbGlwIiwicGxheUFkZGl0aXZlIiwib25jZSIsInBvb2wiLCJwdXQiLCJyZW1vdmVGcm9tUGFyZW50IiwiZGVzdHJveSIsImJpbmQiLCJzdGFydCIsIm9uRGVzdHJveSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTNCLEVBQThDOzs7QUFDOUNDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsYUFESjtBQUVMSSxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxNQUhLLG9CQUdJLENBQ1IsQ0FKSTtBQUtMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQVBJO0FBUUw7QUFDQUMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0I7QUFDbkJDLElBQUFBLElBQUksQ0FBQ0MsWUFBTCxDQUFrQkMsVUFBbEIsQ0FBNkJGLElBQUksQ0FBQ0csU0FBTCxDQUFlQyxvQkFBNUMsRUFBaUUsS0FBakU7QUFDQSxTQUFLQyxJQUFMLENBQVVOLElBQVY7QUFDSCxHQVpJO0FBYUxNLEVBQUFBLElBYkssZ0JBYUFOLElBYkEsRUFhTTtBQUNQLFFBQUlBLElBQUksQ0FBQ08sS0FBVCxFQUFnQixLQUFLQyxJQUFMLENBQVVELEtBQVYsR0FBa0JQLElBQUksQ0FBQ08sS0FBdkI7QUFDaEIsU0FBS0MsSUFBTCxDQUFVQyxLQUFWLEdBQWtCVCxJQUFJLENBQUNTLEtBQXZCO0FBQ0EsUUFBSUMsRUFBRSxHQUFHLEtBQUtGLElBQUwsQ0FBVUMsS0FBVixHQUFrQkUsSUFBSSxDQUFDQyxFQUF2QixHQUE0QixHQUFyQztBQUNBLFNBQUtDLE1BQUwsR0FBY0YsSUFBSSxDQUFDRyxHQUFMLENBQVNKLEVBQVQsSUFBZSxLQUFLRixJQUFMLENBQVVPLEtBQXpCLEdBQWlDLENBQS9DO0FBQ0EsU0FBS0MsTUFBTCxHQUFjTCxJQUFJLENBQUNNLEdBQUwsQ0FBU1AsRUFBVCxJQUFlLEtBQUtGLElBQUwsQ0FBVU8sS0FBekIsR0FBaUMsQ0FBL0M7QUFDQSxTQUFLUCxJQUFMLENBQVVVLENBQVYsR0FBY2xCLElBQUksQ0FBQ21CLENBQUwsQ0FBT0QsQ0FBUCxHQUFXLEtBQUtMLE1BQTlCO0FBQ0EsU0FBS0wsSUFBTCxDQUFVWSxDQUFWLEdBQWNwQixJQUFJLENBQUNtQixDQUFMLENBQU9DLENBQVAsR0FBVyxLQUFLSixNQUE5QjtBQUNBLFFBQUlLLFNBQVMsR0FBRyxLQUFLYixJQUFMLENBQVVjLFlBQVYsQ0FBdUI1QixFQUFFLENBQUM2QixTQUExQixDQUFoQixDQVJPLENBUThDOztBQUNyRCxRQUFJLENBQUMsS0FBS0MsT0FBVixFQUFtQjtBQUNmLFVBQUlDLFlBQVksR0FBR3hCLElBQUksQ0FBQ3lCLFNBQUwsQ0FBZUMsZUFBZixDQUErQjFCLElBQUksQ0FBQzJCLFlBQXBDLEVBQWtELFNBQWxELENBQW5CO0FBQ0EsVUFBSUMsSUFBSSxHQUFHbkMsRUFBRSxDQUFDb0MsYUFBSCxDQUFpQkMsc0JBQWpCLENBQXdDTixZQUF4QyxFQUFzRCxFQUF0RCxDQUFYO0FBQ0FJLE1BQUFBLElBQUksQ0FBQ0csSUFBTCxHQUFZLE9BQVo7QUFDQUgsTUFBQUEsSUFBSSxDQUFDSSxRQUFMLEdBQWdCdkMsRUFBRSxDQUFDd0MsUUFBSCxDQUFZQyxNQUE1QjtBQUNBZCxNQUFBQSxTQUFTLENBQUNlLE9BQVYsQ0FBa0JQLElBQWxCO0FBQ0EsV0FBS0wsT0FBTCxHQUFlLElBQWY7QUFDSDs7QUFDREgsSUFBQUEsU0FBUyxDQUFDZ0IsWUFBVixDQUF1QixPQUF2QixFQUFnQyxDQUFoQztBQUNBaEIsSUFBQUEsU0FBUyxDQUFDaUIsSUFBVixDQUFlLFVBQWYsRUFBMkIsWUFBWTtBQUNuQyxVQUFJQyxJQUFJLEdBQUcsS0FBSy9CLElBQUwsQ0FBVStCLElBQXJCOztBQUNBLFVBQUlBLElBQUosRUFBVTtBQUNOQSxRQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxLQUFLaEMsSUFBZDtBQUNILE9BRkQsTUFHSztBQUNELGFBQUtBLElBQUwsQ0FBVWlDLGdCQUFWLENBQTJCLElBQTNCO0FBQ0EsYUFBS2pDLElBQUwsQ0FBVWtDLE9BQVY7QUFDSDtBQUNKLEtBVDBCLENBU3pCQyxJQVR5QixDQVNwQixJQVRvQixDQUEzQjtBQVVILEdBekNJO0FBMENMQyxFQUFBQSxLQTFDSyxtQkEwQ0csQ0FDUCxDQTNDSTtBQTRDTEMsRUFBQUEsU0E1Q0ssdUJBNENPLENBQ1gsQ0E3Q0ksQ0E4Q0w7O0FBOUNLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIik7IC8v5rGg5a2Q57uE5Lu2XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IFBvb2xDb21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgIH0sXHJcbiAgICAvL+WbnuaUtlxyXG4gICAgdW51c2U6IGZ1bmN0aW9uICgpIHtcclxuICAgIH0sXHJcbiAgICAvL+mHjeeUqFxyXG4gICAgcmV1c2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgZ2FtZS5zb3VuZE1hbmFnZXIucGxheUVmZmVjdChnYW1lLmdhbWVTb3VuZC5xaW5nX3hpbmdfcWlhbmdfamllMSxmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbml0KGRhdGEpO1xyXG4gICAgfSxcclxuICAgIGluaXQoZGF0YSkge1xyXG4gICAgICAgIGlmIChkYXRhLmdyb3VwKSB0aGlzLm5vZGUuZ3JvdXAgPSBkYXRhLmdyb3VwO1xyXG4gICAgICAgIHRoaXMubm9kZS5hbmdsZSA9IGRhdGEuYW5nbGU7XHJcbiAgICAgICAgbGV0IGhkID0gdGhpcy5ub2RlLmFuZ2xlICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICB0aGlzLnNwZWVkWCA9IE1hdGguY29zKGhkKSAqIHRoaXMubm9kZS53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy5zcGVlZFkgPSBNYXRoLnNpbihoZCkgKiB0aGlzLm5vZGUud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMubm9kZS54ID0gZGF0YS52LnggKyB0aGlzLnNwZWVkWDtcclxuICAgICAgICB0aGlzLm5vZGUueSA9IGRhdGEudi55ICsgdGhpcy5zcGVlZFk7XHJcbiAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTsvL+WKqOeUu+e7hOS7tlxyXG4gICAgICAgIGlmICghdGhpcy5faXNJbml0KSB7XHJcbiAgICAgICAgICAgIGxldCBzcHJpdGVGcmFtZXMgPSBnYW1lLmdhbWVVdGlscy5nZXRTcHJpdGVGcmFtZXMoZ2FtZS5idWxsZXRfYXRsYXMsIFwiYnVsbGV0MlwiKTtcclxuICAgICAgICAgICAgbGV0IGNsaXAgPSBjYy5BbmltYXRpb25DbGlwLmNyZWF0ZVdpdGhTcHJpdGVGcmFtZXMoc3ByaXRlRnJhbWVzLCAyMCk7XHJcbiAgICAgICAgICAgIGNsaXAubmFtZSA9ICdzdGFydCc7XHJcbiAgICAgICAgICAgIGNsaXAud3JhcE1vZGUgPSBjYy5XcmFwTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5hZGRDbGlwKGNsaXApO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0luaXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbmltYXRpb24ucGxheUFkZGl0aXZlKCdzdGFydCcsIDApO1xyXG4gICAgICAgIGFuaW1hdGlvbi5vbmNlKFwiZmluaXNoZWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgcG9vbCA9IHRoaXMubm9kZS5wb29sO1xyXG4gICAgICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICAgICAgcG9vbC5wdXQodGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5yZW1vdmVGcm9tUGFyZW50KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/joystick.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2f875FYOhRAv4EHfLVM2sr7', 'joystick');
// Script/control/joystick.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    controlNode: {
      "default": null,
      type: cc.Node,
      tooltip: "可操作摇杆的节点（决定操作范围）"
    },
    stick: {
      "default": null,
      type: cc.Node,
      tooltip: "摇杆"
    },
    maxRadius: {
      "default": 200,
      type: cc.Float,
      tooltip: "摇杆最大移动半径"
    },
    isTouch: {
      get: function get() {
        return this._isTouch;
      },
      type: cc.Boolean,
      tooltip: "摇杆是否按下"
    },
    dir: {
      get: function get() {
        return this._dir;
      },
      type: cc.Vec2,
      tooltip: "摇杆向量"
    }
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  onEnable: function onEnable() {
    this._onTouchEnd();

    this.controlNode.on(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
    this.controlNode.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
    this.controlNode.on(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
    this.controlNode.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchEnd, this);
  },
  onDisable: function onDisable() {
    this._onTouchEnd();

    this.controlNode.off(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
    this.controlNode.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
    this.controlNode.off(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
    this.controlNode.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchEnd, this);
  },
  _onTouchStart: function _onTouchStart(e) {
    this._isTouch = true;

    this._setStickPosition(e);
  },
  _onTouchMove: function _onTouchMove(e) {
    if (!this._isTouch) return;

    this._setStickPosition(e);
  },
  _setStickPosition: function _setStickPosition(e) {
    var pos = e.getLocation();
    var jPos = this.node.convertToNodeSpaceAR(pos);
    var len = jPos.mag(); // 设置摇杆的位置

    if (len > this.maxRadius) {
      jPos.x = this.maxRadius * jPos.x / len;
      jPos.y = this.maxRadius * jPos.y / len;
      len = this.maxRadius;
    }

    this._dir.x = jPos.x / this.maxRadius;
    this._dir.y = jPos.y / this.maxRadius;
    this.stick.setPosition(jPos);
    if (len < 50) return;
  },
  _onTouchEnd: function _onTouchEnd(e) {
    this._isTouch = false; // 初始化摇杆节点位置及角度

    this.stick.setPosition(cc.v2(0, 0));
    this._dir = cc.v2(0, 0);
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/config/gameSound.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8a32aNf8A5KIorxHxDSMKJ4', 'gameSound');
// Script/config/gameSound.js

"use strict";

module.exports = {
  bao_zha_jing_bao: "/sound/bao_zha_jing_bao",
  bgm1_1: "/sound/bgm1_1",
  bgm1_2: "/sound/bgm1_2",
  bgm1_3: "/sound/bgm1_3",
  bgm2_1: "/sound/bgm2_1",
  bgm2_2: "/sound/bgm2_2",
  bgm2_3: "/sound/bgm2_3",
  bgm2_4: "/sound/bgm2_4",
  bgm3_1: "/sound/bgm3_1",
  bgm3_2: "/sound/bgm3_2",
  bgm3_3: "/sound/bgm3_3",
  bgm4_1: "/sound/bgm4_1",
  bgm4_2: "/sound/bgm4_2",
  bgm4_3: "/sound/bgm4_3",
  bgm4_4: "/sound/bgm4_4",
  bgm_lose: "/sound/bgm_lose",
  bgm_win: "/sound/bgm_win",
  bi_sha_yin_xiao1: "/sound/bi_sha_yin_xiao1",
  bi_sha_yin_xiao2: "/sound/bi_sha_yin_xiao2",
  bi_sha_yin_xiao3: "/sound/bi_sha_yin_xiao3",
  bo_li_po_sui: "/sound/bo_li_po_sui",
  boss_jing_bao: "/sound/boss_jing_bao",
  bu_chong_dan_yao: "/sound/bu_chong_dan_yao",
  chong_xing_qiang_jie1: "/sound/chong_xing_qiang_jie1",
  chong_xing_qiang_jie2: "/sound/chong_xing_qiang_jie2",
  chong_xing_qiang_jie3: "/sound/chong_xing_qiang_jie3",
  chong_xing_qiang_jie4: "/sound/chong_xing_qiang_jie4",
  chong_xing_qiang_jie5: "/sound/chong_xing_qiang_jie5",
  chong_xing_qiang_jie6: "/sound/chong_xing_qiang_jie6",
  chong_xing_qiang_jie7: "/sound/chong_xing_qiang_jie7",
  chu_shui: "/sound/chu_shui",
  da_bao_zha: "/sound/da_bao_zha",
  da_ji_sheng_yin: "/sound/da_ji_sheng_yin",
  da_tiao_yue: "/sound/da_tiao_yue",
  da_xiang_jiao_sheng: "/sound/da_xiang_jiao_sheng",
  dao_dan_bao_zha: "/sound/dao_dan_bao_zha",
  di_bing_si_wang01: "/sound/di_bing_si_wang01",
  di_bing_si_wang02: "/sound/di_bing_si_wang02",
  di_bing_si_wang03: "/sound/di_bing_si_wang03",
  di_bing_si_wang04: "/sound/di_bing_si_wang04",
  e_yu1: "/sound/e_yu1",
  fei_ji_fei_guo: "/sound/fei_ji_fei_guo",
  fei_ji_fei_lai: "/sound/fei_ji_fei_lai",
  fei_ji_fei_zou: "/sound/fei_ji_fei_zou",
  fei_ji_jin_ru: "/sound/fei_ji_jin_ru",
  fei_ji_tiao_chu: "/sound/fei_ji_tiao_chu",
  gong_fu_bo_dong_quan: "/sound/gong_fu_bo_dong_quan",
  gong_fu_da_xiao: "/sound/gong_fu_da_xiao",
  gong_fu_sheng_long_quan: "/sound/gong_fu_sheng_long_quan",
  gong_fu_xuan_feng_tui: "/sound/gong_fu_xuan_feng_tui",
  gong_gong_ji1: "/sound/gong_gong_ji1",
  gong_gong_ji2: "/sound/gong_gong_ji2",
  gong_ji: "/sound/gong_ji",
  hong_zha_ji_luo_dan: "/sound/hong_zha_ji_luo_dan",
  huo_che1: "/sound/huo_che1",
  huo_che2: "/sound/huo_che2",
  huo_jian_fa_she: "/sound/huo_jian_fa_she",
  ji_fen_yin_xiao: "/sound/ji_fen_yin_xiao",
  ji_guang_pao: "/sound/ji_guang_pao",
  ji_qiang1: "/sound/ji_qiang1",
  ji_qiang2: "/sound/ji_qiang2",
  ji_qiang3: "/sound/ji_qiang3",
  ji_qiang4: "/sound/ji_qiang4",
  ji_qiang5: "/sound/ji_qiang5",
  ji_qiang6: "/sound/ji_qiang6",
  ji_qiang7: "/sound/ji_qiang7",
  ji_qiang8: "/sound/ji_qiang8",
  jian_dao_fen_shu: "/sound/jian_dao_fen_shu",
  kan_dao: "/sound/kan_dao",
  kong_zi_dan: "/sound/kong_zi_dan",
  luo_shui: "/sound/luo_shui",
  ma_sheng_yin1: "/sound/ma_sheng_yin1",
  ma_sheng_yin2: "/sound/ma_sheng_yin2",
  mu_xiang_po_sui: "/sound/mu_xiang_po_sui",
  op: "/sound/op",
  qia_che_cha_che: "/sound/qia_che_cha_che",
  qia_che_kai_dong: "/sound/qia_che_kai_dong",
  qing_xing_qiang_jie1: "/sound/qing_xing_qiang_jie1",
  qing_xing_qiang_jie2: "/sound/qing_xing_qiang_jie2",
  qing_xing_qiang_jie3: "/sound/qing_xing_qiang_jie3",
  qing_xing_qiang_jie4: "/sound/qing_xing_qiang_jie4",
  reng_shou_lei: "/sound/reng_shou_lei",
  shi_bing_shou_liang: "/sound/shi_bing_shou_liang",
  shou_lei_bao_zha: "/sound/shou_lei_bao_zha",
  shou_qiang_shang_zi_dan: "/sound/shou_qiang_shang_zi_dan",
  tan_ke_she_ji: "/sound/tan_ke_she_ji",
  tan_ke_yun_xing: "/sound/tan_ke_yun_xing",
  teng_tiao: "/sound/teng_tiao",
  wen_chong1: "/sound/wen_chong1",
  wen_chong2: "/sound/wen_chong2",
  xi_xie_cao_gong_ji: "/sound/xi_xie_cao_gong_ji",
  xiao_dao01: "/sound/xiao_dao01",
  xiao_dao02: "/sound/xiao_dao02",
  xiao_dao03: "/sound/xiao_dao03",
  xiao_dao04: "/sound/xiao_dao04",
  xiao_dao_chu_dao: "/sound/xiao_dao_chu_dao",
  xiao_gui_chang_lao_si_wang: "/sound/xiao_gui_chang_lao_si_wang",
  xiao_gui_chui_jian: "/sound/xiao_gui_chui_jian",
  xiao_gui_gong_ji: "/sound/xiao_gui_gong_ji",
  xiao_gui_si_wang: "/sound/xiao_gui_si_wang",
  xiao_gui_zhan_li: "/sound/xiao_gui_zhan_li",
  xiao_yin1: "/sound/xiao_yin1",
  xiao_yin2: "/sound/xiao_yin2",
  xiao_yin3: "/sound/xiao_yin3",
  xiao_yin4: "/sound/xiao_yin4",
  zha_lan_kai_qi: "/sound/zha_lan_kai_qi",
  zhi_sheng_fei_ji: "/sound/zhi_sheng_fei_ji",
  zhong_dan1: "/sound/zhong_dan1",
  zhong_dan2: "/sound/zhong_dan2",
  zhong_xing_qiang_jie1: "/sound/zhong_xing_qiang_jie1",
  zhong_xing_qiang_jie2: "/sound/zhong_xing_qiang_jie2",
  zhong_xing_qiang_jie3: "/sound/zhong_xing_qiang_jie3",
  zhong_xing_qiang_jie4: "/sound/zhong_xing_qiang_jie4",
  zhong_xing_qiang_jie5: "/sound/zhong_xing_qiang_jie5",
  zhu_jiao_si_wang1: "/sound/zhu_jiao_si_wang1",
  zhu_jiao_si_wang2: "/sound/zhu_jiao_si_wang2"
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/config/guan1_1.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e81a6plL5RMw5qFdB21ozM/', 'guan1_1');
// Script/config/guan1_1.js

"use strict";

module.exports = {
  de_bu: {
    //德国小兵
    hp: 100,
    attack: 10,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  de_jun: {
    //德国军官
    hp: 135,
    attack: 10,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  de_pao: {
    //德国炮兵
    hp: 150,
    attack: 10,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  hanjian: {
    //汉奸
    hp: 150,
    attack: 10,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  rb_bu: {
    //日本步兵
    hp: 100,
    attack: 15,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  rb_qi: {
    //日本骑兵
    hp: 135,
    attack: 15,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  rb_quan: {
    //日本拳手
    hp: 150,
    attack: 15,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  rb_zu: {
    //日本阻击兵
    hp: 150,
    attack: 20,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  rb_wu: {
    //日本阻击兵
    hp: 150,
    attack: 20,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  bl_man: {
    //bolo 男
    hp: 200,
    attack: 25,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  },
  bl_woman: {
    //bolo 男
    hp: 250,
    attack: 25,
    findX: 40,
    count: 10,
    shootLen: 1000 //子弹射程

  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb25maWdcXGd1YW4xXzEuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRlX2J1IiwiaHAiLCJhdHRhY2siLCJmaW5kWCIsImNvdW50Iiwic2hvb3RMZW4iLCJkZV9qdW4iLCJkZV9wYW8iLCJoYW5qaWFuIiwicmJfYnUiLCJyYl9xaSIsInJiX3F1YW4iLCJyYl96dSIsInJiX3d1IiwiYmxfbWFuIiwiYmxfd29tYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxLQUFLLEVBQUU7QUFBRTtBQUNMQyxJQUFBQSxFQUFFLEVBQUUsR0FERDtBQUVIQyxJQUFBQSxNQUFNLEVBQUUsRUFGTDtBQUdIQyxJQUFBQSxLQUFLLEVBQUUsRUFISjtBQUlIQyxJQUFBQSxLQUFLLEVBQUUsRUFKSjtBQUtIQyxJQUFBQSxRQUFRLEVBQUUsSUFMUCxDQUtZOztBQUxaLEdBRE07QUFRYkMsRUFBQUEsTUFBTSxFQUFFO0FBQUU7QUFDTkwsSUFBQUEsRUFBRSxFQUFFLEdBREE7QUFFSkMsSUFBQUEsTUFBTSxFQUFFLEVBRko7QUFHSkMsSUFBQUEsS0FBSyxFQUFFLEVBSEg7QUFJSkMsSUFBQUEsS0FBSyxFQUFFLEVBSkg7QUFLSkMsSUFBQUEsUUFBUSxFQUFFLElBTE4sQ0FLVzs7QUFMWCxHQVJLO0FBZWJFLEVBQUFBLE1BQU0sRUFBRTtBQUFFO0FBQ05OLElBQUFBLEVBQUUsRUFBRSxHQURBO0FBRUpDLElBQUFBLE1BQU0sRUFBRSxFQUZKO0FBR0pDLElBQUFBLEtBQUssRUFBRSxFQUhIO0FBSUpDLElBQUFBLEtBQUssRUFBRSxFQUpIO0FBS0pDLElBQUFBLFFBQVEsRUFBRSxJQUxOLENBS1c7O0FBTFgsR0FmSztBQXNCYkcsRUFBQUEsT0FBTyxFQUFFO0FBQUU7QUFDUFAsSUFBQUEsRUFBRSxFQUFFLEdBREM7QUFFTEMsSUFBQUEsTUFBTSxFQUFFLEVBRkg7QUFHTEMsSUFBQUEsS0FBSyxFQUFFLEVBSEY7QUFJTEMsSUFBQUEsS0FBSyxFQUFFLEVBSkY7QUFLTEMsSUFBQUEsUUFBUSxFQUFFLElBTEwsQ0FLVTs7QUFMVixHQXRCSTtBQTZCYkksRUFBQUEsS0FBSyxFQUFFO0FBQUU7QUFDTFIsSUFBQUEsRUFBRSxFQUFFLEdBREQ7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLEVBRkw7QUFHSEMsSUFBQUEsS0FBSyxFQUFFLEVBSEo7QUFJSEMsSUFBQUEsS0FBSyxFQUFFLEVBSko7QUFLSEMsSUFBQUEsUUFBUSxFQUFFLElBTFAsQ0FLWTs7QUFMWixHQTdCTTtBQW9DYkssRUFBQUEsS0FBSyxFQUFFO0FBQUU7QUFDTFQsSUFBQUEsRUFBRSxFQUFFLEdBREQ7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLEVBRkw7QUFHSEMsSUFBQUEsS0FBSyxFQUFFLEVBSEo7QUFJSEMsSUFBQUEsS0FBSyxFQUFFLEVBSko7QUFLSEMsSUFBQUEsUUFBUSxFQUFFLElBTFAsQ0FLWTs7QUFMWixHQXBDTTtBQTJDYk0sRUFBQUEsT0FBTyxFQUFFO0FBQUU7QUFDUFYsSUFBQUEsRUFBRSxFQUFFLEdBREM7QUFFTEMsSUFBQUEsTUFBTSxFQUFFLEVBRkg7QUFHTEMsSUFBQUEsS0FBSyxFQUFFLEVBSEY7QUFJTEMsSUFBQUEsS0FBSyxFQUFFLEVBSkY7QUFLTEMsSUFBQUEsUUFBUSxFQUFFLElBTEwsQ0FLVTs7QUFMVixHQTNDSTtBQWtEYk8sRUFBQUEsS0FBSyxFQUFFO0FBQUU7QUFDTFgsSUFBQUEsRUFBRSxFQUFFLEdBREQ7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLEVBRkw7QUFHSEMsSUFBQUEsS0FBSyxFQUFFLEVBSEo7QUFJSEMsSUFBQUEsS0FBSyxFQUFFLEVBSko7QUFLSEMsSUFBQUEsUUFBUSxFQUFFLElBTFAsQ0FLWTs7QUFMWixHQWxETTtBQXlEYlEsRUFBQUEsS0FBSyxFQUFFO0FBQUU7QUFDTFosSUFBQUEsRUFBRSxFQUFFLEdBREQ7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLEVBRkw7QUFHSEMsSUFBQUEsS0FBSyxFQUFFLEVBSEo7QUFJSEMsSUFBQUEsS0FBSyxFQUFFLEVBSko7QUFLSEMsSUFBQUEsUUFBUSxFQUFFLElBTFAsQ0FLWTs7QUFMWixHQXpETTtBQWdFYlMsRUFBQUEsTUFBTSxFQUFFO0FBQUU7QUFDTmIsSUFBQUEsRUFBRSxFQUFFLEdBREE7QUFFSkMsSUFBQUEsTUFBTSxFQUFFLEVBRko7QUFHSkMsSUFBQUEsS0FBSyxFQUFFLEVBSEg7QUFJSkMsSUFBQUEsS0FBSyxFQUFFLEVBSkg7QUFLSkMsSUFBQUEsUUFBUSxFQUFFLElBTE4sQ0FLVzs7QUFMWCxHQWhFSztBQXVFYlUsRUFBQUEsUUFBUSxFQUFFO0FBQUU7QUFDUmQsSUFBQUEsRUFBRSxFQUFFLEdBREU7QUFFTkMsSUFBQUEsTUFBTSxFQUFFLEVBRkY7QUFHTkMsSUFBQUEsS0FBSyxFQUFFLEVBSEQ7QUFJTkMsSUFBQUEsS0FBSyxFQUFFLEVBSkQ7QUFLTkMsSUFBQUEsUUFBUSxFQUFFLElBTEosQ0FLUzs7QUFMVDtBQXZFRyxDQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBkZV9idTogeyAvL+W+t+WbveWwj+WFtVxyXG4gICAgICAgIGhwOiAxMDAsXHJcbiAgICAgICAgYXR0YWNrOiAxMCxcclxuICAgICAgICBmaW5kWDogNDAsXHJcbiAgICAgICAgY291bnQ6IDEwLFxyXG4gICAgICAgIHNob290TGVuOiAxMDAwIC8v5a2Q5by55bCE56iLXHJcbiAgICB9LFxyXG4gICAgZGVfanVuOiB7IC8v5b635Zu95Yab5a6YXHJcbiAgICAgICAgaHA6IDEzNSxcclxuICAgICAgICBhdHRhY2s6IDEwLFxyXG4gICAgICAgIGZpbmRYOiA0MCxcclxuICAgICAgICBjb3VudDogMTAsXHJcbiAgICAgICAgc2hvb3RMZW46IDEwMDAgLy/lrZDlvLnlsITnqItcclxuICAgIH0sXHJcbiAgICBkZV9wYW86IHsgLy/lvrflm73ngq7lhbVcclxuICAgICAgICBocDogMTUwLFxyXG4gICAgICAgIGF0dGFjazogMTAsXHJcbiAgICAgICAgZmluZFg6IDQwLFxyXG4gICAgICAgIGNvdW50OiAxMCxcclxuICAgICAgICBzaG9vdExlbjogMTAwMCAvL+WtkOW8ueWwhOeoi1xyXG4gICAgfSxcclxuICAgIGhhbmppYW46IHsgLy/msYnlpbhcclxuICAgICAgICBocDogMTUwLFxyXG4gICAgICAgIGF0dGFjazogMTAsXHJcbiAgICAgICAgZmluZFg6IDQwLFxyXG4gICAgICAgIGNvdW50OiAxMCxcclxuICAgICAgICBzaG9vdExlbjogMTAwMCAvL+WtkOW8ueWwhOeoi1xyXG4gICAgfSxcclxuICAgIHJiX2J1OiB7IC8v5pel5pys5q2l5YW1XHJcbiAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICBhdHRhY2s6IDE1LFxyXG4gICAgICAgIGZpbmRYOiA0MCxcclxuICAgICAgICBjb3VudDogMTAsXHJcbiAgICAgICAgc2hvb3RMZW46IDEwMDAgLy/lrZDlvLnlsITnqItcclxuICAgIH0sXHJcbiAgICByYl9xaTogeyAvL+aXpeacrOmqkeWFtVxyXG4gICAgICAgIGhwOiAxMzUsXHJcbiAgICAgICAgYXR0YWNrOiAxNSxcclxuICAgICAgICBmaW5kWDogNDAsXHJcbiAgICAgICAgY291bnQ6IDEwLFxyXG4gICAgICAgIHNob290TGVuOiAxMDAwIC8v5a2Q5by55bCE56iLXHJcbiAgICB9LFxyXG4gICAgcmJfcXVhbjogeyAvL+aXpeacrOaLs+aJi1xyXG4gICAgICAgIGhwOiAxNTAsXHJcbiAgICAgICAgYXR0YWNrOiAxNSxcclxuICAgICAgICBmaW5kWDogNDAsXHJcbiAgICAgICAgY291bnQ6IDEwLFxyXG4gICAgICAgIHNob290TGVuOiAxMDAwIC8v5a2Q5by55bCE56iLXHJcbiAgICB9LFxyXG4gICAgcmJfenU6IHsgLy/ml6XmnKzpmLvlh7vlhbVcclxuICAgICAgICBocDogMTUwLFxyXG4gICAgICAgIGF0dGFjazogMjAsXHJcbiAgICAgICAgZmluZFg6IDQwLFxyXG4gICAgICAgIGNvdW50OiAxMCxcclxuICAgICAgICBzaG9vdExlbjogMTAwMCAvL+WtkOW8ueWwhOeoi1xyXG4gICAgfSxcclxuICAgIHJiX3d1OiB7IC8v5pel5pys6Zi75Ye75YW1XHJcbiAgICAgICAgaHA6IDE1MCxcclxuICAgICAgICBhdHRhY2s6IDIwLFxyXG4gICAgICAgIGZpbmRYOiA0MCxcclxuICAgICAgICBjb3VudDogMTAsXHJcbiAgICAgICAgc2hvb3RMZW46IDEwMDAgLy/lrZDlvLnlsITnqItcclxuICAgIH0sXHJcbiAgICBibF9tYW46IHsgLy9ib2xvIOeUt1xyXG4gICAgICAgIGhwOiAyMDAsXHJcbiAgICAgICAgYXR0YWNrOiAyNSxcclxuICAgICAgICBmaW5kWDogNDAsXHJcbiAgICAgICAgY291bnQ6IDEwLFxyXG4gICAgICAgIHNob290TGVuOiAxMDAwIC8v5a2Q5by55bCE56iLXHJcbiAgICB9LFxyXG4gICAgYmxfd29tYW46IHsgLy9ib2xvIOeUt1xyXG4gICAgICAgIGhwOiAyNTAsXHJcbiAgICAgICAgYXR0YWNrOiAyNSxcclxuICAgICAgICBmaW5kWDogNDAsXHJcbiAgICAgICAgY291bnQ6IDEwLFxyXG4gICAgICAgIHNob290TGVuOiAxMDAwIC8v5a2Q5by55bCE56iLXHJcbiAgICB9LFxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/config/gameConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f11d6whkDBMzo6DwP7vJMhn', 'gameConfig');
// Script/config/gameConfig.js

"use strict";

module.exports = {
  guan1_1: {
    //第一章 第一关配置
    "junguan": {
      hp: 300,
      attack: 40,
      findX: 40
    }
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb25maWdcXGdhbWVDb25maWcuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImd1YW4xXzEiLCJocCIsImF0dGFjayIsImZpbmRYIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsT0FBTyxFQUFFO0FBQUU7QUFDUCxlQUFXO0FBQ1BDLE1BQUFBLEVBQUUsRUFBRSxHQURHO0FBRVBDLE1BQUFBLE1BQU0sRUFBRSxFQUZEO0FBR1BDLE1BQUFBLEtBQUssRUFBRTtBQUhBO0FBRE47QUFESSxDQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBndWFuMV8xOiB7IC8v56ys5LiA56ugIOesrOS4gOWFs+mFjee9rlxyXG4gICAgICAgIFwianVuZ3VhblwiOiB7XHJcbiAgICAgICAgICAgIGhwOiAzMDAsXHJcbiAgICAgICAgICAgIGF0dGFjazogNDAsXHJcbiAgICAgICAgICAgIGZpbmRYOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/joystickBtn.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b42dfgD73ZJNIr//6fSEwUT', 'joystickBtn');
// Script/control/joystickBtn.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  onEnable: function onEnable() {
    this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
    this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
    this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
    this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchEnd, this);
  },
  onDisable: function onDisable() {
    this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
    this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
    this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
    this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchEnd, this);
  },
  _onTouchStart: function _onTouchStart(e) {
    this._isTouch = true;
    var pos = e.getLocation();
    var jPos = this.node.convertToNodeSpaceAR(pos);

    if (jPos.x > 0) {
      this.key_down(game.gameControl.right);
    } else {
      this.key_down(game.gameControl.left);
    } //cc.log("_onTouchStart", pos.x, jPos.x);

  },
  _onTouchMove: function _onTouchMove(e) {
    //cc.log("_onTouchMove", this._isTouch);
    if (!this._isTouch) return;
    var pos = e.getLocation();
    var jPos = this.node.convertToNodeSpaceAR(pos);

    if (jPos.x > 0) {
      this.key_down(game.gameControl.right);
    } else {
      this.key_down(game.gameControl.left);
    }
  },
  _onTouchEnd: function _onTouchEnd(e) {
    this._isTouch = false;
    var pos = e.getLocation();
    var jPos = this.node.convertToNodeSpaceAR(pos);

    if (jPos.x > 0) {
      this.key_up(game.gameControl.right);
    } else {
      this.key_up(game.gameControl.left);
    }
  },
  key_down: function key_down(control) {
    if (this.control == control) return;

    if (this.control) {
      this.key_up(this.control);
    }

    this.control = control;
    game.emit("key_down", control);
  },
  key_up: function key_up(control) {
    this.control = 0;
    game.emit("key_up", control);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb250cm9sXFxqb3lzdGlja0J0bi5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uRW5hYmxlIiwibm9kZSIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlRPVUNIX1NUQVJUIiwiX29uVG91Y2hTdGFydCIsIlRPVUNIX01PVkUiLCJfb25Ub3VjaE1vdmUiLCJUT1VDSF9FTkQiLCJfb25Ub3VjaEVuZCIsIlRPVUNIX0NBTkNFTCIsIm9uRGlzYWJsZSIsIm9mZiIsImUiLCJfaXNUb3VjaCIsInBvcyIsImdldExvY2F0aW9uIiwialBvcyIsImNvbnZlcnRUb05vZGVTcGFjZUFSIiwieCIsImtleV9kb3duIiwiZ2FtZSIsImdhbWVDb250cm9sIiwicmlnaHQiLCJsZWZ0Iiwia2V5X3VwIiwiY29udHJvbCIsImVtaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR0w7QUFDQTtBQUNBQyxFQUFBQSxRQUxLLHNCQUtNO0FBQ1AsU0FBS0MsSUFBTCxDQUFVQyxFQUFWLENBQWFOLEVBQUUsQ0FBQ08sSUFBSCxDQUFRQyxTQUFSLENBQWtCQyxXQUEvQixFQUE0QyxLQUFLQyxhQUFqRCxFQUFnRSxJQUFoRTtBQUNBLFNBQUtMLElBQUwsQ0FBVUMsRUFBVixDQUFhTixFQUFFLENBQUNPLElBQUgsQ0FBUUMsU0FBUixDQUFrQkcsVUFBL0IsRUFBMkMsS0FBS0MsWUFBaEQsRUFBOEQsSUFBOUQ7QUFDQSxTQUFLUCxJQUFMLENBQVVDLEVBQVYsQ0FBYU4sRUFBRSxDQUFDTyxJQUFILENBQVFDLFNBQVIsQ0FBa0JLLFNBQS9CLEVBQTBDLEtBQUtDLFdBQS9DLEVBQTRELElBQTVEO0FBQ0EsU0FBS1QsSUFBTCxDQUFVQyxFQUFWLENBQWFOLEVBQUUsQ0FBQ08sSUFBSCxDQUFRQyxTQUFSLENBQWtCTyxZQUEvQixFQUE2QyxLQUFLRCxXQUFsRCxFQUErRCxJQUEvRDtBQUNILEdBVkk7QUFXTEUsRUFBQUEsU0FYSyx1QkFXTztBQUNSLFNBQUtYLElBQUwsQ0FBVVksR0FBVixDQUFjakIsRUFBRSxDQUFDTyxJQUFILENBQVFDLFNBQVIsQ0FBa0JDLFdBQWhDLEVBQTZDLEtBQUtDLGFBQWxELEVBQWlFLElBQWpFO0FBQ0EsU0FBS0wsSUFBTCxDQUFVWSxHQUFWLENBQWNqQixFQUFFLENBQUNPLElBQUgsQ0FBUUMsU0FBUixDQUFrQkcsVUFBaEMsRUFBNEMsS0FBS0MsWUFBakQsRUFBK0QsSUFBL0Q7QUFDQSxTQUFLUCxJQUFMLENBQVVZLEdBQVYsQ0FBY2pCLEVBQUUsQ0FBQ08sSUFBSCxDQUFRQyxTQUFSLENBQWtCSyxTQUFoQyxFQUEyQyxLQUFLQyxXQUFoRCxFQUE2RCxJQUE3RDtBQUNBLFNBQUtULElBQUwsQ0FBVVksR0FBVixDQUFjakIsRUFBRSxDQUFDTyxJQUFILENBQVFDLFNBQVIsQ0FBa0JPLFlBQWhDLEVBQThDLEtBQUtELFdBQW5ELEVBQWdFLElBQWhFO0FBQ0gsR0FoQkk7QUFpQkxKLEVBQUFBLGFBakJLLHlCQWlCU1EsQ0FqQlQsRUFpQlk7QUFDYixTQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHRixDQUFDLENBQUNHLFdBQUYsRUFBVjtBQUNBLFFBQUlDLElBQUksR0FBRyxLQUFLakIsSUFBTCxDQUFVa0Isb0JBQVYsQ0FBK0JILEdBQS9CLENBQVg7O0FBQ0EsUUFBSUUsSUFBSSxDQUFDRSxDQUFMLEdBQVMsQ0FBYixFQUFnQjtBQUNaLFdBQUtDLFFBQUwsQ0FBY0MsSUFBSSxDQUFDQyxXQUFMLENBQWlCQyxLQUEvQjtBQUNILEtBRkQsTUFHSztBQUNELFdBQUtILFFBQUwsQ0FBY0MsSUFBSSxDQUFDQyxXQUFMLENBQWlCRSxJQUEvQjtBQUNILEtBVFksQ0FVYjs7QUFDSCxHQTVCSTtBQTZCTGpCLEVBQUFBLFlBN0JLLHdCQTZCUU0sQ0E3QlIsRUE2Qlc7QUFDWjtBQUNBLFFBQUksQ0FBQyxLQUFLQyxRQUFWLEVBQ0k7QUFDSixRQUFJQyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0csV0FBRixFQUFWO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLEtBQUtqQixJQUFMLENBQVVrQixvQkFBVixDQUErQkgsR0FBL0IsQ0FBWDs7QUFDQSxRQUFJRSxJQUFJLENBQUNFLENBQUwsR0FBUyxDQUFiLEVBQWdCO0FBQ1osV0FBS0MsUUFBTCxDQUFjQyxJQUFJLENBQUNDLFdBQUwsQ0FBaUJDLEtBQS9CO0FBQ0gsS0FGRCxNQUdLO0FBQ0QsV0FBS0gsUUFBTCxDQUFjQyxJQUFJLENBQUNDLFdBQUwsQ0FBaUJFLElBQS9CO0FBQ0g7QUFDSixHQXpDSTtBQTBDTGYsRUFBQUEsV0ExQ0ssdUJBMENPSSxDQTFDUCxFQTBDVTtBQUNYLFNBQUtDLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQSxRQUFJQyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0csV0FBRixFQUFWO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLEtBQUtqQixJQUFMLENBQVVrQixvQkFBVixDQUErQkgsR0FBL0IsQ0FBWDs7QUFDQSxRQUFJRSxJQUFJLENBQUNFLENBQUwsR0FBUyxDQUFiLEVBQWdCO0FBQ1osV0FBS00sTUFBTCxDQUFZSixJQUFJLENBQUNDLFdBQUwsQ0FBaUJDLEtBQTdCO0FBQ0gsS0FGRCxNQUdLO0FBQ0QsV0FBS0UsTUFBTCxDQUFZSixJQUFJLENBQUNDLFdBQUwsQ0FBaUJFLElBQTdCO0FBQ0g7QUFDSixHQXBESTtBQXFETEosRUFBQUEsUUFyREssb0JBcURJTSxPQXJESixFQXFEYTtBQUNkLFFBQUksS0FBS0EsT0FBTCxJQUFnQkEsT0FBcEIsRUFBNkI7O0FBQzdCLFFBQUksS0FBS0EsT0FBVCxFQUFrQjtBQUNkLFdBQUtELE1BQUwsQ0FBWSxLQUFLQyxPQUFqQjtBQUNIOztBQUNELFNBQUtBLE9BQUwsR0FBZUEsT0FBZjtBQUNBTCxJQUFBQSxJQUFJLENBQUNNLElBQUwsQ0FBVSxVQUFWLEVBQXNCRCxPQUF0QjtBQUNILEdBNURJO0FBNkRMRCxFQUFBQSxNQTdESyxrQkE2REVDLE9BN0RGLEVBNkRXO0FBQ1osU0FBS0EsT0FBTCxHQUFlLENBQWY7QUFDQUwsSUFBQUEsSUFBSSxDQUFDTSxJQUFMLENBQVUsUUFBVixFQUFvQkQsT0FBcEI7QUFDSDtBQWhFSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy8gb25Mb2FkICgpIHt9LFxyXG4gICAgb25FbmFibGUoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLl9vblRvdWNoU3RhcnQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLl9vblRvdWNoTW92ZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5fb25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy5fb25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgb25EaXNhYmxlKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vZmYoY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMuX29uVG91Y2hTdGFydCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLl9vblRvdWNoTW92ZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMuX29uVG91Y2hFbmQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vZmYoY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfQ0FOQ0VMLCB0aGlzLl9vblRvdWNoRW5kLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBfb25Ub3VjaFN0YXJ0KGUpIHtcclxuICAgICAgICB0aGlzLl9pc1RvdWNoID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcG9zID0gZS5nZXRMb2NhdGlvbigpO1xyXG4gICAgICAgIHZhciBqUG9zID0gdGhpcy5ub2RlLmNvbnZlcnRUb05vZGVTcGFjZUFSKHBvcyk7XHJcbiAgICAgICAgaWYgKGpQb3MueCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlfZG93bihnYW1lLmdhbWVDb250cm9sLnJpZ2h0KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlfZG93bihnYW1lLmdhbWVDb250cm9sLmxlZnQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2MubG9nKFwiX29uVG91Y2hTdGFydFwiLCBwb3MueCwgalBvcy54KTtcclxuICAgIH0sXHJcbiAgICBfb25Ub3VjaE1vdmUoZSkge1xyXG4gICAgICAgIC8vY2MubG9nKFwiX29uVG91Y2hNb3ZlXCIsIHRoaXMuX2lzVG91Y2gpO1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb3VjaClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBwb3MgPSBlLmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgdmFyIGpQb3MgPSB0aGlzLm5vZGUuY29udmVydFRvTm9kZVNwYWNlQVIocG9zKTtcclxuICAgICAgICBpZiAoalBvcy54ID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmtleV9kb3duKGdhbWUuZ2FtZUNvbnRyb2wucmlnaHQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmtleV9kb3duKGdhbWUuZ2FtZUNvbnRyb2wubGVmdClcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX29uVG91Y2hFbmQoZSkge1xyXG4gICAgICAgIHRoaXMuX2lzVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICB2YXIgcG9zID0gZS5nZXRMb2NhdGlvbigpO1xyXG4gICAgICAgIHZhciBqUG9zID0gdGhpcy5ub2RlLmNvbnZlcnRUb05vZGVTcGFjZUFSKHBvcyk7XHJcbiAgICAgICAgaWYgKGpQb3MueCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlfdXAoZ2FtZS5nYW1lQ29udHJvbC5yaWdodClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMua2V5X3VwKGdhbWUuZ2FtZUNvbnRyb2wubGVmdClcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAga2V5X2Rvd24oY29udHJvbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2wgPT0gY29udHJvbCkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlfdXAodGhpcy5jb250cm9sKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sID0gY29udHJvbDtcclxuICAgICAgICBnYW1lLmVtaXQoXCJrZXlfZG93blwiLCBjb250cm9sKTtcclxuICAgIH0sXHJcbiAgICBrZXlfdXAoY29udHJvbCkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbCA9IDA7XHJcbiAgICAgICAgZ2FtZS5lbWl0KFwia2V5X3VwXCIsIGNvbnRyb2wpO1xyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/keyboard.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '06a11OLhwhJJrss1CQeJmu4', 'keyboard');
// Script/control/keyboard.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  onEnable: function onEnable() {
    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
  },
  onDisable: function onDisable() {
    cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
    cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
  },
  onKeyDown: function onKeyDown(event) {
    switch (event.keyCode) {
      case cc.macro.KEY.a:
      case cc.macro.KEY.left:
        game.emit("key_down", game.gameControl.left);
        break;

      case cc.macro.KEY.d:
      case cc.macro.KEY.right:
        game.emit("key_down", game.gameControl.right);
        break;

      case cc.macro.KEY.up:
      case cc.macro.KEY.w:
        game.emit("key_down", game.gameControl.up);
        break;

      case cc.macro.KEY.down:
      case cc.macro.KEY.s:
        game.emit("key_down", game.gameControl.down);
        break;

      case cc.macro.KEY.e:
        game.emit("key_down", game.gameControl.weapons);
        break;
    }
  },
  onKeyUp: function onKeyUp(event) {
    switch (event.keyCode) {
      case cc.macro.KEY.a:
      case cc.macro.KEY.left:
        game.emit("key_up", game.gameControl.left);
        break;

      case cc.macro.KEY.d:
      case cc.macro.KEY.right:
        game.emit("key_up", game.gameControl.right);
        break;

      case cc.macro.KEY.up:
      case cc.macro.KEY.w:
        game.emit("key_up", game.gameControl.up);
        break;

      case cc.macro.KEY.down:
      case cc.macro.KEY.s:
        game.emit("key_up", game.gameControl.down);
        break;

      case cc.macro.KEY.e:
        game.emit("key_up", game.gameControl.weapons);
        break;
    }
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb250cm9sXFxrZXlib2FyZC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uRGVzdHJveSIsIm9uTG9hZCIsIm9uRW5hYmxlIiwic3lzdGVtRXZlbnQiLCJvbiIsIlN5c3RlbUV2ZW50IiwiRXZlbnRUeXBlIiwiS0VZX0RPV04iLCJvbktleURvd24iLCJLRVlfVVAiLCJvbktleVVwIiwib25EaXNhYmxlIiwib2ZmIiwiZXZlbnQiLCJrZXlDb2RlIiwibWFjcm8iLCJLRVkiLCJhIiwibGVmdCIsImdhbWUiLCJlbWl0IiwiZ2FtZUNvbnRyb2wiLCJkIiwicmlnaHQiLCJ1cCIsInciLCJkb3duIiwicyIsImUiLCJ3ZWFwb25zIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR0xDLEVBQUFBLFNBSEssdUJBR08sQ0FDWCxDQUpJO0FBS0xDLEVBQUFBLE1BTEssb0JBS0ksQ0FDUixDQU5JO0FBT0xDLEVBQUFBLFFBUEssc0JBT007QUFDUE4sSUFBQUEsRUFBRSxDQUFDTyxXQUFILENBQWVDLEVBQWYsQ0FBa0JSLEVBQUUsQ0FBQ1MsV0FBSCxDQUFlQyxTQUFmLENBQXlCQyxRQUEzQyxFQUFxRCxLQUFLQyxTQUExRCxFQUFxRSxJQUFyRTtBQUNBWixJQUFBQSxFQUFFLENBQUNPLFdBQUgsQ0FBZUMsRUFBZixDQUFrQlIsRUFBRSxDQUFDUyxXQUFILENBQWVDLFNBQWYsQ0FBeUJHLE1BQTNDLEVBQW1ELEtBQUtDLE9BQXhELEVBQWlFLElBQWpFO0FBQ0gsR0FWSTtBQVdMQyxFQUFBQSxTQVhLLHVCQVdPO0FBQ1JmLElBQUFBLEVBQUUsQ0FBQ08sV0FBSCxDQUFlUyxHQUFmLENBQW1CaEIsRUFBRSxDQUFDUyxXQUFILENBQWVDLFNBQWYsQ0FBeUJDLFFBQTVDLEVBQXNELEtBQUtDLFNBQTNELEVBQXNFLElBQXRFO0FBQ0FaLElBQUFBLEVBQUUsQ0FBQ08sV0FBSCxDQUFlUyxHQUFmLENBQW1CaEIsRUFBRSxDQUFDUyxXQUFILENBQWVDLFNBQWYsQ0FBeUJHLE1BQTVDLEVBQW9ELEtBQUtDLE9BQXpELEVBQWtFLElBQWxFO0FBQ0gsR0FkSTtBQWVMRixFQUFBQSxTQWZLLHFCQWVLSyxLQWZMLEVBZVk7QUFDYixZQUFRQSxLQUFLLENBQUNDLE9BQWQ7QUFDSSxXQUFLbEIsRUFBRSxDQUFDbUIsS0FBSCxDQUFTQyxHQUFULENBQWFDLENBQWxCO0FBQ0EsV0FBS3JCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhRSxJQUFsQjtBQUNJQyxRQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxVQUFWLEVBQXNCRCxJQUFJLENBQUNFLFdBQUwsQ0FBaUJILElBQXZDO0FBQ0E7O0FBQ0osV0FBS3RCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhTSxDQUFsQjtBQUNBLFdBQUsxQixFQUFFLENBQUNtQixLQUFILENBQVNDLEdBQVQsQ0FBYU8sS0FBbEI7QUFDSUosUUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsVUFBVixFQUFzQkQsSUFBSSxDQUFDRSxXQUFMLENBQWlCRSxLQUF2QztBQUNBOztBQUNKLFdBQUszQixFQUFFLENBQUNtQixLQUFILENBQVNDLEdBQVQsQ0FBYVEsRUFBbEI7QUFDQSxXQUFLNUIsRUFBRSxDQUFDbUIsS0FBSCxDQUFTQyxHQUFULENBQWFTLENBQWxCO0FBQ0lOLFFBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFVBQVYsRUFBc0JELElBQUksQ0FBQ0UsV0FBTCxDQUFpQkcsRUFBdkM7QUFDQTs7QUFDSixXQUFLNUIsRUFBRSxDQUFDbUIsS0FBSCxDQUFTQyxHQUFULENBQWFVLElBQWxCO0FBQ0EsV0FBSzlCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhVyxDQUFsQjtBQUNJUixRQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxVQUFWLEVBQXNCRCxJQUFJLENBQUNFLFdBQUwsQ0FBaUJLLElBQXZDO0FBQ0E7O0FBQ0osV0FBSzlCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhWSxDQUFsQjtBQUNJVCxRQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxVQUFWLEVBQXNCRCxJQUFJLENBQUNFLFdBQUwsQ0FBaUJRLE9BQXZDO0FBQ0E7QUFuQlI7QUFxQkgsR0FyQ0k7QUFzQ0xuQixFQUFBQSxPQXRDSyxtQkFzQ0dHLEtBdENILEVBc0NVO0FBQ1gsWUFBUUEsS0FBSyxDQUFDQyxPQUFkO0FBQ0ksV0FBS2xCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhQyxDQUFsQjtBQUNBLFdBQUtyQixFQUFFLENBQUNtQixLQUFILENBQVNDLEdBQVQsQ0FBYUUsSUFBbEI7QUFDSUMsUUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsUUFBVixFQUFvQkQsSUFBSSxDQUFDRSxXQUFMLENBQWlCSCxJQUFyQztBQUNBOztBQUNKLFdBQUt0QixFQUFFLENBQUNtQixLQUFILENBQVNDLEdBQVQsQ0FBYU0sQ0FBbEI7QUFDQSxXQUFLMUIsRUFBRSxDQUFDbUIsS0FBSCxDQUFTQyxHQUFULENBQWFPLEtBQWxCO0FBQ0lKLFFBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFFBQVYsRUFBb0JELElBQUksQ0FBQ0UsV0FBTCxDQUFpQkUsS0FBckM7QUFDQTs7QUFDSixXQUFLM0IsRUFBRSxDQUFDbUIsS0FBSCxDQUFTQyxHQUFULENBQWFRLEVBQWxCO0FBQ0EsV0FBSzVCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhUyxDQUFsQjtBQUNJTixRQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxRQUFWLEVBQW9CRCxJQUFJLENBQUNFLFdBQUwsQ0FBaUJHLEVBQXJDO0FBQ0E7O0FBQ0osV0FBSzVCLEVBQUUsQ0FBQ21CLEtBQUgsQ0FBU0MsR0FBVCxDQUFhVSxJQUFsQjtBQUNBLFdBQUs5QixFQUFFLENBQUNtQixLQUFILENBQVNDLEdBQVQsQ0FBYVcsQ0FBbEI7QUFDSVIsUUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsUUFBVixFQUFvQkQsSUFBSSxDQUFDRSxXQUFMLENBQWlCSyxJQUFyQztBQUNBOztBQUNKLFdBQUs5QixFQUFFLENBQUNtQixLQUFILENBQVNDLEdBQVQsQ0FBYVksQ0FBbEI7QUFDSVQsUUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsUUFBVixFQUFvQkQsSUFBSSxDQUFDRSxXQUFMLENBQWlCUSxPQUFyQztBQUNBO0FBbkJSO0FBcUJILEdBNURJO0FBNkRMQyxFQUFBQSxLQTdESyxtQkE2REcsQ0FDUDtBQTlESSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICB9LFxyXG4gICAgb25FbmFibGUoKSB7XHJcbiAgICAgICAgY2Muc3lzdGVtRXZlbnQub24oY2MuU3lzdGVtRXZlbnQuRXZlbnRUeXBlLktFWV9ET1dOLCB0aGlzLm9uS2V5RG93biwgdGhpcyk7XHJcbiAgICAgICAgY2Muc3lzdGVtRXZlbnQub24oY2MuU3lzdGVtRXZlbnQuRXZlbnRUeXBlLktFWV9VUCwgdGhpcy5vbktleVVwLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBvbkRpc2FibGUoKSB7XHJcbiAgICAgICAgY2Muc3lzdGVtRXZlbnQub2ZmKGNjLlN5c3RlbUV2ZW50LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpO1xyXG4gICAgICAgIGNjLnN5c3RlbUV2ZW50Lm9mZihjYy5TeXN0ZW1FdmVudC5FdmVudFR5cGUuS0VZX1VQLCB0aGlzLm9uS2V5VXAsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIG9uS2V5RG93bihldmVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS5hOlxyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS5sZWZ0OlxyXG4gICAgICAgICAgICAgICAgZ2FtZS5lbWl0KFwia2V5X2Rvd25cIiwgZ2FtZS5nYW1lQ29udHJvbC5sZWZ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS5kOlxyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS5yaWdodDpcclxuICAgICAgICAgICAgICAgIGdhbWUuZW1pdChcImtleV9kb3duXCIsIGdhbWUuZ2FtZUNvbnRyb2wucmlnaHQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY2MubWFjcm8uS0VZLnVwOlxyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS53OlxyXG4gICAgICAgICAgICAgICAgZ2FtZS5lbWl0KFwia2V5X2Rvd25cIiwgZ2FtZS5nYW1lQ29udHJvbC51cCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkuZG93bjpcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkuczpcclxuICAgICAgICAgICAgICAgIGdhbWUuZW1pdChcImtleV9kb3duXCIsIGdhbWUuZ2FtZUNvbnRyb2wuZG93bik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkuZTpcclxuICAgICAgICAgICAgICAgIGdhbWUuZW1pdChcImtleV9kb3duXCIsIGdhbWUuZ2FtZUNvbnRyb2wud2VhcG9ucyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25LZXlVcChldmVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS5hOlxyXG4gICAgICAgICAgICBjYXNlIGNjLm1hY3JvLktFWS5sZWZ0OlxyXG4gICAgICAgICAgICAgICAgZ2FtZS5lbWl0KFwia2V5X3VwXCIsIGdhbWUuZ2FtZUNvbnRyb2wubGVmdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkuZDpcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkucmlnaHQ6XHJcbiAgICAgICAgICAgICAgICBnYW1lLmVtaXQoXCJrZXlfdXBcIiwgZ2FtZS5nYW1lQ29udHJvbC5yaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkudXA6XHJcbiAgICAgICAgICAgIGNhc2UgY2MubWFjcm8uS0VZLnc6XHJcbiAgICAgICAgICAgICAgICBnYW1lLmVtaXQoXCJrZXlfdXBcIiwgZ2FtZS5nYW1lQ29udHJvbC51cCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkuZG93bjpcclxuICAgICAgICAgICAgY2FzZSBjYy5tYWNyby5LRVkuczpcclxuICAgICAgICAgICAgICAgIGdhbWUuZW1pdChcImtleV91cFwiLCBnYW1lLmdhbWVDb250cm9sLmRvd24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY2MubWFjcm8uS0VZLmU6XHJcbiAgICAgICAgICAgICAgICBnYW1lLmVtaXQoXCJrZXlfdXBcIiwgZ2FtZS5nYW1lQ29udHJvbC53ZWFwb25zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/config/binConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'beafcHk+aFLWKsDfjWhDTVF', 'binConfig');
// Script/config/binConfig.js

"use strict";

module.exports = {
  "junguan": {
    hp: 300,
    attack: 40,
    findX: 40
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb25maWdcXGJpbkNvbmZpZy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaHAiLCJhdHRhY2siLCJmaW5kWCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsYUFBVztBQUNQQyxJQUFBQSxFQUFFLEVBQUUsR0FERztBQUVQQyxJQUFBQSxNQUFNLEVBQUUsRUFGRDtBQUdQQyxJQUFBQSxLQUFLLEVBQUU7QUFIQTtBQURFLENBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIFwianVuZ3VhblwiOiB7XHJcbiAgICAgICAgaHA6IDMwMCxcclxuICAgICAgICBhdHRhY2s6IDQwLFxyXG4gICAgICAgIGZpbmRYOiA0MFxyXG4gICAgfVxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/hua.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9caccE8s4VKs6or46aoiP8o', 'hua');
// Script/core/hua.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    huaValue: 100,
    huaLevel: 1
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    this.updateHua();
  },
  setHua: function setHua(value) {
    this.huaValue = value;
    this.updateHua();
  },
  updateHua: function updateHua() {
    var hueValue = Math.PI * 2 * this.huaValue / 255;
    var mat = this.hueMatrix(hueValue);
    var red = cc.v4(mat[0][0], mat[0][1], mat[0][2], 1);
    var green = cc.v4(mat[1][0], mat[1][1], mat[1][2], 1);
    var blue = cc.v4(mat[2][0], mat[2][1], mat[2][2], 1);
    var renderComponents = this.node.getComponents(cc.RenderComponent);
    var renderComponent = renderComponents[0];
    var material = renderComponent.getMaterial(0);
    var isLua = material.name.indexOf("hua") >= 0;

    if (isLua) {
      material.setProperty("red", red);
      material.setProperty("green", green);
      material.setProperty("blue", blue);
      material.setProperty("huaLevel", this.huaLevel);
    }
  },
  xRotateMat: function xRotateMat(mat, rs, rc) {
    mat[0][0] = 1.0;
    mat[0][1] = 0.0;
    mat[0][2] = 0.0;
    mat[1][0] = 0.0;
    mat[1][1] = rc;
    mat[1][2] = rs;
    mat[2][0] = 0.0;
    mat[2][1] = -rs;
    mat[2][2] = rc;
  },
  yRotateMat: function yRotateMat(mat, rs, rc) {
    mat[0][0] = rc;
    mat[0][1] = 0.0;
    mat[0][2] = -rs;
    mat[1][0] = 0.0;
    mat[1][1] = 1.0;
    mat[1][2] = 0.0;
    mat[2][0] = rs;
    mat[2][1] = 0.0;
    mat[2][2] = rc;
  },
  zRotateMat: function zRotateMat(mat, rs, rc) {
    mat[0][0] = rc;
    mat[0][1] = rs;
    mat[0][2] = 0.0;
    mat[1][0] = -rs;
    mat[1][1] = rc;
    mat[1][2] = 0.0;
    mat[2][0] = 0.0;
    mat[2][1] = 0.0;
    mat[2][2] = 1.0;
  },
  matrixMult: function matrixMult(a, b, c) {
    var x, y;
    var temp = [];

    for (y = 0; y < 3; y++) {
      temp[y] = [];

      for (x = 0; x < 3; x++) {
        temp[y][x] = b[y][0] * a[0][x] + b[y][1] * a[1][x] + b[y][2] * a[2][x];
      }
    }

    for (y = 0; y < 3; y++) {
      for (x = 0; x < 3; x++) {
        c[y][x] = temp[y][x];
      }
    }
  },
  mat1000: function mat1000(mat) {
    for (var i = 0; i < mat.length; i++) {
      for (var j = 0; j < mat[i].length; j++) {
        var temp = mat[i][j];
        mat[i][j] = temp * 1000;
      }
    }
  },
  //色调矩阵
  hueMatrix: function hueMatrix(hue) {
    var mat = [];
    mat[0] = [];
    mat[1] = [];
    mat[2] = [];
    var rot = [];
    rot[0] = [];
    rot[1] = [];
    rot[2] = [];
    var seq2 = Math.sqrt(2);
    var seq3 = Math.sqrt(3);
    var mag, xrs, xrc, yrs, yrc, zrs, zrc;
    mag = seq2;
    xrs = 1.0 / mag;
    xrc = 1.0 / mag;
    this.xRotateMat(mat, xrs, xrc);
    mag = seq3;
    yrs = -1.0 / mag;
    yrc = seq2 / mag;
    this.yRotateMat(rot, yrs, yrc);
    this.matrixMult(rot, mat, mat);
    zrs = Math.sin(hue);
    zrc = Math.cos(hue);
    this.zRotateMat(rot, zrs, zrc);
    this.matrixMult(rot, mat, mat);
    this.yRotateMat(rot, -yrs, yrc);
    this.matrixMult(rot, mat, mat);
    this.xRotateMat(rot, -xrs, xrc);
    this.matrixMult(rot, mat, mat);
    return mat;
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxodWEuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJodWFWYWx1ZSIsImh1YUxldmVsIiwib25EZXN0cm95Iiwib25Mb2FkIiwidXBkYXRlSHVhIiwic2V0SHVhIiwidmFsdWUiLCJodWVWYWx1ZSIsIk1hdGgiLCJQSSIsIm1hdCIsImh1ZU1hdHJpeCIsInJlZCIsInY0IiwiZ3JlZW4iLCJibHVlIiwicmVuZGVyQ29tcG9uZW50cyIsIm5vZGUiLCJnZXRDb21wb25lbnRzIiwiUmVuZGVyQ29tcG9uZW50IiwicmVuZGVyQ29tcG9uZW50IiwibWF0ZXJpYWwiLCJnZXRNYXRlcmlhbCIsImlzTHVhIiwibmFtZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsInhSb3RhdGVNYXQiLCJycyIsInJjIiwieVJvdGF0ZU1hdCIsInpSb3RhdGVNYXQiLCJtYXRyaXhNdWx0IiwiYSIsImIiLCJjIiwieCIsInkiLCJ0ZW1wIiwibWF0MTAwMCIsImkiLCJsZW5ndGgiLCJqIiwiaHVlIiwicm90Iiwic2VxMiIsInNxcnQiLCJzZXEzIiwibWFnIiwieHJzIiwieHJjIiwieXJzIiwieXJjIiwienJzIiwienJjIiwic2luIiwiY29zIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxRQUFRLEVBQUUsR0FERjtBQUVSQyxJQUFBQSxRQUFRLEVBQUU7QUFGRixHQUZQO0FBTUxDLEVBQUFBLFNBTkssdUJBTU8sQ0FDWCxDQVBJO0FBUUxDLEVBQUFBLE1BUkssb0JBUUk7QUFDTCxTQUFLQyxTQUFMO0FBQ0gsR0FWSTtBQVdMQyxFQUFBQSxNQVhLLGtCQVdFQyxLQVhGLEVBV1M7QUFDVixTQUFLTixRQUFMLEdBQWdCTSxLQUFoQjtBQUNBLFNBQUtGLFNBQUw7QUFDSCxHQWRJO0FBZUxBLEVBQUFBLFNBZkssdUJBZU87QUFDUixRQUFJRyxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxHQUFVLENBQVYsR0FBYyxLQUFLVCxRQUFuQixHQUE4QixHQUE3QztBQUNBLFFBQUlVLEdBQUcsR0FBRyxLQUFLQyxTQUFMLENBQWVKLFFBQWYsQ0FBVjtBQUNBLFFBQUlLLEdBQUcsR0FBR2hCLEVBQUUsQ0FBQ2lCLEVBQUgsQ0FBTUgsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsQ0FBTixFQUFpQkEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsQ0FBakIsRUFBNEJBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLENBQTVCLEVBQXVDLENBQXZDLENBQVY7QUFDQSxRQUFJSSxLQUFLLEdBQUdsQixFQUFFLENBQUNpQixFQUFILENBQU1ILEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLENBQU4sRUFBaUJBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLENBQWpCLEVBQTRCQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxDQUE1QixFQUF1QyxDQUF2QyxDQUFaO0FBQ0EsUUFBSUssSUFBSSxHQUFHbkIsRUFBRSxDQUFDaUIsRUFBSCxDQUFNSCxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxDQUFOLEVBQWlCQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxDQUFqQixFQUE0QkEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsQ0FBNUIsRUFBdUMsQ0FBdkMsQ0FBWDtBQUNBLFFBQUlNLGdCQUFnQixHQUFHLEtBQUtDLElBQUwsQ0FBVUMsYUFBVixDQUF3QnRCLEVBQUUsQ0FBQ3VCLGVBQTNCLENBQXZCO0FBQ0EsUUFBSUMsZUFBZSxHQUFHSixnQkFBZ0IsQ0FBQyxDQUFELENBQXRDO0FBQ0EsUUFBSUssUUFBUSxHQUFHRCxlQUFlLENBQUNFLFdBQWhCLENBQTRCLENBQTVCLENBQWY7QUFDQSxRQUFJQyxLQUFLLEdBQUlGLFFBQVEsQ0FBQ0csSUFBVCxDQUFjQyxPQUFkLENBQXNCLEtBQXRCLEtBQWdDLENBQTdDOztBQUNBLFFBQUlGLEtBQUosRUFBVztBQUNQRixNQUFBQSxRQUFRLENBQUNLLFdBQVQsQ0FBcUIsS0FBckIsRUFBNEJkLEdBQTVCO0FBQ0FTLE1BQUFBLFFBQVEsQ0FBQ0ssV0FBVCxDQUFxQixPQUFyQixFQUE4QlosS0FBOUI7QUFDQU8sTUFBQUEsUUFBUSxDQUFDSyxXQUFULENBQXFCLE1BQXJCLEVBQTZCWCxJQUE3QjtBQUNBTSxNQUFBQSxRQUFRLENBQUNLLFdBQVQsQ0FBcUIsVUFBckIsRUFBaUMsS0FBS3pCLFFBQXRDO0FBQ0g7QUFDSixHQS9CSTtBQWdDTDBCLEVBQUFBLFVBQVUsRUFBRSxvQkFBVWpCLEdBQVYsRUFBZWtCLEVBQWYsRUFBbUJDLEVBQW5CLEVBQXVCO0FBQy9CbkIsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxHQUFaO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVksR0FBWjtBQUNBQSxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZLEdBQVo7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxHQUFaO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVltQixFQUFaO0FBQ0FuQixJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZa0IsRUFBWjtBQUNBbEIsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxHQUFaO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVksQ0FBQ2tCLEVBQWI7QUFDQWxCLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVltQixFQUFaO0FBQ0gsR0ExQ0k7QUEyQ0xDLEVBQUFBLFVBQVUsRUFBRSxvQkFBVXBCLEdBQVYsRUFBZWtCLEVBQWYsRUFBbUJDLEVBQW5CLEVBQXVCO0FBQy9CbkIsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWW1CLEVBQVo7QUFDQW5CLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVksR0FBWjtBQUNBQSxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZLENBQUNrQixFQUFiO0FBQ0FsQixJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZLEdBQVo7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxHQUFaO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVksR0FBWjtBQUNBQSxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZa0IsRUFBWjtBQUNBbEIsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxHQUFaO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVltQixFQUFaO0FBQ0gsR0FyREk7QUFzRExFLEVBQUFBLFVBQVUsRUFBRSxvQkFBVXJCLEdBQVYsRUFBZWtCLEVBQWYsRUFBbUJDLEVBQW5CLEVBQXVCO0FBQy9CbkIsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWW1CLEVBQVo7QUFDQW5CLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVlrQixFQUFaO0FBQ0FsQixJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZLEdBQVo7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxDQUFDa0IsRUFBYjtBQUNBbEIsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWW1CLEVBQVo7QUFDQW5CLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVksR0FBWjtBQUNBQSxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU8sQ0FBUCxJQUFZLEdBQVo7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLENBQVAsSUFBWSxHQUFaO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTyxDQUFQLElBQVksR0FBWjtBQUNILEdBaEVJO0FBaUVMc0IsRUFBQUEsVUFBVSxFQUFFLG9CQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0JDLENBQWhCLEVBQW1CO0FBQzNCLFFBQUlDLENBQUosRUFBT0MsQ0FBUDtBQUNBLFFBQUlDLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUtELENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRyxDQUFoQixFQUFtQkEsQ0FBQyxFQUFwQixFQUF3QjtBQUNwQkMsTUFBQUEsSUFBSSxDQUFDRCxDQUFELENBQUosR0FBVSxFQUFWOztBQUNBLFdBQUtELENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRyxDQUFoQixFQUFtQkEsQ0FBQyxFQUFwQixFQUF3QjtBQUNwQkUsUUFBQUEsSUFBSSxDQUFDRCxDQUFELENBQUosQ0FBUUQsQ0FBUixJQUFhRixDQUFDLENBQUNHLENBQUQsQ0FBRCxDQUFLLENBQUwsSUFBVUosQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLRyxDQUFMLENBQVYsR0FBb0JGLENBQUMsQ0FBQ0csQ0FBRCxDQUFELENBQUssQ0FBTCxJQUFVSixDQUFDLENBQUMsQ0FBRCxDQUFELENBQUtHLENBQUwsQ0FBOUIsR0FBd0NGLENBQUMsQ0FBQ0csQ0FBRCxDQUFELENBQUssQ0FBTCxJQUFVSixDQUFDLENBQUMsQ0FBRCxDQUFELENBQUtHLENBQUwsQ0FBL0Q7QUFDSDtBQUNKOztBQUNELFNBQUtDLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRyxDQUFoQixFQUFtQkEsQ0FBQyxFQUFwQixFQUF3QjtBQUNwQixXQUFLRCxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUcsQ0FBaEIsRUFBbUJBLENBQUMsRUFBcEIsRUFBd0I7QUFDcEJELFFBQUFBLENBQUMsQ0FBQ0UsQ0FBRCxDQUFELENBQUtELENBQUwsSUFBVUUsSUFBSSxDQUFDRCxDQUFELENBQUosQ0FBUUQsQ0FBUixDQUFWO0FBQ0g7QUFDSjtBQUNKLEdBL0VJO0FBZ0ZMRyxFQUFBQSxPQUFPLEVBQUUsaUJBQVU3QixHQUFWLEVBQWU7QUFDcEIsU0FBSyxJQUFJOEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzlCLEdBQUcsQ0FBQytCLE1BQXhCLEVBQWdDRCxDQUFDLEVBQWpDLEVBQXFDO0FBQ2pDLFdBQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2hDLEdBQUcsQ0FBQzhCLENBQUQsQ0FBSCxDQUFPQyxNQUEzQixFQUFtQ0MsQ0FBQyxFQUFwQyxFQUF3QztBQUNwQyxZQUFJSixJQUFJLEdBQUc1QixHQUFHLENBQUM4QixDQUFELENBQUgsQ0FBT0UsQ0FBUCxDQUFYO0FBQ0FoQyxRQUFBQSxHQUFHLENBQUM4QixDQUFELENBQUgsQ0FBT0UsQ0FBUCxJQUFZSixJQUFJLEdBQUcsSUFBbkI7QUFDSDtBQUNKO0FBQ0osR0F2Rkk7QUF3Rkw7QUFDQTNCLEVBQUFBLFNBQVMsRUFBRSxtQkFBVWdDLEdBQVYsRUFBZTtBQUN0QixRQUFJakMsR0FBRyxHQUFHLEVBQVY7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLEVBQVQ7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLEVBQVQ7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLEVBQVQ7QUFDQSxRQUFJa0MsR0FBRyxHQUFHLEVBQVY7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLEVBQVQ7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLEVBQVQ7QUFDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLEVBQVQ7QUFDQSxRQUFJQyxJQUFJLEdBQUdyQyxJQUFJLENBQUNzQyxJQUFMLENBQVUsQ0FBVixDQUFYO0FBQ0EsUUFBSUMsSUFBSSxHQUFHdkMsSUFBSSxDQUFDc0MsSUFBTCxDQUFVLENBQVYsQ0FBWDtBQUNBLFFBQUlFLEdBQUosRUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CQyxHQUFuQixFQUF3QkMsR0FBeEIsRUFBNkJDLEdBQTdCLEVBQWtDQyxHQUFsQztBQUNBTixJQUFBQSxHQUFHLEdBQUdILElBQU47QUFDQUksSUFBQUEsR0FBRyxHQUFHLE1BQU1ELEdBQVo7QUFDQUUsSUFBQUEsR0FBRyxHQUFHLE1BQU1GLEdBQVo7QUFDQSxTQUFLckIsVUFBTCxDQUFnQmpCLEdBQWhCLEVBQXFCdUMsR0FBckIsRUFBMEJDLEdBQTFCO0FBQ0FGLElBQUFBLEdBQUcsR0FBR0QsSUFBTjtBQUNBSSxJQUFBQSxHQUFHLEdBQUcsQ0FBQyxHQUFELEdBQU9ILEdBQWI7QUFDQUksSUFBQUEsR0FBRyxHQUFHUCxJQUFJLEdBQUdHLEdBQWI7QUFDQSxTQUFLbEIsVUFBTCxDQUFnQmMsR0FBaEIsRUFBcUJPLEdBQXJCLEVBQTBCQyxHQUExQjtBQUNBLFNBQUtwQixVQUFMLENBQWdCWSxHQUFoQixFQUFxQmxDLEdBQXJCLEVBQTBCQSxHQUExQjtBQUNBMkMsSUFBQUEsR0FBRyxHQUFHN0MsSUFBSSxDQUFDK0MsR0FBTCxDQUFTWixHQUFULENBQU47QUFDQVcsSUFBQUEsR0FBRyxHQUFHOUMsSUFBSSxDQUFDZ0QsR0FBTCxDQUFTYixHQUFULENBQU47QUFDQSxTQUFLWixVQUFMLENBQWdCYSxHQUFoQixFQUFxQlMsR0FBckIsRUFBMEJDLEdBQTFCO0FBQ0EsU0FBS3RCLFVBQUwsQ0FBZ0JZLEdBQWhCLEVBQXFCbEMsR0FBckIsRUFBMEJBLEdBQTFCO0FBQ0EsU0FBS29CLFVBQUwsQ0FBZ0JjLEdBQWhCLEVBQXFCLENBQUNPLEdBQXRCLEVBQTJCQyxHQUEzQjtBQUNBLFNBQUtwQixVQUFMLENBQWdCWSxHQUFoQixFQUFxQmxDLEdBQXJCLEVBQTBCQSxHQUExQjtBQUNBLFNBQUtpQixVQUFMLENBQWdCaUIsR0FBaEIsRUFBcUIsQ0FBQ0ssR0FBdEIsRUFBMkJDLEdBQTNCO0FBQ0EsU0FBS2xCLFVBQUwsQ0FBZ0JZLEdBQWhCLEVBQXFCbEMsR0FBckIsRUFBMEJBLEdBQTFCO0FBQ0EsV0FBT0EsR0FBUDtBQUNILEdBdkhJO0FBd0hMK0MsRUFBQUEsS0F4SEssbUJBd0hHLENBQ1AsQ0F6SEksQ0EwSFQ7O0FBMUhTLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBodWFWYWx1ZTogMTAwLFxyXG4gICAgICAgIGh1YUxldmVsOiAxXHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUh1YSgpO1xyXG4gICAgfSxcclxuICAgIHNldEh1YSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuaHVhVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUh1YSgpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZUh1YSgpIHtcclxuICAgICAgICBsZXQgaHVlVmFsdWUgPSBNYXRoLlBJICogMiAqIHRoaXMuaHVhVmFsdWUgLyAyNTU7XHJcbiAgICAgICAgbGV0IG1hdCA9IHRoaXMuaHVlTWF0cml4KGh1ZVZhbHVlKTtcclxuICAgICAgICBsZXQgcmVkID0gY2MudjQobWF0WzBdWzBdLCBtYXRbMF1bMV0sIG1hdFswXVsyXSwgMSk7XHJcbiAgICAgICAgbGV0IGdyZWVuID0gY2MudjQobWF0WzFdWzBdLCBtYXRbMV1bMV0sIG1hdFsxXVsyXSwgMSk7XHJcbiAgICAgICAgbGV0IGJsdWUgPSBjYy52NChtYXRbMl1bMF0sIG1hdFsyXVsxXSwgbWF0WzJdWzJdLCAxKTtcclxuICAgICAgICBsZXQgcmVuZGVyQ29tcG9uZW50cyA9IHRoaXMubm9kZS5nZXRDb21wb25lbnRzKGNjLlJlbmRlckNvbXBvbmVudCk7XHJcbiAgICAgICAgbGV0IHJlbmRlckNvbXBvbmVudCA9IHJlbmRlckNvbXBvbmVudHNbMF07XHJcbiAgICAgICAgbGV0IG1hdGVyaWFsID0gcmVuZGVyQ29tcG9uZW50LmdldE1hdGVyaWFsKDApO1xyXG4gICAgICAgIGxldCBpc0x1YSA9IChtYXRlcmlhbC5uYW1lLmluZGV4T2YoXCJodWFcIikgPj0gMClcclxuICAgICAgICBpZiAoaXNMdWEpIHtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoXCJyZWRcIiwgcmVkKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoXCJncmVlblwiLCBncmVlbik7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnNldFByb3BlcnR5KFwiYmx1ZVwiLCBibHVlKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoXCJodWFMZXZlbFwiLCB0aGlzLmh1YUxldmVsKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgeFJvdGF0ZU1hdDogZnVuY3Rpb24gKG1hdCwgcnMsIHJjKSB7XHJcbiAgICAgICAgbWF0WzBdWzBdID0gMS4wO1xyXG4gICAgICAgIG1hdFswXVsxXSA9IDAuMDtcclxuICAgICAgICBtYXRbMF1bMl0gPSAwLjA7XHJcbiAgICAgICAgbWF0WzFdWzBdID0gMC4wO1xyXG4gICAgICAgIG1hdFsxXVsxXSA9IHJjO1xyXG4gICAgICAgIG1hdFsxXVsyXSA9IHJzO1xyXG4gICAgICAgIG1hdFsyXVswXSA9IDAuMDtcclxuICAgICAgICBtYXRbMl1bMV0gPSAtcnM7XHJcbiAgICAgICAgbWF0WzJdWzJdID0gcmM7XHJcbiAgICB9LFxyXG4gICAgeVJvdGF0ZU1hdDogZnVuY3Rpb24gKG1hdCwgcnMsIHJjKSB7XHJcbiAgICAgICAgbWF0WzBdWzBdID0gcmM7XHJcbiAgICAgICAgbWF0WzBdWzFdID0gMC4wO1xyXG4gICAgICAgIG1hdFswXVsyXSA9IC1ycztcclxuICAgICAgICBtYXRbMV1bMF0gPSAwLjA7XHJcbiAgICAgICAgbWF0WzFdWzFdID0gMS4wO1xyXG4gICAgICAgIG1hdFsxXVsyXSA9IDAuMDtcclxuICAgICAgICBtYXRbMl1bMF0gPSBycztcclxuICAgICAgICBtYXRbMl1bMV0gPSAwLjA7XHJcbiAgICAgICAgbWF0WzJdWzJdID0gcmM7XHJcbiAgICB9LFxyXG4gICAgelJvdGF0ZU1hdDogZnVuY3Rpb24gKG1hdCwgcnMsIHJjKSB7XHJcbiAgICAgICAgbWF0WzBdWzBdID0gcmM7XHJcbiAgICAgICAgbWF0WzBdWzFdID0gcnM7XHJcbiAgICAgICAgbWF0WzBdWzJdID0gMC4wO1xyXG4gICAgICAgIG1hdFsxXVswXSA9IC1ycztcclxuICAgICAgICBtYXRbMV1bMV0gPSByYztcclxuICAgICAgICBtYXRbMV1bMl0gPSAwLjA7XHJcbiAgICAgICAgbWF0WzJdWzBdID0gMC4wO1xyXG4gICAgICAgIG1hdFsyXVsxXSA9IDAuMDtcclxuICAgICAgICBtYXRbMl1bMl0gPSAxLjA7XHJcbiAgICB9LFxyXG4gICAgbWF0cml4TXVsdDogZnVuY3Rpb24gKGEsIGIsIGMpIHtcclxuICAgICAgICB2YXIgeCwgeTtcclxuICAgICAgICB2YXIgdGVtcCA9IFtdO1xyXG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCAzOyB5KyspIHtcclxuICAgICAgICAgICAgdGVtcFt5XSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgMzsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wW3ldW3hdID0gYlt5XVswXSAqIGFbMF1beF0gKyBiW3ldWzFdICogYVsxXVt4XSArIGJbeV1bMl0gKiBhWzJdW3hdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCAzOyB5KyspIHtcclxuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IDM7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgY1t5XVt4XSA9IHRlbXBbeV1beF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWF0MTAwMDogZnVuY3Rpb24gKG1hdCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF0W2ldLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IG1hdFtpXVtqXTtcclxuICAgICAgICAgICAgICAgIG1hdFtpXVtqXSA9IHRlbXAgKiAxMDAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v6Imy6LCD55+p6Zi1XHJcbiAgICBodWVNYXRyaXg6IGZ1bmN0aW9uIChodWUpIHtcclxuICAgICAgICB2YXIgbWF0ID0gW107XHJcbiAgICAgICAgbWF0WzBdID0gW107XHJcbiAgICAgICAgbWF0WzFdID0gW107XHJcbiAgICAgICAgbWF0WzJdID0gW107XHJcbiAgICAgICAgdmFyIHJvdCA9IFtdO1xyXG4gICAgICAgIHJvdFswXSA9IFtdO1xyXG4gICAgICAgIHJvdFsxXSA9IFtdO1xyXG4gICAgICAgIHJvdFsyXSA9IFtdO1xyXG4gICAgICAgIHZhciBzZXEyID0gTWF0aC5zcXJ0KDIpO1xyXG4gICAgICAgIHZhciBzZXEzID0gTWF0aC5zcXJ0KDMpO1xyXG4gICAgICAgIHZhciBtYWcsIHhycywgeHJjLCB5cnMsIHlyYywgenJzLCB6cmM7XHJcbiAgICAgICAgbWFnID0gc2VxMjtcclxuICAgICAgICB4cnMgPSAxLjAgLyBtYWc7XHJcbiAgICAgICAgeHJjID0gMS4wIC8gbWFnO1xyXG4gICAgICAgIHRoaXMueFJvdGF0ZU1hdChtYXQsIHhycywgeHJjKTtcclxuICAgICAgICBtYWcgPSBzZXEzO1xyXG4gICAgICAgIHlycyA9IC0xLjAgLyBtYWc7XHJcbiAgICAgICAgeXJjID0gc2VxMiAvIG1hZztcclxuICAgICAgICB0aGlzLnlSb3RhdGVNYXQocm90LCB5cnMsIHlyYyk7XHJcbiAgICAgICAgdGhpcy5tYXRyaXhNdWx0KHJvdCwgbWF0LCBtYXQpO1xyXG4gICAgICAgIHpycyA9IE1hdGguc2luKGh1ZSk7XHJcbiAgICAgICAgenJjID0gTWF0aC5jb3MoaHVlKTtcclxuICAgICAgICB0aGlzLnpSb3RhdGVNYXQocm90LCB6cnMsIHpyYyk7XHJcbiAgICAgICAgdGhpcy5tYXRyaXhNdWx0KHJvdCwgbWF0LCBtYXQpO1xyXG4gICAgICAgIHRoaXMueVJvdGF0ZU1hdChyb3QsIC15cnMsIHlyYyk7XHJcbiAgICAgICAgdGhpcy5tYXRyaXhNdWx0KHJvdCwgbWF0LCBtYXQpO1xyXG4gICAgICAgIHRoaXMueFJvdGF0ZU1hdChyb3QsIC14cnMsIHhyYyk7XHJcbiAgICAgICAgdGhpcy5tYXRyaXhNdWx0KHJvdCwgbWF0LCBtYXQpO1xyXG4gICAgICAgIHJldHVybiBtYXQ7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4vLyB1cGRhdGUgKGR0KSB7fSxcclxufSlcclxuO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/touchStage.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3c1555LOtlIWJpD/YBmMkdZ', 'touchStage');
// Script/control/touchStage.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    canvas: cc.Node
  },
  onLoad: function onLoad() {
    game.touchDown = false;
    this.node.on(cc.Node.EventType.TOUCH_START, this.on_touch_start, this);
    this.node.on(cc.Node.EventType.TOUCH_END, this.on_touch_end, this);

    if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS) {
      //ANDROID IOS
      this.node.on(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move, this);
    } else {
      this.node.on(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move, this); //this.node.on(cc.Node.EventType.MOUSE_MOVE, this.on_mouse_move, this);
    }

    this.touchPos = cc.v2();
  },
  onDestroy: function onDestroy() {
    this.node.off(cc.Node.EventType.TOUCH_START, this.on_touch_start, this);
    this.node.off(cc.Node.EventType.TOUCH_END, this.on_touch_end, this);

    if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS) {
      //ANDROID IOS
      this.node.off(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move, this);
    } else {
      this.node.off(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move, this); //this.node.off(cc.Node.EventType.MOUSE_MOVE, this.on_mouse_move, this);
    }
  },
  //屏幕按下
  on_touch_start: function on_touch_start(touch) {
    var pos = touch.getLocation();
    var pos1 = this.node.convertToNodeSpaceAR(pos);
    this.touchPos.x = pos1.x + this.canvas.x;
    this.touchPos.y = pos1.y + this.canvas.y;
    game.emit("stage.touch", this.touchPos);
    game.touchDown = true;
  },
  on_touch_end: function on_touch_end(touch) {
    game.touchDown = false;
  },
  on_mouse_move: function on_mouse_move(touch) {
    var pos = touch.getLocation();
    var pos1 = this.node.convertToNodeSpaceAR(pos);
    this.touchPos.x = pos1.x + this.canvas.x;
    this.touchPos.y = pos1.y + this.canvas.y;
    game.emit("stage.touch", this.touchPos);
  },
  on_touch_move: function on_touch_move(touch) {
    var pos = touch.getLocation();
    var pos1 = this.node.convertToNodeSpaceAR(pos);
    this.touchPos.x = pos1.x + this.canvas.x;
    this.touchPos.y = pos1.y + this.canvas.y;
    game.emit("stage.touch", this.touchPos);
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb250cm9sXFx0b3VjaFN0YWdlLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiY2FudmFzIiwiTm9kZSIsIm9uTG9hZCIsImdhbWUiLCJ0b3VjaERvd24iLCJub2RlIiwib24iLCJFdmVudFR5cGUiLCJUT1VDSF9TVEFSVCIsIm9uX3RvdWNoX3N0YXJ0IiwiVE9VQ0hfRU5EIiwib25fdG91Y2hfZW5kIiwic3lzIiwib3MiLCJPU19BTkRST0lEIiwiT1NfSU9TIiwiVE9VQ0hfTU9WRSIsIm9uX3RvdWNoX21vdmUiLCJ0b3VjaFBvcyIsInYyIiwib25EZXN0cm95Iiwib2ZmIiwidG91Y2giLCJwb3MiLCJnZXRMb2NhdGlvbiIsInBvczEiLCJjb252ZXJ0VG9Ob2RlU3BhY2VBUiIsIngiLCJ5IiwiZW1pdCIsIm9uX21vdXNlX21vdmUiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLE1BQU0sRUFBRUosRUFBRSxDQUFDSztBQURILEdBRlA7QUFLTEMsRUFBQUEsTUFMSyxvQkFLSTtBQUNMQyxJQUFBQSxJQUFJLENBQUNDLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxTQUFLQyxJQUFMLENBQVVDLEVBQVYsQ0FBYVYsRUFBRSxDQUFDSyxJQUFILENBQVFNLFNBQVIsQ0FBa0JDLFdBQS9CLEVBQTRDLEtBQUtDLGNBQWpELEVBQWlFLElBQWpFO0FBQ0EsU0FBS0osSUFBTCxDQUFVQyxFQUFWLENBQWFWLEVBQUUsQ0FBQ0ssSUFBSCxDQUFRTSxTQUFSLENBQWtCRyxTQUEvQixFQUEwQyxLQUFLQyxZQUEvQyxFQUE2RCxJQUE3RDs7QUFDQSxRQUFJZixFQUFFLENBQUNnQixHQUFILENBQU9DLEVBQVAsSUFBYWpCLEVBQUUsQ0FBQ2dCLEdBQUgsQ0FBT0UsVUFBcEIsSUFBa0NsQixFQUFFLENBQUNnQixHQUFILENBQU9DLEVBQVAsSUFBYWpCLEVBQUUsQ0FBQ2dCLEdBQUgsQ0FBT0csTUFBMUQsRUFBa0U7QUFBRTtBQUNoRSxXQUFLVixJQUFMLENBQVVDLEVBQVYsQ0FBYVYsRUFBRSxDQUFDSyxJQUFILENBQVFNLFNBQVIsQ0FBa0JTLFVBQS9CLEVBQTJDLEtBQUtDLGFBQWhELEVBQStELElBQS9EO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsV0FBS1osSUFBTCxDQUFVQyxFQUFWLENBQWFWLEVBQUUsQ0FBQ0ssSUFBSCxDQUFRTSxTQUFSLENBQWtCUyxVQUEvQixFQUEyQyxLQUFLQyxhQUFoRCxFQUErRCxJQUEvRCxFQURHLENBRUg7QUFDSDs7QUFDRCxTQUFLQyxRQUFMLEdBQWdCdEIsRUFBRSxDQUFDdUIsRUFBSCxFQUFoQjtBQUNILEdBaEJJO0FBaUJMQyxFQUFBQSxTQWpCSyx1QkFpQk87QUFDUixTQUFLZixJQUFMLENBQVVnQixHQUFWLENBQWN6QixFQUFFLENBQUNLLElBQUgsQ0FBUU0sU0FBUixDQUFrQkMsV0FBaEMsRUFBNkMsS0FBS0MsY0FBbEQsRUFBa0UsSUFBbEU7QUFDQSxTQUFLSixJQUFMLENBQVVnQixHQUFWLENBQWN6QixFQUFFLENBQUNLLElBQUgsQ0FBUU0sU0FBUixDQUFrQkcsU0FBaEMsRUFBMkMsS0FBS0MsWUFBaEQsRUFBOEQsSUFBOUQ7O0FBQ0EsUUFBSWYsRUFBRSxDQUFDZ0IsR0FBSCxDQUFPQyxFQUFQLElBQWFqQixFQUFFLENBQUNnQixHQUFILENBQU9FLFVBQXBCLElBQWtDbEIsRUFBRSxDQUFDZ0IsR0FBSCxDQUFPQyxFQUFQLElBQWFqQixFQUFFLENBQUNnQixHQUFILENBQU9HLE1BQTFELEVBQWtFO0FBQUU7QUFDaEUsV0FBS1YsSUFBTCxDQUFVZ0IsR0FBVixDQUFjekIsRUFBRSxDQUFDSyxJQUFILENBQVFNLFNBQVIsQ0FBa0JTLFVBQWhDLEVBQTRDLEtBQUtDLGFBQWpELEVBQWdFLElBQWhFO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsV0FBS1osSUFBTCxDQUFVZ0IsR0FBVixDQUFjekIsRUFBRSxDQUFDSyxJQUFILENBQVFNLFNBQVIsQ0FBa0JTLFVBQWhDLEVBQTRDLEtBQUtDLGFBQWpELEVBQWdFLElBQWhFLEVBREcsQ0FFSDtBQUNIO0FBQ0osR0ExQkk7QUEyQkw7QUFDQVIsRUFBQUEsY0E1QkssMEJBNEJVYSxLQTVCVixFQTRCaUI7QUFDbEIsUUFBSUMsR0FBRyxHQUFHRCxLQUFLLENBQUNFLFdBQU4sRUFBVjtBQUNBLFFBQUlDLElBQUksR0FBRyxLQUFLcEIsSUFBTCxDQUFVcUIsb0JBQVYsQ0FBK0JILEdBQS9CLENBQVg7QUFDQSxTQUFLTCxRQUFMLENBQWNTLENBQWQsR0FBbUJGLElBQUksQ0FBQ0UsQ0FBTCxHQUFTLEtBQUszQixNQUFMLENBQVkyQixDQUF4QztBQUNBLFNBQUtULFFBQUwsQ0FBY1UsQ0FBZCxHQUFtQkgsSUFBSSxDQUFDRyxDQUFMLEdBQVMsS0FBSzVCLE1BQUwsQ0FBWTRCLENBQXhDO0FBQ0F6QixJQUFBQSxJQUFJLENBQUMwQixJQUFMLENBQVUsYUFBVixFQUF5QixLQUFLWCxRQUE5QjtBQUNBZixJQUFBQSxJQUFJLENBQUNDLFNBQUwsR0FBaUIsSUFBakI7QUFDSCxHQW5DSTtBQW9DTE8sRUFBQUEsWUFwQ0ssd0JBb0NRVyxLQXBDUixFQW9DZTtBQUNoQm5CLElBQUFBLElBQUksQ0FBQ0MsU0FBTCxHQUFpQixLQUFqQjtBQUNILEdBdENJO0FBdUNMMEIsRUFBQUEsYUF2Q0sseUJBdUNTUixLQXZDVCxFQXVDZ0I7QUFDakIsUUFBSUMsR0FBRyxHQUFHRCxLQUFLLENBQUNFLFdBQU4sRUFBVjtBQUNBLFFBQUlDLElBQUksR0FBRyxLQUFLcEIsSUFBTCxDQUFVcUIsb0JBQVYsQ0FBK0JILEdBQS9CLENBQVg7QUFDQSxTQUFLTCxRQUFMLENBQWNTLENBQWQsR0FBbUJGLElBQUksQ0FBQ0UsQ0FBTCxHQUFTLEtBQUszQixNQUFMLENBQVkyQixDQUF4QztBQUNBLFNBQUtULFFBQUwsQ0FBY1UsQ0FBZCxHQUFtQkgsSUFBSSxDQUFDRyxDQUFMLEdBQVMsS0FBSzVCLE1BQUwsQ0FBWTRCLENBQXhDO0FBQ0F6QixJQUFBQSxJQUFJLENBQUMwQixJQUFMLENBQVUsYUFBVixFQUF5QixLQUFLWCxRQUE5QjtBQUNILEdBN0NJO0FBOENMRCxFQUFBQSxhQTlDSyx5QkE4Q1NLLEtBOUNULEVBOENnQjtBQUNqQixRQUFJQyxHQUFHLEdBQUdELEtBQUssQ0FBQ0UsV0FBTixFQUFWO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLEtBQUtwQixJQUFMLENBQVVxQixvQkFBVixDQUErQkgsR0FBL0IsQ0FBWDtBQUNBLFNBQUtMLFFBQUwsQ0FBY1MsQ0FBZCxHQUFtQkYsSUFBSSxDQUFDRSxDQUFMLEdBQVMsS0FBSzNCLE1BQUwsQ0FBWTJCLENBQXhDO0FBQ0EsU0FBS1QsUUFBTCxDQUFjVSxDQUFkLEdBQW1CSCxJQUFJLENBQUNHLENBQUwsR0FBUyxLQUFLNUIsTUFBTCxDQUFZNEIsQ0FBeEM7QUFDQXpCLElBQUFBLElBQUksQ0FBQzBCLElBQUwsQ0FBVSxhQUFWLEVBQXlCLEtBQUtYLFFBQTlCO0FBQ0gsR0FwREk7QUFxRExhLEVBQUFBLEtBckRLLG1CQXFERyxDQUNQLENBdERJLENBdURMOztBQXZESyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgY2FudmFzOiBjYy5Ob2RlXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGdhbWUudG91Y2hEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uX3RvdWNoX3N0YXJ0LCB0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uX3RvdWNoX2VuZCwgdGhpcyk7XHJcbiAgICAgICAgaWYgKGNjLnN5cy5vcyA9PSBjYy5zeXMuT1NfQU5EUk9JRCB8fCBjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0lPUykgeyAvL0FORFJPSUQgSU9TXHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLm9uX3RvdWNoX21vdmUsIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLm9uX3RvdWNoX21vdmUsIHRoaXMpO1xyXG4gICAgICAgICAgICAvL3RoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5NT1VTRV9NT1ZFLCB0aGlzLm9uX21vdXNlX21vdmUsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRvdWNoUG9zID0gY2MudjIoKTtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vbl90b3VjaF9zdGFydCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25fdG91Y2hfZW5kLCB0aGlzKTtcclxuICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEIHx8IGNjLnN5cy5vcyA9PSBjYy5zeXMuT1NfSU9TKSB7IC8vQU5EUk9JRCBJT1NcclxuICAgICAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLm9uX3RvdWNoX21vdmUsIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5vZmYoY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRSwgdGhpcy5vbl90b3VjaF9tb3ZlLCB0aGlzKTtcclxuICAgICAgICAgICAgLy90aGlzLm5vZGUub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLk1PVVNFX01PVkUsIHRoaXMub25fbW91c2VfbW92ZSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v5bGP5bmV5oyJ5LiLXHJcbiAgICBvbl90b3VjaF9zdGFydCh0b3VjaCkge1xyXG4gICAgICAgIHZhciBwb3MgPSB0b3VjaC5nZXRMb2NhdGlvbigpO1xyXG4gICAgICAgIHZhciBwb3MxID0gdGhpcy5ub2RlLmNvbnZlcnRUb05vZGVTcGFjZUFSKHBvcyk7XHJcbiAgICAgICAgdGhpcy50b3VjaFBvcy54ID0gKHBvczEueCArIHRoaXMuY2FudmFzLngpO1xyXG4gICAgICAgIHRoaXMudG91Y2hQb3MueSA9IChwb3MxLnkgKyB0aGlzLmNhbnZhcy55KTtcclxuICAgICAgICBnYW1lLmVtaXQoXCJzdGFnZS50b3VjaFwiLCB0aGlzLnRvdWNoUG9zKTtcclxuICAgICAgICBnYW1lLnRvdWNoRG93biA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgb25fdG91Y2hfZW5kKHRvdWNoKSB7XHJcbiAgICAgICAgZ2FtZS50b3VjaERvd24gPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBvbl9tb3VzZV9tb3ZlKHRvdWNoKSB7XHJcbiAgICAgICAgdmFyIHBvcyA9IHRvdWNoLmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgdmFyIHBvczEgPSB0aGlzLm5vZGUuY29udmVydFRvTm9kZVNwYWNlQVIocG9zKTtcclxuICAgICAgICB0aGlzLnRvdWNoUG9zLnggPSAocG9zMS54ICsgdGhpcy5jYW52YXMueCk7XHJcbiAgICAgICAgdGhpcy50b3VjaFBvcy55ID0gKHBvczEueSArIHRoaXMuY2FudmFzLnkpO1xyXG4gICAgICAgIGdhbWUuZW1pdChcInN0YWdlLnRvdWNoXCIsIHRoaXMudG91Y2hQb3MpO1xyXG4gICAgfSxcclxuICAgIG9uX3RvdWNoX21vdmUodG91Y2gpIHtcclxuICAgICAgICB2YXIgcG9zID0gdG91Y2guZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICB2YXIgcG9zMSA9IHRoaXMubm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2VBUihwb3MpO1xyXG4gICAgICAgIHRoaXMudG91Y2hQb3MueCA9IChwb3MxLnggKyB0aGlzLmNhbnZhcy54KTtcclxuICAgICAgICB0aGlzLnRvdWNoUG9zLnkgPSAocG9zMS55ICsgdGhpcy5jYW52YXMueSk7XHJcbiAgICAgICAgZ2FtZS5lbWl0KFwic3RhZ2UudG91Y2hcIiwgdGhpcy50b3VjaFBvcyk7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/loading.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '409754rvwRFLbF2PxAq7PqJ', 'loading');
// Script/core/loading.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    progressNode: cc.Node,
    //进度条节点
    resLabel: cc.Label,
    barLabel: cc.Label
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    cc.game.addPersistRootNode(this.node); //添加常驻节点

    this.node.zIndex = 10;
    game.curScene = this.curScene = "login";
    game.on(game.gameEvent.load_scene, this.loadScene, this); //场景切换场景

    cc.loader.onProgress = this.onProgress.bind(this);
    this.completedCount = 0;
    this.totalCount = 1;
    this.node.active = false;
    this.uuids = require("uuids");
  },
  //开始切换场景
  loadScene: function loadScene(scene) {
    if (game.curScene == scene) return;
    this.node.active = true;
    game.curScene = this.curScene = scene;
    if (this.progressNode) this.progressNode.width = 0;
    cc.log("切换场景");
    this.lastId = 0;
    cc.director.loadScene(scene, this.onCompleteScene.bind(this)); //场景加载完成
    //cc.director.on(cc.Director.EVENT_AFTER_SCENE_LAUNCH, this.onCompleteScene.bind(this));
    //this.isLoadingScene = true;
  },
  //加载完成
  onCompleteScene: function onCompleteScene() {
    this.node.active = false;
  },
  //加载场景进度
  onProgress: function onProgress(completedCount, totalCount, item) {
    var id = item.id.substring(item.id.lastIndexOf('/') + 1, item.id.lastIndexOf("."));
    var url = this.uuids[id];

    if (!url) {
      return;
    }

    if (totalCount > 1) {
      this.totalCount = totalCount;
    }

    this.completedCount = completedCount;

    if (this.completedCount > this.totalCount) {
      this.completedCount = this.totalCount;
    }

    var progress = (this.completedCount / this.totalCount).format(2);
    if (this.progressNode) this.progressNode.width = 1030 * progress;
    if (this.barLabel) this.barLabel.string = parseInt(progress * 100) + "%"; // if (this.resLabel)
    //     this.resLabel.string = item.id || "";
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxsb2FkaW5nLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwicHJvZ3Jlc3NOb2RlIiwiTm9kZSIsInJlc0xhYmVsIiwiTGFiZWwiLCJiYXJMYWJlbCIsIm9uRGVzdHJveSIsIm9uTG9hZCIsImdhbWUiLCJhZGRQZXJzaXN0Um9vdE5vZGUiLCJub2RlIiwiekluZGV4IiwiY3VyU2NlbmUiLCJvbiIsImdhbWVFdmVudCIsImxvYWRfc2NlbmUiLCJsb2FkU2NlbmUiLCJsb2FkZXIiLCJvblByb2dyZXNzIiwiYmluZCIsImNvbXBsZXRlZENvdW50IiwidG90YWxDb3VudCIsImFjdGl2ZSIsInV1aWRzIiwicmVxdWlyZSIsInNjZW5lIiwid2lkdGgiLCJsb2ciLCJsYXN0SWQiLCJkaXJlY3RvciIsIm9uQ29tcGxldGVTY2VuZSIsIml0ZW0iLCJpZCIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwidXJsIiwicHJvZ3Jlc3MiLCJmb3JtYXQiLCJzdHJpbmciLCJwYXJzZUludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLFlBQVksRUFBRUosRUFBRSxDQUFDSyxJQURUO0FBQ2U7QUFDdkJDLElBQUFBLFFBQVEsRUFBRU4sRUFBRSxDQUFDTyxLQUZMO0FBR1JDLElBQUFBLFFBQVEsRUFBRVIsRUFBRSxDQUFDTztBQUhMLEdBRlA7QUFPTEUsRUFBQUEsU0FQSyx1QkFPTyxDQUNYLENBUkk7QUFTTEMsRUFBQUEsTUFUSyxvQkFTSTtBQUNMVixJQUFBQSxFQUFFLENBQUNXLElBQUgsQ0FBUUMsa0JBQVIsQ0FBMkIsS0FBS0MsSUFBaEMsRUFESyxDQUNrQzs7QUFDdkMsU0FBS0EsSUFBTCxDQUFVQyxNQUFWLEdBQW1CLEVBQW5CO0FBQ0FILElBQUFBLElBQUksQ0FBQ0ksUUFBTCxHQUFnQixLQUFLQSxRQUFMLEdBQWdCLE9BQWhDO0FBQ0FKLElBQUFBLElBQUksQ0FBQ0ssRUFBTCxDQUFRTCxJQUFJLENBQUNNLFNBQUwsQ0FBZUMsVUFBdkIsRUFBbUMsS0FBS0MsU0FBeEMsRUFBbUQsSUFBbkQsRUFKSyxDQUlxRDs7QUFDMURuQixJQUFBQSxFQUFFLENBQUNvQixNQUFILENBQVVDLFVBQVYsR0FBdUIsS0FBS0EsVUFBTCxDQUFnQkMsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBdkI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLENBQXRCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixDQUFsQjtBQUNBLFNBQUtYLElBQUwsQ0FBVVksTUFBVixHQUFtQixLQUFuQjtBQUNBLFNBQUtDLEtBQUwsR0FBYUMsT0FBTyxDQUFDLE9BQUQsQ0FBcEI7QUFDSCxHQW5CSTtBQW9CTDtBQUNBUixFQUFBQSxTQXJCSyxxQkFxQktTLEtBckJMLEVBcUJZO0FBQ2IsUUFBSWpCLElBQUksQ0FBQ0ksUUFBTCxJQUFpQmEsS0FBckIsRUFBNEI7QUFDNUIsU0FBS2YsSUFBTCxDQUFVWSxNQUFWLEdBQW1CLElBQW5CO0FBQ0FkLElBQUFBLElBQUksQ0FBQ0ksUUFBTCxHQUFnQixLQUFLQSxRQUFMLEdBQWdCYSxLQUFoQztBQUNBLFFBQUksS0FBS3hCLFlBQVQsRUFDSSxLQUFLQSxZQUFMLENBQWtCeUIsS0FBbEIsR0FBMEIsQ0FBMUI7QUFDSjdCLElBQUFBLEVBQUUsQ0FBQzhCLEdBQUgsQ0FBTyxNQUFQO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLENBQWQ7QUFDQS9CLElBQUFBLEVBQUUsQ0FBQ2dDLFFBQUgsQ0FBWWIsU0FBWixDQUFzQlMsS0FBdEIsRUFBNkIsS0FBS0ssZUFBTCxDQUFxQlgsSUFBckIsQ0FBMEIsSUFBMUIsQ0FBN0IsRUFSYSxDQVFrRDtBQUMvRDtBQUNBO0FBQ0gsR0FoQ0k7QUFpQ0w7QUFDQVcsRUFBQUEsZUFBZSxFQUFFLDJCQUFZO0FBQ3pCLFNBQUtwQixJQUFMLENBQVVZLE1BQVYsR0FBbUIsS0FBbkI7QUFDSCxHQXBDSTtBQXFDTDtBQUNBSixFQUFBQSxVQXRDSyxzQkFzQ01FLGNBdENOLEVBc0NzQkMsVUF0Q3RCLEVBc0NrQ1UsSUF0Q2xDLEVBc0N3QztBQUN6QyxRQUFJQyxFQUFFLEdBQUdELElBQUksQ0FBQ0MsRUFBTCxDQUFRQyxTQUFSLENBQWtCRixJQUFJLENBQUNDLEVBQUwsQ0FBUUUsV0FBUixDQUFvQixHQUFwQixJQUEyQixDQUE3QyxFQUFnREgsSUFBSSxDQUFDQyxFQUFMLENBQVFFLFdBQVIsQ0FBb0IsR0FBcEIsQ0FBaEQsQ0FBVDtBQUNBLFFBQUlDLEdBQUcsR0FBRyxLQUFLWixLQUFMLENBQVdTLEVBQVgsQ0FBVjs7QUFDQSxRQUFJLENBQUNHLEdBQUwsRUFBVTtBQUNOO0FBQ0g7O0FBQ0QsUUFBSWQsVUFBVSxHQUFHLENBQWpCLEVBQW9CO0FBQ2hCLFdBQUtBLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0g7O0FBQ0QsU0FBS0QsY0FBTCxHQUFzQkEsY0FBdEI7O0FBQ0EsUUFBSSxLQUFLQSxjQUFMLEdBQXNCLEtBQUtDLFVBQS9CLEVBQTJDO0FBQ3ZDLFdBQUtELGNBQUwsR0FBc0IsS0FBS0MsVUFBM0I7QUFDSDs7QUFDRCxRQUFJZSxRQUFRLEdBQUcsQ0FBQyxLQUFLaEIsY0FBTCxHQUFzQixLQUFLQyxVQUE1QixFQUF3Q2dCLE1BQXhDLENBQStDLENBQS9DLENBQWY7QUFDQSxRQUFJLEtBQUtwQyxZQUFULEVBQ0ksS0FBS0EsWUFBTCxDQUFrQnlCLEtBQWxCLEdBQTBCLE9BQU9VLFFBQWpDO0FBQ0osUUFBSSxLQUFLL0IsUUFBVCxFQUNJLEtBQUtBLFFBQUwsQ0FBY2lDLE1BQWQsR0FBdUJDLFFBQVEsQ0FBQ0gsUUFBUSxHQUFHLEdBQVosQ0FBUixHQUEyQixHQUFsRCxDQWpCcUMsQ0FrQnpDO0FBQ0E7QUFDSDtBQTFESSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgcHJvZ3Jlc3NOb2RlOiBjYy5Ob2RlLCAvL+i/m+W6puadoeiKgueCuVxyXG4gICAgICAgIHJlc0xhYmVsOiBjYy5MYWJlbCxcclxuICAgICAgICBiYXJMYWJlbDogY2MuTGFiZWxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGNjLmdhbWUuYWRkUGVyc2lzdFJvb3ROb2RlKHRoaXMubm9kZSk7IC8v5re75Yqg5bi46am76IqC54K5XHJcbiAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IDEwO1xyXG4gICAgICAgIGdhbWUuY3VyU2NlbmUgPSB0aGlzLmN1clNjZW5lID0gXCJsb2dpblwiO1xyXG4gICAgICAgIGdhbWUub24oZ2FtZS5nYW1lRXZlbnQubG9hZF9zY2VuZSwgdGhpcy5sb2FkU2NlbmUsIHRoaXMpOyAvL+WcuuaZr+WIh+aNouWcuuaZr1xyXG4gICAgICAgIGNjLmxvYWRlci5vblByb2dyZXNzID0gdGhpcy5vblByb2dyZXNzLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jb21wbGV0ZWRDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbENvdW50ID0gMTtcclxuICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51dWlkcyA9IHJlcXVpcmUoXCJ1dWlkc1wiKTtcclxuICAgIH0sXHJcbiAgICAvL+W8gOWni+WIh+aNouWcuuaZr1xyXG4gICAgbG9hZFNjZW5lKHNjZW5lKSB7XHJcbiAgICAgICAgaWYgKGdhbWUuY3VyU2NlbmUgPT0gc2NlbmUpIHJldHVybjtcclxuICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBnYW1lLmN1clNjZW5lID0gdGhpcy5jdXJTY2VuZSA9IHNjZW5lO1xyXG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzTm9kZSlcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc05vZGUud2lkdGggPSAwO1xyXG4gICAgICAgIGNjLmxvZyhcIuWIh+aNouWcuuaZr1wiKTtcclxuICAgICAgICB0aGlzLmxhc3RJZCA9IDA7XHJcbiAgICAgICAgY2MuZGlyZWN0b3IubG9hZFNjZW5lKHNjZW5lLCB0aGlzLm9uQ29tcGxldGVTY2VuZS5iaW5kKHRoaXMpKTsgLy/lnLrmma/liqDovb3lrozmiJBcclxuICAgICAgICAvL2NjLmRpcmVjdG9yLm9uKGNjLkRpcmVjdG9yLkVWRU5UX0FGVEVSX1NDRU5FX0xBVU5DSCwgdGhpcy5vbkNvbXBsZXRlU2NlbmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgLy90aGlzLmlzTG9hZGluZ1NjZW5lID0gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICAvL+WKoOi9veWujOaIkFxyXG4gICAgb25Db21wbGV0ZVNjZW5lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIC8v5Yqg6L295Zy65pmv6L+b5bqmXHJcbiAgICBvblByb2dyZXNzKGNvbXBsZXRlZENvdW50LCB0b3RhbENvdW50LCBpdGVtKSB7XHJcbiAgICAgICAgdmFyIGlkID0gaXRlbS5pZC5zdWJzdHJpbmcoaXRlbS5pZC5sYXN0SW5kZXhPZignLycpICsgMSwgaXRlbS5pZC5sYXN0SW5kZXhPZihcIi5cIikpXHJcbiAgICAgICAgdmFyIHVybCA9IHRoaXMudXVpZHNbaWRdO1xyXG4gICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvdGFsQ291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxDb3VudCA9IHRvdGFsQ291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcGxldGVkQ291bnQgPSBjb21wbGV0ZWRDb3VudDtcclxuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWRDb3VudCA+IHRoaXMudG90YWxDb3VudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlZENvdW50ID0gdGhpcy50b3RhbENvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAodGhpcy5jb21wbGV0ZWRDb3VudCAvIHRoaXMudG90YWxDb3VudCkuZm9ybWF0KDIpO1xyXG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzTm9kZSlcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc05vZGUud2lkdGggPSAxMDMwICogcHJvZ3Jlc3M7XHJcbiAgICAgICAgaWYgKHRoaXMuYmFyTGFiZWwpXHJcbiAgICAgICAgICAgIHRoaXMuYmFyTGFiZWwuc3RyaW5nID0gcGFyc2VJbnQocHJvZ3Jlc3MgKiAxMDApICsgXCIlXCI7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMucmVzTGFiZWwpXHJcbiAgICAgICAgLy8gICAgIHRoaXMucmVzTGFiZWwuc3RyaW5nID0gaXRlbS5pZCB8fCBcIlwiO1xyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/persistPrefab.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0ebdc2bPkJBvKj0a9u10BaP', 'persistPrefab');
// Script/core/persistPrefab.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    bullet_atlas: cc.SpriteAtlas,
    //子弹的序列图
    bomb_atlas: cc.SpriteAtlas,
    //爆炸材质
    map_atlas: cc.SpriteAtlas,
    ui_atlas: cc.SpriteAtlas,
    materias: {
      //引用到的材质球
      "default": [],
      type: cc.Material
    } // bingList: {default: [], type: cc.Prefab},
    // bulletList: {default: [], type: cc.Prefab},
    // effList: {default: [], type: cc.Prefab},
    // bombList: {default: [], type: cc.Prefab}

  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    game.bullet_atlas = this.bullet_atlas; //保存到全局

    game.bomb_atlas = this.bomb_atlas; //保存到全局

    game.map_atlas = this.map_atlas; //保存到全局

    game.ui_atlas = this.ui_atlas;
    game.materias = {};

    for (var i in this.materias) {
      var materia = this.materias[i];

      if (materia) {
        game.materias[materia.name] = materia;
      }
    } // game.bingList = {};
    // game.bingPool = new cc.NodePool();
    // for (var i in this.bingList) {
    //     var prefab = this.bingList[i];
    //     if (prefab) {
    //         game.bingList[prefab.name] = prefab;
    //     }
    // }
    // game.bulletList = {};
    // game.bulletPool = {};
    // for (var i in this.bulletList) {
    //     var prefab = this.bulletList[i];
    //     if (prefab) {
    //         game.bulletList[prefab.name] = prefab;
    //     }
    // }
    // game.effList = {};
    // game.effPool = new cc.NodePool();
    // for (var i in this.effList) {
    //     var prefab = this.effList[i];
    //     if (prefab) {
    //         game.effList[prefab.name] = prefab;
    //     }
    // }
    // game.bombList = {};
    // game.bombPool = new cc.NodePool();
    // for (var i in this.bombList) {
    //     var prefab = this.bombList[i];
    //     if (prefab) {
    //         game.bombList[prefab.name] = prefab;
    //     }
    // }

  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxwZXJzaXN0UHJlZmFiLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiYnVsbGV0X2F0bGFzIiwiU3ByaXRlQXRsYXMiLCJib21iX2F0bGFzIiwibWFwX2F0bGFzIiwidWlfYXRsYXMiLCJtYXRlcmlhcyIsInR5cGUiLCJNYXRlcmlhbCIsIm9uRGVzdHJveSIsIm9uTG9hZCIsImdhbWUiLCJpIiwibWF0ZXJpYSIsIm5hbWUiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLFlBQVksRUFBRUosRUFBRSxDQUFDSyxXQURUO0FBQ3FCO0FBQzdCQyxJQUFBQSxVQUFVLEVBQUVOLEVBQUUsQ0FBQ0ssV0FGUDtBQUVxQjtBQUM3QkUsSUFBQUEsU0FBUyxFQUFDUCxFQUFFLENBQUNLLFdBSEw7QUFNUkcsSUFBQUEsUUFBUSxFQUFDUixFQUFFLENBQUNLLFdBTko7QUFPUkksSUFBQUEsUUFBUSxFQUFFO0FBQUU7QUFDUixpQkFBUyxFQURIO0FBQ09DLE1BQUFBLElBQUksRUFBRVYsRUFBRSxDQUFDVztBQURoQixLQVBGLENBVVI7QUFDQTtBQUNBO0FBQ0E7O0FBYlEsR0FGUDtBQWlCTEMsRUFBQUEsU0FqQkssdUJBaUJPLENBQ1gsQ0FsQkk7QUFtQkxDLEVBQUFBLE1BbkJLLG9CQW1CSTtBQUNMQyxJQUFBQSxJQUFJLENBQUNWLFlBQUwsR0FBb0IsS0FBS0EsWUFBekIsQ0FESyxDQUNpQzs7QUFDdENVLElBQUFBLElBQUksQ0FBQ1IsVUFBTCxHQUFrQixLQUFLQSxVQUF2QixDQUZLLENBRTZCOztBQUNsQ1EsSUFBQUEsSUFBSSxDQUFDUCxTQUFMLEdBQWlCLEtBQUtBLFNBQXRCLENBSEssQ0FHMkI7O0FBQ2hDTyxJQUFBQSxJQUFJLENBQUNOLFFBQUwsR0FBYyxLQUFLQSxRQUFuQjtBQUNBTSxJQUFBQSxJQUFJLENBQUNMLFFBQUwsR0FBZ0IsRUFBaEI7O0FBQ0EsU0FBSyxJQUFJTSxDQUFULElBQWMsS0FBS04sUUFBbkIsRUFBNkI7QUFDekIsVUFBSU8sT0FBTyxHQUFHLEtBQUtQLFFBQUwsQ0FBY00sQ0FBZCxDQUFkOztBQUNBLFVBQUlDLE9BQUosRUFBYTtBQUNURixRQUFBQSxJQUFJLENBQUNMLFFBQUwsQ0FBY08sT0FBTyxDQUFDQyxJQUF0QixJQUE4QkQsT0FBOUI7QUFDSDtBQUNKLEtBWEksQ0FZTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNILEdBL0RJO0FBZ0VMRSxFQUFBQSxLQWhFSyxtQkFnRUcsQ0FDUCxDQWpFSSxDQWtFTDs7QUFsRUssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGJ1bGxldF9hdGxhczogY2MuU3ByaXRlQXRsYXMsLy/lrZDlvLnnmoTluo/liJflm75cclxuICAgICAgICBib21iX2F0bGFzOiBjYy5TcHJpdGVBdGxhcywgIC8v54iG54K45p2Q6LSoXHJcbiAgICAgICAgbWFwX2F0bGFzOmNjLlNwcml0ZUF0bGFzLFxyXG5cclxuXHJcbiAgICAgICAgdWlfYXRsYXM6Y2MuU3ByaXRlQXRsYXMsXHJcbiAgICAgICAgbWF0ZXJpYXM6IHsgLy/lvJXnlKjliLDnmoTmnZDotKjnkINcclxuICAgICAgICAgICAgZGVmYXVsdDogW10sIHR5cGU6IGNjLk1hdGVyaWFsXHJcbiAgICAgICAgIH0sXHJcbiAgICAgICAgLy8gYmluZ0xpc3Q6IHtkZWZhdWx0OiBbXSwgdHlwZTogY2MuUHJlZmFifSxcclxuICAgICAgICAvLyBidWxsZXRMaXN0OiB7ZGVmYXVsdDogW10sIHR5cGU6IGNjLlByZWZhYn0sXHJcbiAgICAgICAgLy8gZWZmTGlzdDoge2RlZmF1bHQ6IFtdLCB0eXBlOiBjYy5QcmVmYWJ9LFxyXG4gICAgICAgIC8vIGJvbWJMaXN0OiB7ZGVmYXVsdDogW10sIHR5cGU6IGNjLlByZWZhYn1cclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGdhbWUuYnVsbGV0X2F0bGFzID0gdGhpcy5idWxsZXRfYXRsYXM7Ly/kv53lrZjliLDlhajlsYBcclxuICAgICAgICBnYW1lLmJvbWJfYXRsYXMgPSB0aGlzLmJvbWJfYXRsYXM7Ly/kv53lrZjliLDlhajlsYBcclxuICAgICAgICBnYW1lLm1hcF9hdGxhcyA9IHRoaXMubWFwX2F0bGFzOy8v5L+d5a2Y5Yiw5YWo5bGAXHJcbiAgICAgICAgZ2FtZS51aV9hdGxhcz10aGlzLnVpX2F0bGFzO1xyXG4gICAgICAgIGdhbWUubWF0ZXJpYXMgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMubWF0ZXJpYXMpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGVyaWEgPSB0aGlzLm1hdGVyaWFzW2ldO1xyXG4gICAgICAgICAgICBpZiAobWF0ZXJpYSkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZS5tYXRlcmlhc1ttYXRlcmlhLm5hbWVdID0gbWF0ZXJpYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBnYW1lLmJpbmdMaXN0ID0ge307XHJcbiAgICAgICAgLy8gZ2FtZS5iaW5nUG9vbCA9IG5ldyBjYy5Ob2RlUG9vbCgpO1xyXG4gICAgICAgIC8vIGZvciAodmFyIGkgaW4gdGhpcy5iaW5nTGlzdCkge1xyXG4gICAgICAgIC8vICAgICB2YXIgcHJlZmFiID0gdGhpcy5iaW5nTGlzdFtpXTtcclxuICAgICAgICAvLyAgICAgaWYgKHByZWZhYikge1xyXG4gICAgICAgIC8vICAgICAgICAgZ2FtZS5iaW5nTGlzdFtwcmVmYWIubmFtZV0gPSBwcmVmYWI7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gZ2FtZS5idWxsZXRMaXN0ID0ge307XHJcbiAgICAgICAgLy8gZ2FtZS5idWxsZXRQb29sID0ge307XHJcbiAgICAgICAgLy8gZm9yICh2YXIgaSBpbiB0aGlzLmJ1bGxldExpc3QpIHtcclxuICAgICAgICAvLyAgICAgdmFyIHByZWZhYiA9IHRoaXMuYnVsbGV0TGlzdFtpXTtcclxuICAgICAgICAvLyAgICAgaWYgKHByZWZhYikge1xyXG4gICAgICAgIC8vICAgICAgICAgZ2FtZS5idWxsZXRMaXN0W3ByZWZhYi5uYW1lXSA9IHByZWZhYjtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBnYW1lLmVmZkxpc3QgPSB7fTtcclxuICAgICAgICAvLyBnYW1lLmVmZlBvb2wgPSBuZXcgY2MuTm9kZVBvb2woKTtcclxuICAgICAgICAvLyBmb3IgKHZhciBpIGluIHRoaXMuZWZmTGlzdCkge1xyXG4gICAgICAgIC8vICAgICB2YXIgcHJlZmFiID0gdGhpcy5lZmZMaXN0W2ldO1xyXG4gICAgICAgIC8vICAgICBpZiAocHJlZmFiKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBnYW1lLmVmZkxpc3RbcHJlZmFiLm5hbWVdID0gcHJlZmFiO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGdhbWUuYm9tYkxpc3QgPSB7fTtcclxuICAgICAgICAvLyBnYW1lLmJvbWJQb29sID0gbmV3IGNjLk5vZGVQb29sKCk7XHJcbiAgICAgICAgLy8gZm9yICh2YXIgaSBpbiB0aGlzLmJvbWJMaXN0KSB7XHJcbiAgICAgICAgLy8gICAgIHZhciBwcmVmYWIgPSB0aGlzLmJvbWJMaXN0W2ldO1xyXG4gICAgICAgIC8vICAgICBpZiAocHJlZmFiKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBnYW1lLmJvbWJMaXN0W3ByZWZhYi5uYW1lXSA9IHByZWZhYjtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/persistNode.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e851e2LdMNCwIq1xfTSJ9eC', 'persistNode');
// Script/core/persistNode.js

"use strict";

cc.Class({
  "extends": cc.Component,
  //常驻节点 UI 层
  // 资源加载层
  properties: {},
  onLoad: function onLoad() {},
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxwZXJzaXN0Tm9kZS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uTG9hZCIsInN0YXJ0Iiwib25EZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMO0FBQ0E7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLEVBSlA7QUFLTEMsRUFBQUEsTUFMSyxvQkFLSSxDQUVSLENBUEk7QUFRTEMsRUFBQUEsS0FSSyxtQkFRRyxDQUNQLENBVEk7QUFVTEMsRUFBQUEsU0FWSyx1QkFVTyxDQUNYLENBWEksQ0FhTDs7QUFiSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICAvL+W4uOmpu+iKgueCuSBVSSDlsYJcclxuICAgIC8vIOi1hOa6kOWKoOi9veWxglxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICBvbkxvYWQoKSB7XHJcblxyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/mapSetting.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9a2bagCZN5JRZysUwqr6Sw3', 'mapSetting');
// Script/core/mapSetting.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    floor: cc.Node
  },
  onLoad: function onLoad() {
    if (!this.floor) return;
    cc.game.on(cc.game.EVENT_ENGINE_INITED, function () {
      var physicsManager = cc.director.getPhysicsManager();
      physicsManager.enabled = true;
      cc.director.getCollisionManager().enabled = true;
    });
    var polygonCollider = this.floor.getComponent(cc.PolygonCollider);
    var points = polygonCollider.points;
    var physicsPolygonCollider = this.floor.getComponent(cc.PhysicsPolygonCollider);
    physicsPolygonCollider.points = points;
    var mapPoint = [];
    game.mapRotation = [];
    game.mapXList = [];

    for (var i in points) {
      var p = points[i];

      if (p.y > 30) {
        mapPoint.push(cc.v2(p.x, p.y));
        game.mapXList.push(p.x);
      }
    }

    game.mapXList.sort(function (v1, v2) {
      return v1 - v2;
    });
    mapPoint.sort(function (v1, v2) {
      return v1.x - v2.x;
    });
    var startPoint = mapPoint[0];

    for (var _i = 1; _i < mapPoint.length; _i++) {
      var endPoint = mapPoint[_i];
      game.mapRotation.push(game.gameUtils.getRotation(startPoint, endPoint));
      startPoint = endPoint;
    }
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxtYXBTZXR0aW5nLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiZmxvb3IiLCJOb2RlIiwib25Mb2FkIiwiZ2FtZSIsIm9uIiwiRVZFTlRfRU5HSU5FX0lOSVRFRCIsInBoeXNpY3NNYW5hZ2VyIiwiZGlyZWN0b3IiLCJnZXRQaHlzaWNzTWFuYWdlciIsImVuYWJsZWQiLCJnZXRDb2xsaXNpb25NYW5hZ2VyIiwicG9seWdvbkNvbGxpZGVyIiwiZ2V0Q29tcG9uZW50IiwiUG9seWdvbkNvbGxpZGVyIiwicG9pbnRzIiwicGh5c2ljc1BvbHlnb25Db2xsaWRlciIsIlBoeXNpY3NQb2x5Z29uQ29sbGlkZXIiLCJtYXBQb2ludCIsIm1hcFJvdGF0aW9uIiwibWFwWExpc3QiLCJpIiwicCIsInkiLCJwdXNoIiwidjIiLCJ4Iiwic29ydCIsInYxIiwic3RhcnRQb2ludCIsImxlbmd0aCIsImVuZFBvaW50IiwiZ2FtZVV0aWxzIiwiZ2V0Um90YXRpb24iLCJzdGFydCIsIm9uRGVzdHJveSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLEtBQUssRUFBRUosRUFBRSxDQUFDSztBQURGLEdBRlA7QUFLTEMsRUFBQUEsTUFMSyxvQkFLSTtBQUNMLFFBQUksQ0FBQyxLQUFLRixLQUFWLEVBQWlCO0FBRWpCSixJQUFBQSxFQUFFLENBQUNPLElBQUgsQ0FBUUMsRUFBUixDQUFXUixFQUFFLENBQUNPLElBQUgsQ0FBUUUsbUJBQW5CLEVBQXdDLFlBQU07QUFDMUMsVUFBSUMsY0FBYyxHQUFHVixFQUFFLENBQUNXLFFBQUgsQ0FBWUMsaUJBQVosRUFBckI7QUFDQUYsTUFBQUEsY0FBYyxDQUFDRyxPQUFmLEdBQXlCLElBQXpCO0FBQ0FiLE1BQUFBLEVBQUUsQ0FBQ1csUUFBSCxDQUFZRyxtQkFBWixHQUFrQ0QsT0FBbEMsR0FBNEMsSUFBNUM7QUFDSCxLQUpEO0FBS0EsUUFBSUUsZUFBZSxHQUFHLEtBQUtYLEtBQUwsQ0FBV1ksWUFBWCxDQUF3QmhCLEVBQUUsQ0FBQ2lCLGVBQTNCLENBQXRCO0FBQ0EsUUFBSUMsTUFBTSxHQUFHSCxlQUFlLENBQUNHLE1BQTdCO0FBQ0EsUUFBSUMsc0JBQXNCLEdBQUcsS0FBS2YsS0FBTCxDQUFXWSxZQUFYLENBQXdCaEIsRUFBRSxDQUFDb0Isc0JBQTNCLENBQTdCO0FBQ0FELElBQUFBLHNCQUFzQixDQUFDRCxNQUF2QixHQUFnQ0EsTUFBaEM7QUFFQSxRQUFJRyxRQUFRLEdBQUcsRUFBZjtBQUNBZCxJQUFBQSxJQUFJLENBQUNlLFdBQUwsR0FBbUIsRUFBbkI7QUFDQWYsSUFBQUEsSUFBSSxDQUFDZ0IsUUFBTCxHQUFnQixFQUFoQjs7QUFDQSxTQUFLLElBQUlDLENBQVQsSUFBY04sTUFBZCxFQUFzQjtBQUNsQixVQUFJTyxDQUFDLEdBQUdQLE1BQU0sQ0FBQ00sQ0FBRCxDQUFkOztBQUNBLFVBQUlDLENBQUMsQ0FBQ0MsQ0FBRixHQUFNLEVBQVYsRUFBYztBQUNWTCxRQUFBQSxRQUFRLENBQUNNLElBQVQsQ0FBYzNCLEVBQUUsQ0FBQzRCLEVBQUgsQ0FBTUgsQ0FBQyxDQUFDSSxDQUFSLEVBQVdKLENBQUMsQ0FBQ0MsQ0FBYixDQUFkO0FBQ0FuQixRQUFBQSxJQUFJLENBQUNnQixRQUFMLENBQWNJLElBQWQsQ0FBbUJGLENBQUMsQ0FBQ0ksQ0FBckI7QUFDSDtBQUVKOztBQUNEdEIsSUFBQUEsSUFBSSxDQUFDZ0IsUUFBTCxDQUFjTyxJQUFkLENBQW1CLFVBQVVDLEVBQVYsRUFBY0gsRUFBZCxFQUFrQjtBQUNqQyxhQUFPRyxFQUFFLEdBQUdILEVBQVo7QUFDSCxLQUZEO0FBR0FQLElBQUFBLFFBQVEsQ0FBQ1MsSUFBVCxDQUFjLFVBQVVDLEVBQVYsRUFBY0gsRUFBZCxFQUFrQjtBQUM1QixhQUFPRyxFQUFFLENBQUNGLENBQUgsR0FBT0QsRUFBRSxDQUFDQyxDQUFqQjtBQUNILEtBRkQ7QUFHQSxRQUFJRyxVQUFVLEdBQUdYLFFBQVEsQ0FBQyxDQUFELENBQXpCOztBQUNBLFNBQUssSUFBSUcsRUFBQyxHQUFHLENBQWIsRUFBZ0JBLEVBQUMsR0FBR0gsUUFBUSxDQUFDWSxNQUE3QixFQUFxQ1QsRUFBQyxFQUF0QyxFQUEwQztBQUN0QyxVQUFJVSxRQUFRLEdBQUdiLFFBQVEsQ0FBQ0csRUFBRCxDQUF2QjtBQUNBakIsTUFBQUEsSUFBSSxDQUFDZSxXQUFMLENBQWlCSyxJQUFqQixDQUFzQnBCLElBQUksQ0FBQzRCLFNBQUwsQ0FBZUMsV0FBZixDQUEyQkosVUFBM0IsRUFBdUNFLFFBQXZDLENBQXRCO0FBQ0FGLE1BQUFBLFVBQVUsR0FBR0UsUUFBYjtBQUNIO0FBRUosR0ExQ0k7QUEyQ0xHLEVBQUFBLEtBM0NLLG1CQTJDRyxDQUNQLENBNUNJO0FBNkNMQyxFQUFBQSxTQTdDSyx1QkE2Q08sQ0FDWCxDQTlDSSxDQStDTDs7QUEvQ0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGZsb29yOiBjYy5Ob2RlXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5mbG9vcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBjYy5nYW1lLm9uKGNjLmdhbWUuRVZFTlRfRU5HSU5FX0lOSVRFRCwgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcGh5c2ljc01hbmFnZXIgPSBjYy5kaXJlY3Rvci5nZXRQaHlzaWNzTWFuYWdlcigpO1xyXG4gICAgICAgICAgICBwaHlzaWNzTWFuYWdlci5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2MuZGlyZWN0b3IuZ2V0Q29sbGlzaW9uTWFuYWdlcigpLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBwb2x5Z29uQ29sbGlkZXIgPSB0aGlzLmZsb29yLmdldENvbXBvbmVudChjYy5Qb2x5Z29uQ29sbGlkZXIpO1xyXG4gICAgICAgIGxldCBwb2ludHMgPSBwb2x5Z29uQ29sbGlkZXIucG9pbnRzO1xyXG4gICAgICAgIGxldCBwaHlzaWNzUG9seWdvbkNvbGxpZGVyID0gdGhpcy5mbG9vci5nZXRDb21wb25lbnQoY2MuUGh5c2ljc1BvbHlnb25Db2xsaWRlcik7XHJcbiAgICAgICAgcGh5c2ljc1BvbHlnb25Db2xsaWRlci5wb2ludHMgPSBwb2ludHM7XHJcblxyXG4gICAgICAgIGxldCBtYXBQb2ludCA9IFtdO1xyXG4gICAgICAgIGdhbWUubWFwUm90YXRpb24gPSBbXTtcclxuICAgICAgICBnYW1lLm1hcFhMaXN0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBwb2ludHMpIHtcclxuICAgICAgICAgICAgbGV0IHAgPSBwb2ludHNbaV07XHJcbiAgICAgICAgICAgIGlmIChwLnkgPiAzMCkge1xyXG4gICAgICAgICAgICAgICAgbWFwUG9pbnQucHVzaChjYy52MihwLngsIHAueSkpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZS5tYXBYTGlzdC5wdXNoKHAueCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWUubWFwWExpc3Quc29ydChmdW5jdGlvbiAodjEsIHYyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2MSAtIHYyO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgbWFwUG9pbnQuc29ydChmdW5jdGlvbiAodjEsIHYyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2MS54IC0gdjIueDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIGxldCBzdGFydFBvaW50ID0gbWFwUG9pbnRbMF1cclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1hcFBvaW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbmRQb2ludCA9IG1hcFBvaW50W2ldO1xyXG4gICAgICAgICAgICBnYW1lLm1hcFJvdGF0aW9uLnB1c2goZ2FtZS5nYW1lVXRpbHMuZ2V0Um90YXRpb24oc3RhcnRQb2ludCwgZW5kUG9pbnQpKVxyXG4gICAgICAgICAgICBzdGFydFBvaW50ID0gZW5kUG9pbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/popupLayer.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2bf9bfAF6lNK5upLcU2ud1h', 'popupLayer');
// Script/core/popupLayer.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    resLoader: cc.Node,
    //资源加载菊花圈
    bg: cc.Node
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    //this.prefabs = game.gamePopup;
    this.popopNodes = {};
    this.loadingList = [];
    this.childList = []; //添加的子节点列表

    game.on(game.gameEvent.popup_prefab, this.popup_prefab, this);
    game.on(game.gameEvent.closed_prefab, this.closed_prefab, this);
    this.autoRes();
  },
  closed_prefab: function closed_prefab(node) {
    var self = this;
    var poolComponents = node.getComponentsInChildren("PoolComponent");

    for (var i in poolComponents) {
      var poolComponent = poolComponents[i];
      poolComponent.unuse(); //启用
    } // this.showNodes(node, false, function () {
    //     this.parent = null;
    //     var idx = self.childList.indexOf(this);
    //     if (idx >= 0) {
    //         self.childList.splice(idx, 1);
    //     }
    //     self.autoRes();
    // }.bind(node));


    node.parent = null;
    var idx = self.childList.indexOf(node);

    if (idx >= 0) {
      self.childList.splice(idx, 1);
    }

    self.autoRes();
  },
  showNodes: function showNodes(node, isPopup, cb) {
    if (node == null) {
      return;
    }

    if (isPopup == true) {
      node.opacity = 0;
      node.setScale(0.1);
      var fadeIn = cc.fadeIn(0.2);
      var scaleTo = cc.scaleTo(0.2, 1);
      cc.tween(node).then(fadeIn).then(scaleTo).call(function () {
        if (cb) cb();
      }.bind(node)).start();
    } else {
      node.opacity = 1;
      node.setScale(1);
      var fadeOut = cc.fadeOut(0.2);

      var _scaleTo = cc.scaleTo(0.2, 0.1);

      cc.tween(node).then(fadeOut).then(_scaleTo).call(function () {
        if (cb) cb();
      }.bind(node)).start();
    }
  },
  popup_prefab: function popup_prefab(data, msg) {
    // let date = this.prefabs[name];
    // if (!date) {
    //     console.log("\" %s \"弹窗模块未注册", name);
    //     alert("\" %s \"弹窗模块未注册", name);
    //     return;
    // }
    this.loadPrefab(data.url, function (err, node) {
      if (!err) {
        var idx = this.childList.indexOf(node);

        if (idx >= 0) {
          this.childList.splice(idx, 1);
        }

        this.childList.push(node);

        if (!node.parent) {
          this.node.addChild(node);
        } else {
          node.parent = this.node;
        }

        node.x = node.y = 0;
        cc.log(node.x, node.y);
        var poolComponents = node.getComponentsInChildren("PoolComponent");

        for (var i in poolComponents) {
          var poolComponent = poolComponents[i];
          poolComponent.reuse(msg); //启用

          poolComponent.onComplete(); //启用
        } // var self = this;
        // this.showNodes(node, true, function () {
        //     let poolComponents = this.getComponentsInChildren("PoolComponent");
        //     for (let i in poolComponents) {
        //         let poolComponent = poolComponents[i];
        //         poolComponent.onComplete(); //启用
        //     }
        //     self.autoRes();
        // }.bind(node));

      }

      this.autoRes();
    }.bind(this));
    this.autoRes();
  },

  /*******
   * 加载预制体
   * *****/
  loadPrefab: function loadPrefab(url, cb) {
    if (this.popopNodes[url]) {
      cb(null, this.popopNodes[url]);
      return;
    }

    var opts = {
      url: url,
      cb: cb
    };
    var self = this;

    if (this.loadingList.indexOf(url) >= 0) {
      this.node.once(url, function (err, node) {
        this.cb(err, node);
      }.bind(opts));
      return;
    }

    if (this.loadingList.indexOf(url) < 0) {
      this.loadingList.push(url);
    }

    cc.loader.loadRes(url, cc.Prefab, function (err, prefab) {
      var node;

      if (!err) {
        node = cc.instantiate(prefab);
        self.popopNodes[this.url] = node;
      }

      var idx = self.loadingList.indexOf(this.url);

      if (idx >= 0) {
        self.loadingList.splice(idx, 1);
      }

      this.cb(err, node);
      self.node.emit(this.url, err, node);
    }.bind(opts));
  },
  autoRes: function autoRes() {
    for (var i = 0; i < this.childList.length; i++) {
      var node = this.childList[i];

      if (i == this.childList.length - 1) {
        this.bg.zIndex = i;
        node.zIndex = i + 1;
      } else {
        node.zIndex = i;
      }
    }

    var count = this.node.childrenCount;
    var len = this.loadingList.length;

    if (len > 0 || count > 1) {
      this.node.active = true;
    } else {
      this.node.active = false;
    }

    if (len > 0) {
      this.resLoader.active = true;
    } else {
      this.resLoader.active = false;
    }
  },
  onClick: function onClick(e) {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/top.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f415cJbccpANLYeHf+wm3+s', 'top');
// Script/control/top.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    mask: cc.Mask,
    weapon: cc.Sprite
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    game.on("zhujiaoXue", this.zhujiaoXue, this);
    game.on("weaponIndex", this.zhujiaoWeapon, this);
  },
  start: function start() {},
  zhujiaoWeapon: function zhujiaoWeapon(weaponIndex) {
    this.weapon.spriteFrame = game.map_atlas.getSpriteFrame("qiang" + weaponIndex);
  },
  zhujiaoXue: function zhujiaoXue(curHp, totalHp) {
    var progress = (curHp / totalHp).format();
    this.mask.node.width = progress * 286;
  },
  onGamePaues: function onGamePaues() {
    game.emit(game.gameEvent.popup_prefab, game.gamePopup.gamePause);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb250cm9sXFx0b3AuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJtYXNrIiwiTWFzayIsIndlYXBvbiIsIlNwcml0ZSIsIm9uRGVzdHJveSIsIm9uTG9hZCIsImdhbWUiLCJvbiIsInpodWppYW9YdWUiLCJ6aHVqaWFvV2VhcG9uIiwic3RhcnQiLCJ3ZWFwb25JbmRleCIsInNwcml0ZUZyYW1lIiwibWFwX2F0bGFzIiwiZ2V0U3ByaXRlRnJhbWUiLCJjdXJIcCIsInRvdGFsSHAiLCJwcm9ncmVzcyIsImZvcm1hdCIsIm5vZGUiLCJ3aWR0aCIsIm9uR2FtZVBhdWVzIiwiZW1pdCIsImdhbWVFdmVudCIsInBvcHVwX3ByZWZhYiIsImdhbWVQb3B1cCIsImdhbWVQYXVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLElBQUksRUFBRUosRUFBRSxDQUFDSyxJQUREO0FBRVJDLElBQUFBLE1BQU0sRUFBRU4sRUFBRSxDQUFDTztBQUZILEdBRlA7QUFNTEMsRUFBQUEsU0FOSyx1QkFNTyxDQUNYLENBUEk7QUFRTEMsRUFBQUEsTUFSSyxvQkFRSTtBQUNMQyxJQUFBQSxJQUFJLENBQUNDLEVBQUwsQ0FBUSxZQUFSLEVBQXNCLEtBQUtDLFVBQTNCLEVBQXVDLElBQXZDO0FBQ0FGLElBQUFBLElBQUksQ0FBQ0MsRUFBTCxDQUFRLGFBQVIsRUFBdUIsS0FBS0UsYUFBNUIsRUFBMkMsSUFBM0M7QUFDSCxHQVhJO0FBWUxDLEVBQUFBLEtBWkssbUJBWUcsQ0FDUCxDQWJJO0FBY0xELEVBQUFBLGFBZEsseUJBY1NFLFdBZFQsRUFjc0I7QUFDdkIsU0FBS1QsTUFBTCxDQUFZVSxXQUFaLEdBQTBCTixJQUFJLENBQUNPLFNBQUwsQ0FBZUMsY0FBZixDQUE4QixVQUFVSCxXQUF4QyxDQUExQjtBQUNILEdBaEJJO0FBaUJMSCxFQUFBQSxVQWpCSyxzQkFpQk1PLEtBakJOLEVBaUJhQyxPQWpCYixFQWlCc0I7QUFDdkIsUUFBSUMsUUFBUSxHQUFHLENBQUNGLEtBQUssR0FBR0MsT0FBVCxFQUFrQkUsTUFBbEIsRUFBZjtBQUNBLFNBQUtsQixJQUFMLENBQVVtQixJQUFWLENBQWVDLEtBQWYsR0FBdUJILFFBQVEsR0FBRyxHQUFsQztBQUNILEdBcEJJO0FBcUJMSSxFQUFBQSxXQXJCSyx5QkFxQlM7QUFDVmYsSUFBQUEsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVaEIsSUFBSSxDQUFDaUIsU0FBTCxDQUFlQyxZQUF6QixFQUF1Q2xCLElBQUksQ0FBQ21CLFNBQUwsQ0FBZUMsU0FBdEQ7QUFDSDtBQXZCSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgbWFzazogY2MuTWFzayxcclxuICAgICAgICB3ZWFwb246IGNjLlNwcml0ZVxyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgZ2FtZS5vbihcInpodWppYW9YdWVcIiwgdGhpcy56aHVqaWFvWHVlLCB0aGlzKTtcclxuICAgICAgICBnYW1lLm9uKFwid2VhcG9uSW5kZXhcIiwgdGhpcy56aHVqaWFvV2VhcG9uLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICB6aHVqaWFvV2VhcG9uKHdlYXBvbkluZGV4KSB7XHJcbiAgICAgICAgdGhpcy53ZWFwb24uc3ByaXRlRnJhbWUgPSBnYW1lLm1hcF9hdGxhcy5nZXRTcHJpdGVGcmFtZShcInFpYW5nXCIgKyB3ZWFwb25JbmRleCk7XHJcbiAgICB9LFxyXG4gICAgemh1amlhb1h1ZShjdXJIcCwgdG90YWxIcCkge1xyXG4gICAgICAgIHZhciBwcm9ncmVzcyA9IChjdXJIcCAvIHRvdGFsSHApLmZvcm1hdCgpO1xyXG4gICAgICAgIHRoaXMubWFzay5ub2RlLndpZHRoID0gcHJvZ3Jlc3MgKiAyODY7XHJcbiAgICB9LFxyXG4gICAgb25HYW1lUGF1ZXMoKSB7XHJcbiAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LnBvcHVwX3ByZWZhYiwgZ2FtZS5nYW1lUG9wdXAuZ2FtZVBhdXNlKTtcclxuICAgIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/roleRotation.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0f1abu+nMdGdKUwIJfTqxLo', 'roleRotation');
// Script/core/roleRotation.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    parent: cc.Node
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    this.idx = 0;
  },
  reuse: function reuse(data) {
    this.idx = 0;
    this.node.angle = 0;
  },
  unuse: function unuse() {
    this.node.angle = 0;
  },
  update: function update(dt) {
    if (!this.parent) return;
    this.idx++;

    if (this.idx % 10 == 0) {
      var idx = _.sortedIndex(game.mapXList, this.parent.x);

      if (idx > 0) idx--;

      if (idx >= 0 && idx < game.mapRotation.length) {
        var angle = game.mapRotation[idx];
        this.node.angle = angle;
      }
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxyb2xlUm90YXRpb24uanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInBhcmVudCIsIk5vZGUiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJpZHgiLCJyZXVzZSIsImRhdGEiLCJub2RlIiwiYW5nbGUiLCJ1bnVzZSIsInVwZGF0ZSIsImR0IiwiXyIsInNvcnRlZEluZGV4IiwiZ2FtZSIsIm1hcFhMaXN0IiwieCIsIm1hcFJvdGF0aW9uIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBM0IsRUFBOEM7OztBQUM5Q0MsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTSCxhQURKO0FBRUxJLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxNQUFNLEVBQUVILEVBQUUsQ0FBQ0k7QUFESCxHQUZQO0FBS0xDLEVBQUFBLFNBTEssdUJBS08sQ0FDWCxDQU5JO0FBT0xDLEVBQUFBLE1BUEssb0JBT0k7QUFDTCxTQUFLQyxHQUFMLEdBQVcsQ0FBWDtBQUNILEdBVEk7QUFVTEMsRUFBQUEsS0FWSyxpQkFVQ0MsSUFWRCxFQVVPO0FBQ1IsU0FBS0YsR0FBTCxHQUFXLENBQVg7QUFDQSxTQUFLRyxJQUFMLENBQVVDLEtBQVYsR0FBa0IsQ0FBbEI7QUFDSCxHQWJJO0FBY0xDLEVBQUFBLEtBZEssbUJBY0c7QUFDSixTQUFLRixJQUFMLENBQVVDLEtBQVYsR0FBa0IsQ0FBbEI7QUFDSCxHQWhCSTtBQWlCTEUsRUFBQUEsTUFqQkssa0JBaUJFQyxFQWpCRixFQWlCTTtBQUNQLFFBQUksQ0FBQyxLQUFLWCxNQUFWLEVBQWtCO0FBQ2xCLFNBQUtJLEdBQUw7O0FBQ0EsUUFBSSxLQUFLQSxHQUFMLEdBQVcsRUFBWCxJQUFpQixDQUFyQixFQUF3QjtBQUNwQixVQUFJQSxHQUFHLEdBQUdRLENBQUMsQ0FBQ0MsV0FBRixDQUFjQyxJQUFJLENBQUNDLFFBQW5CLEVBQTZCLEtBQUtmLE1BQUwsQ0FBWWdCLENBQXpDLENBQVY7O0FBQ0EsVUFBSVosR0FBRyxHQUFHLENBQVYsRUFBYUEsR0FBRzs7QUFDaEIsVUFBSUEsR0FBRyxJQUFJLENBQVAsSUFBWUEsR0FBRyxHQUFHVSxJQUFJLENBQUNHLFdBQUwsQ0FBaUJDLE1BQXZDLEVBQStDO0FBQzNDLFlBQUlWLEtBQUssR0FBR00sSUFBSSxDQUFDRyxXQUFMLENBQWlCYixHQUFqQixDQUFaO0FBQ0EsYUFBS0csSUFBTCxDQUFVQyxLQUFWLEdBQWtCQSxLQUFsQjtBQUNIO0FBQ0o7QUFDSjtBQTVCSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHBhcmVudDogY2MuTm9kZVxyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5pZHggPSAwO1xyXG4gICAgfSxcclxuICAgIHJldXNlKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmlkeCA9IDA7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFuZ2xlID0gMDtcclxuICAgIH0sXHJcbiAgICB1bnVzZSgpIHtcclxuICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSAwO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZShkdCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybjtcclxuICAgICAgICB0aGlzLmlkeCsrO1xyXG4gICAgICAgIGlmICh0aGlzLmlkeCAlIDEwID09IDApIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IF8uc29ydGVkSW5kZXgoZ2FtZS5tYXBYTGlzdCwgdGhpcy5wYXJlbnQueCk7XHJcbiAgICAgICAgICAgIGlmIChpZHggPiAwKSBpZHgtLTtcclxuICAgICAgICAgICAgaWYgKGlkeCA+PSAwICYmIGlkeCA8IGdhbWUubWFwUm90YXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYW5nbGUgPSBnYW1lLm1hcFJvdGF0aW9uW2lkeF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSBhbmdsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/uiNode.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b1596gnZApNzpjR+zLcdQvn', 'uiNode');
// Script/core/uiNode.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    cc.game.addPersistRootNode(this.node); //添加常驻节点

    game.on("aa", function (txt) {
      cc.log(txt);
    }); //game.gameConfig.junguan.attack;
  },
  start: function start() {},
  //返回界面
  oBack: function oBack(event, value) {
    game.emit(game.gameEvent.load_scene, game.gameScene.hall);
  },
  showPhysicsManager: function showPhysicsManager() {
    var physicsManager = cc.director.getPhysicsManager();

    if (physicsManager.debugDrawFlags == 0) {
      physicsManager.debugDrawFlags = // 0;
      cc.PhysicsManager.DrawBits.e_aabbBit | cc.PhysicsManager.DrawBits.e_jointBit | cc.PhysicsManager.DrawBits.e_shapeBit;
    } else {
      physicsManager.debugDrawFlags = 0;
    } //  physicsManager.enabled = true;

  },
  showDebugDraw: function showDebugDraw() {
    cc.director.getCollisionManager().enabledDebugDraw = !cc.director.getCollisionManager().enabledDebugDraw;
  },
  showTest: function showTest() {
    game.emit(game.gameEvent.popup_prefab, game.gamePopup.gameOver, {
      test: 123
    });
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFx1aU5vZGUuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJnYW1lIiwiYWRkUGVyc2lzdFJvb3ROb2RlIiwibm9kZSIsIm9uIiwidHh0IiwibG9nIiwic3RhcnQiLCJvQmFjayIsImV2ZW50IiwidmFsdWUiLCJlbWl0IiwiZ2FtZUV2ZW50IiwibG9hZF9zY2VuZSIsImdhbWVTY2VuZSIsImhhbGwiLCJzaG93UGh5c2ljc01hbmFnZXIiLCJwaHlzaWNzTWFuYWdlciIsImRpcmVjdG9yIiwiZ2V0UGh5c2ljc01hbmFnZXIiLCJkZWJ1Z0RyYXdGbGFncyIsIlBoeXNpY3NNYW5hZ2VyIiwiRHJhd0JpdHMiLCJlX2FhYmJCaXQiLCJlX2pvaW50Qml0IiwiZV9zaGFwZUJpdCIsInNob3dEZWJ1Z0RyYXciLCJnZXRDb2xsaXNpb25NYW5hZ2VyIiwiZW5hYmxlZERlYnVnRHJhdyIsInNob3dUZXN0IiwicG9wdXBfcHJlZmFiIiwiZ2FtZVBvcHVwIiwiZ2FtZU92ZXIiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxTQUhLLHVCQUdPLENBQ1gsQ0FKSTtBQUtMQyxFQUFBQSxNQUxLLG9CQUtJO0FBQ0xMLElBQUFBLEVBQUUsQ0FBQ00sSUFBSCxDQUFRQyxrQkFBUixDQUEyQixLQUFLQyxJQUFoQyxFQURLLENBQ2tDOztBQUN2Q0YsSUFBQUEsSUFBSSxDQUFDRyxFQUFMLENBQVEsSUFBUixFQUFjLFVBQVVDLEdBQVYsRUFBZTtBQUN6QlYsTUFBQUEsRUFBRSxDQUFDVyxHQUFILENBQU9ELEdBQVA7QUFDSCxLQUZELEVBRkssQ0FLTDtBQUNILEdBWEk7QUFZTEUsRUFBQUEsS0FaSyxtQkFZRyxDQUNQLENBYkk7QUFjTDtBQUNBQyxFQUFBQSxLQWZLLGlCQWVDQyxLQWZELEVBZVFDLEtBZlIsRUFlZTtBQUNoQlQsSUFBQUEsSUFBSSxDQUFDVSxJQUFMLENBQVVWLElBQUksQ0FBQ1csU0FBTCxDQUFlQyxVQUF6QixFQUFxQ1osSUFBSSxDQUFDYSxTQUFMLENBQWVDLElBQXBEO0FBQ0gsR0FqQkk7QUFrQkxDLEVBQUFBLGtCQWxCSyxnQ0FrQmdCO0FBQ2pCLFFBQUlDLGNBQWMsR0FBR3RCLEVBQUUsQ0FBQ3VCLFFBQUgsQ0FBWUMsaUJBQVosRUFBckI7O0FBQ0EsUUFBSUYsY0FBYyxDQUFDRyxjQUFmLElBQWlDLENBQXJDLEVBQXdDO0FBQ3BDSCxNQUFBQSxjQUFjLENBQUNHLGNBQWYsR0FBZ0M7QUFDNUJ6QixNQUFBQSxFQUFFLENBQUMwQixjQUFILENBQWtCQyxRQUFsQixDQUEyQkMsU0FBM0IsR0FDQTVCLEVBQUUsQ0FBQzBCLGNBQUgsQ0FBa0JDLFFBQWxCLENBQTJCRSxVQUQzQixHQUVBN0IsRUFBRSxDQUFDMEIsY0FBSCxDQUFrQkMsUUFBbEIsQ0FBMkJHLFVBSC9CO0FBSUgsS0FMRCxNQU1LO0FBQ0RSLE1BQUFBLGNBQWMsQ0FBQ0csY0FBZixHQUFnQyxDQUFoQztBQUNILEtBVmdCLENBV2pCOztBQUNILEdBOUJJO0FBK0JMTSxFQUFBQSxhQS9CSywyQkErQlc7QUFDWi9CLElBQUFBLEVBQUUsQ0FBQ3VCLFFBQUgsQ0FBWVMsbUJBQVosR0FBa0NDLGdCQUFsQyxHQUFxRCxDQUFDakMsRUFBRSxDQUFDdUIsUUFBSCxDQUFZUyxtQkFBWixHQUFrQ0MsZ0JBQXhGO0FBQ0gsR0FqQ0k7QUFrQ0xDLEVBQUFBLFFBbENLLHNCQWtDTTtBQUNQNUIsSUFBQUEsSUFBSSxDQUFDVSxJQUFMLENBQVVWLElBQUksQ0FBQ1csU0FBTCxDQUFla0IsWUFBekIsRUFBdUM3QixJQUFJLENBQUM4QixTQUFMLENBQWVDLFFBQXRELEVBQWdFO0FBQUNDLE1BQUFBLElBQUksRUFBRTtBQUFQLEtBQWhFO0FBQ0gsR0FwQ0ksQ0FzQ0w7O0FBdENLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBjYy5nYW1lLmFkZFBlcnNpc3RSb290Tm9kZSh0aGlzLm5vZGUpOyAvL+a3u+WKoOW4uOmpu+iKgueCuVxyXG4gICAgICAgIGdhbWUub24oXCJhYVwiLCBmdW5jdGlvbiAodHh0KSB7XHJcbiAgICAgICAgICAgIGNjLmxvZyh0eHQpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAvL2dhbWUuZ2FtZUNvbmZpZy5qdW5ndWFuLmF0dGFjaztcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICAvL+i/lOWbnueVjOmdolxyXG4gICAgb0JhY2soZXZlbnQsIHZhbHVlKSB7XHJcbiAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmxvYWRfc2NlbmUsIGdhbWUuZ2FtZVNjZW5lLmhhbGwpO1xyXG4gICAgfSxcclxuICAgIHNob3dQaHlzaWNzTWFuYWdlcigpIHtcclxuICAgICAgICBsZXQgcGh5c2ljc01hbmFnZXIgPSBjYy5kaXJlY3Rvci5nZXRQaHlzaWNzTWFuYWdlcigpO1xyXG4gICAgICAgIGlmIChwaHlzaWNzTWFuYWdlci5kZWJ1Z0RyYXdGbGFncyA9PSAwKSB7XHJcbiAgICAgICAgICAgIHBoeXNpY3NNYW5hZ2VyLmRlYnVnRHJhd0ZsYWdzID0gLy8gMDtcclxuICAgICAgICAgICAgICAgIGNjLlBoeXNpY3NNYW5hZ2VyLkRyYXdCaXRzLmVfYWFiYkJpdCB8XHJcbiAgICAgICAgICAgICAgICBjYy5QaHlzaWNzTWFuYWdlci5EcmF3Qml0cy5lX2pvaW50Qml0IHxcclxuICAgICAgICAgICAgICAgIGNjLlBoeXNpY3NNYW5hZ2VyLkRyYXdCaXRzLmVfc2hhcGVCaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwaHlzaWNzTWFuYWdlci5kZWJ1Z0RyYXdGbGFncyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vICBwaHlzaWNzTWFuYWdlci5lbmFibGVkID0gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBzaG93RGVidWdEcmF3KCkge1xyXG4gICAgICAgIGNjLmRpcmVjdG9yLmdldENvbGxpc2lvbk1hbmFnZXIoKS5lbmFibGVkRGVidWdEcmF3ID0gIWNjLmRpcmVjdG9yLmdldENvbGxpc2lvbk1hbmFnZXIoKS5lbmFibGVkRGVidWdEcmF3O1xyXG4gICAgfSxcclxuICAgIHNob3dUZXN0KCkge1xyXG4gICAgICAgIGdhbWUuZW1pdChnYW1lLmdhbWVFdmVudC5wb3B1cF9wcmVmYWIsIGdhbWUuZ2FtZVBvcHVwLmdhbWVPdmVyLCB7dGVzdDogMTIzfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/rotationNode.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b488bP9vHxDbIi70Q0n8pxm', 'rotationNode');
// Script/core/rotationNode.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {// var seq = cc.repeatForever(cc.sequence(cc.rotateTo(1, 90),cc.rotateTo(1, 180),cc.rotateTo(1, 270),cc.rotateTo(1, 360)));
    // this.node.runAction(seq)
  },
  start: function start() {},
  update: function update(dt) {
    this.node.angle -= dt * 360 / 1.5;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxyb3RhdGlvbk5vZGUuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzdGFydCIsInVwZGF0ZSIsImR0Iiwibm9kZSIsImFuZ2xlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxTQUhLLHVCQUdPLENBQ1gsQ0FKSTtBQUtMQyxFQUFBQSxNQUxLLG9CQUtJLENBQ0w7QUFDQTtBQUNILEdBUkk7QUFTTEMsRUFBQUEsS0FUSyxtQkFTRyxDQUNQLENBVkk7QUFXTEMsRUFBQUEsTUFYSyxrQkFXRUMsRUFYRixFQVdNO0FBQ1AsU0FBS0MsSUFBTCxDQUFVQyxLQUFWLElBQW9CRixFQUFFLEdBQUcsR0FBTixHQUFhLEdBQWhDO0FBQ0g7QUFiSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgLy8gdmFyIHNlcSA9IGNjLnJlcGVhdEZvcmV2ZXIoY2Muc2VxdWVuY2UoY2Mucm90YXRlVG8oMSwgOTApLGNjLnJvdGF0ZVRvKDEsIDE4MCksY2Mucm90YXRlVG8oMSwgMjcwKSxjYy5yb3RhdGVUbygxLCAzNjApKSk7XHJcbiAgICAgICAgLy8gdGhpcy5ub2RlLnJ1bkFjdGlvbihzZXEpXHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlKGR0KSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFuZ2xlIC09IChkdCAqIDM2MCkgLyAxLjU7XHJcbiAgICB9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/control/buttonControl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dda4e5nWIFN9YJxcT6ANnAN', 'buttonControl');
// Script/control/buttonControl.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    left: cc.Node,
    right: cc.Node,
    up: cc.Node,
    //down: cc.Node,
    switchBtn: cc.Node,
    shoot: cc.Node
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  onEnable: function onEnable() {
    // this.left.on(cc.Node.EventType.TOUCH_START, this.leftTouchStart, this);
    // this.left.on(cc.Node.EventType.TOUCH_END, this.leftTouchEnd, this);
    // this.left.on(cc.Node.EventType.TOUCH_CANCEL, this.leftTouchEnd, this);
    // this.right.on(cc.Node.EventType.TOUCH_START, this.rightTouchStart, this);
    // this.right.on(cc.Node.EventType.TOUCH_END, this.rightTouchEnd, this);
    // this.right.on(cc.Node.EventType.TOUCH_CANCEL, this.rightTouchEnd, this);
    this.up.on(cc.Node.EventType.TOUCH_START, this.upTouchStart, this);
    this.up.on(cc.Node.EventType.TOUCH_END, this.upTouchEnd, this);
    this.up.on(cc.Node.EventType.TOUCH_CANCEL, this.upTouchEnd, this); // this.down.on(cc.Node.EventType.TOUCH_START, this.downTouchStart, this);
    // this.down.on(cc.Node.EventType.TOUCH_END, this.downTouchEnd, this);
    // this.down.on(cc.Node.EventType.TOUCH_CANCEL, this.downTouchEnd, this);

    this.switchBtn.on(cc.Node.EventType.TOUCH_START, this.switchTouchStart, this);
    this.switchBtn.on(cc.Node.EventType.TOUCH_END, this.switchTouchEnd, this);
    this.switchBtn.on(cc.Node.EventType.TOUCH_CANCEL, this.switchTouchEnd, this);
    this.shoot.on(cc.Node.EventType.TOUCH_START, this.shootStart, this);
    this.shoot.on(cc.Node.EventType.TOUCH_END, this.shootEnd, this);
    this.shoot.on(cc.Node.EventType.TOUCH_CANCEL, this.shootEnd, this);
  },
  onDisable: function onDisable() {
    // this.left.off(cc.Node.EventType.TOUCH_START, this.leftTouchStart, this);
    // this.left.off(cc.Node.EventType.TOUCH_END, this.leftTouchEnd, this);
    // this.left.off(cc.Node.EventType.TOUCH_CANCEL, this.leftTouchEnd, this);
    // this.right.off(cc.Node.EventType.TOUCH_START, this.rightTouchStart, this);
    // this.right.off(cc.Node.EventType.TOUCH_END, this.rightTouchEnd, this);
    // this.right.off(cc.Node.EventType.TOUCH_CANCEL, this.rightTouchEnd, this);
    this.up.off(cc.Node.EventType.TOUCH_START, this.upTouchStart, this);
    this.up.off(cc.Node.EventType.TOUCH_END, this.upTouchEnd, this);
    this.up.off(cc.Node.EventType.TOUCH_CANCEL, this.upTouchEnd, this); // this.down.off(cc.Node.EventType.TOUCH_START, this.downTouchStart, this);
    // this.down.off(cc.Node.EventType.TOUCH_END, this.downTouchEnd, this);
    // this.down.off(cc.Node.EventType.TOUCH_CANCEL, this.downTouchEnd, this);

    this.switchBtn.off(cc.Node.EventType.TOUCH_START, this.switchTouchStart, this);
    this.switchBtn.off(cc.Node.EventType.TOUCH_END, this.switchTouchEnd, this);
    this.switchBtn.off(cc.Node.EventType.TOUCH_CANCEL, this.switchTouchEnd, this);
    this.shoot.off(cc.Node.EventType.TOUCH_START, this.shootStart, this);
    this.shoot.off(cc.Node.EventType.TOUCH_END, this.shootEnd, this);
    this.shoot.off(cc.Node.EventType.TOUCH_CANCEL, this.shootEnd, this);
  },
  leftTouchStart: function leftTouchStart(e) {
    game.emit("key_down", game.gameControl.left);
  },
  leftTouchEnd: function leftTouchEnd(e) {
    game.emit("key_up", game.gameControl.left);
  },
  rightTouchStart: function rightTouchStart(e) {
    game.emit("key_down", game.gameControl.right);
  },
  rightTouchEnd: function rightTouchEnd(e) {
    game.emit("key_up", game.gameControl.right);
  },
  upTouchStart: function upTouchStart(e) {
    game.emit("key_down", game.gameControl.up);
  },
  upTouchEnd: function upTouchEnd(e) {
    game.emit("key_up", game.gameControl.up);
  },
  downTouchStart: function downTouchStart(e) {
    game.emit("key_down", game.gameControl.down);
  },
  downTouchEnd: function downTouchEnd(e) {
    game.emit("key_up", game.gameControl.down);
  },
  switchTouchStart: function switchTouchStart(e) {
    game.emit("key_down", game.gameControl.weapons);
  },
  switchTouchEnd: function switchTouchEnd(e) {
    game.emit("key_up", game.gameControl.weapons);
  },
  shootStart: function shootStart(touch) {
    game.emit("aim", true);
    game.touchDown = true;
  },
  shootEnd: function shootEnd(touch) {
    game.touchDown = false;
    game.emit("aim", false);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/utils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7ef5fb5G1dGnKVJk1K0Xvy/', 'utils');
// Script/core/utils.js

"use strict";

Number.prototype.format = function (a) {
  a = a || 3;
  a++;
  var add = Math.pow(10, a);
  var num = Math.round(this * add);
  var str = num.toString();
  var fu = str.substring(0, 1);

  if (fu == "-" || fu == "+") {
    //带符号的情况
    str = str.substring(1, str.length);
  } else {
    fu = "+";
  }

  while (str.length < a) {
    str = "0" + str;
  }

  var str2 = fu + str.substring(0, str.length - a) + "." + str.substring(str.length - a, str.length - 1);
  return parseFloat(str2);
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFx1dGlscy5qcyJdLCJuYW1lcyI6WyJOdW1iZXIiLCJwcm90b3R5cGUiLCJmb3JtYXQiLCJhIiwiYWRkIiwiTWF0aCIsInBvdyIsIm51bSIsInJvdW5kIiwic3RyIiwidG9TdHJpbmciLCJmdSIsInN1YnN0cmluZyIsImxlbmd0aCIsInN0cjIiLCJwYXJzZUZsb2F0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLE1BQWpCLEdBQTBCLFVBQVVDLENBQVYsRUFBYTtBQUNuQ0EsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLElBQUksQ0FBVDtBQUNBQSxFQUFBQSxDQUFDO0FBQ0QsTUFBSUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxFQUFULEVBQWFILENBQWIsQ0FBVjtBQUNBLE1BQUlJLEdBQUcsR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsT0FBT0osR0FBbEIsQ0FBVjtBQUNBLE1BQUlLLEdBQUcsR0FBR0YsR0FBRyxDQUFDRyxRQUFKLEVBQVY7QUFDQSxNQUFJQyxFQUFFLEdBQUdGLEdBQUcsQ0FBQ0csU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FBVDs7QUFDQSxNQUFJRCxFQUFFLElBQUksR0FBTixJQUFhQSxFQUFFLElBQUksR0FBdkIsRUFBNEI7QUFBRTtBQUMxQkYsSUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNHLFNBQUosQ0FBYyxDQUFkLEVBQWlCSCxHQUFHLENBQUNJLE1BQXJCLENBQU47QUFDSCxHQUZELE1BR0s7QUFDREYsSUFBQUEsRUFBRSxHQUFHLEdBQUw7QUFDSDs7QUFDRCxTQUFPRixHQUFHLENBQUNJLE1BQUosR0FBYVYsQ0FBcEI7QUFDSU0sSUFBQUEsR0FBRyxHQUFHLE1BQU1BLEdBQVo7QUFESjs7QUFFQSxNQUFJSyxJQUFJLEdBQUdILEVBQUUsR0FBR0YsR0FBRyxDQUFDRyxTQUFKLENBQWMsQ0FBZCxFQUFpQkgsR0FBRyxDQUFDSSxNQUFKLEdBQWFWLENBQTlCLENBQUwsR0FBd0MsR0FBeEMsR0FBOENNLEdBQUcsQ0FBQ0csU0FBSixDQUFjSCxHQUFHLENBQUNJLE1BQUosR0FBYVYsQ0FBM0IsRUFBOEJNLEdBQUcsQ0FBQ0ksTUFBSixHQUFhLENBQTNDLENBQXpEO0FBQ0EsU0FBT0UsVUFBVSxDQUFDRCxJQUFELENBQWpCO0FBQ0gsQ0FqQkQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIk51bWJlci5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGEpIHtcclxuICAgIGEgPSBhIHx8IDM7XHJcbiAgICBhKys7XHJcbiAgICB2YXIgYWRkID0gTWF0aC5wb3coMTAsIGEpO1xyXG4gICAgdmFyIG51bSA9IE1hdGgucm91bmQodGhpcyAqIGFkZCk7XHJcbiAgICB2YXIgc3RyID0gbnVtLnRvU3RyaW5nKCk7XHJcbiAgICB2YXIgZnUgPSBzdHIuc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgaWYgKGZ1ID09IFwiLVwiIHx8IGZ1ID09IFwiK1wiKSB7IC8v5bim56ym5Y+355qE5oOF5Ya1XHJcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygxLCBzdHIubGVuZ3RoKVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZnUgPSBcIitcIlxyXG4gICAgfVxyXG4gICAgd2hpbGUgKHN0ci5sZW5ndGggPCBhKVxyXG4gICAgICAgIHN0ciA9IFwiMFwiICsgc3RyO1xyXG4gICAgdmFyIHN0cjIgPSBmdSArIHN0ci5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIGEpICsgXCIuXCIgKyBzdHIuc3Vic3RyaW5nKHN0ci5sZW5ndGggLSBhLCBzdHIubGVuZ3RoIC0gMSk7XHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHIyKTtcclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/widget_child.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ab997Kv4ptMJYNoOxmJzmm6', 'widget_child');
// Script/core/widget_child.js

"use strict";

cc.Class({
  "extends": cc.Component,
  //根据子节点的占用空间 重新设计宽高
  properties: {
    childNode: cc.Node
  },
  onLoad: function onLoad() {
    this.node.width = this.childNode.width;
    this.node.height = this.childNode.height;
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFx3aWRnZXRfY2hpbGQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJjaGlsZE5vZGUiLCJOb2RlIiwib25Mb2FkIiwibm9kZSIsIndpZHRoIiwiaGVpZ2h0Iiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUw7QUFDQUMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLFNBQVMsRUFBRUosRUFBRSxDQUFDSztBQUROLEdBSFA7QUFNTEMsRUFBQUEsTUFOSyxvQkFNSTtBQUNMLFNBQUtDLElBQUwsQ0FBVUMsS0FBVixHQUFrQixLQUFLSixTQUFMLENBQWVJLEtBQWpDO0FBQ0EsU0FBS0QsSUFBTCxDQUFVRSxNQUFWLEdBQW1CLEtBQUtMLFNBQUwsQ0FBZUssTUFBbEM7QUFDSCxHQVRJO0FBVUxDLEVBQUFBLEtBVkssbUJBVUcsQ0FDUCxDQVhJO0FBWUxDLEVBQUFBLFNBWkssdUJBWU8sQ0FDWCxDQWJJLENBY0w7O0FBZEssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgLy/moLnmja7lrZDoioLngrnnmoTljaDnlKjnqbrpl7Qg6YeN5paw6K6+6K6h5a696auYXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgY2hpbGROb2RlOiBjYy5Ob2RlXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS53aWR0aCA9IHRoaXMuY2hpbGROb2RlLndpZHRoO1xyXG4gICAgICAgIHRoaXMubm9kZS5oZWlnaHQgPSB0aGlzLmNoaWxkTm9kZS5oZWlnaHQ7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemyMove.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a1e37BHhpJJJahXIx5PAy6z', 'enemyMove');
// Script/enemy/enemyMove.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    maxSpeed: 100,
    //最大速度
    jumps: 2,
    //跳跃次数
    // acceleration: 1500,//加速度
    jumpSpeed: 500,
    //跳跃速度
    drag: 600 //拖拽速度

  },
  unuse: function unuse() {
    this.node.off("key_down", this.onKeyDown, this);
    this.node.off("key_up", this.onKeyUp, this);
  },
  reuse: function reuse(data) {
    this._moveFlags = 0;
    this.node.roleState = this.roleState = 0; //角色状态  0=静止 1=移动 2=跳跃

    this._up = false;
    this.jumping = false;
    this.node.zIndex = 10;
    this.node.on("key_down", this.onKeyDown, this);
    this.node.on("key_up", this.onKeyUp, this);
  },
  onDisable: function onDisable() {},
  onLoad: function onLoad() {
    this.body = this.getComponent(cc.RigidBody);
  },
  onDestroy: function onDestroy() {},
  onKeyDown: function onKeyDown(data) {
    if (this.node.isDeath) return;
    if (game.isOver) return;

    switch (data) {
      case game.gameControl.left:
        this._moveFlags |= game.gameAction.MOVE_LEFT;
        break;

      case game.gameControl.right:
        this._moveFlags |= game.gameAction.MOVE_RIGHT;
        break;

      case game.gameControl.up:
        if (!this._upPressed) {
          this._up = true;
        }

        this._upPressed = true;
        break;

      case game.gameControl.down:
        //this.node.emit("switchSkin");//更改方向
        break;

      case game.gameControl.weapons:
        this.node.emit("switchSkin"); //更改方向

        break;
    }
  },
  onKeyUp: function onKeyUp(data) {
    if (this.node.isDeath) return;
    if (game.isOver) return;

    switch (data) {
      case game.gameControl.left:
        this._moveFlags &= ~game.gameAction.MOVE_LEFT;
        break;

      case game.gameControl.right:
        this._moveFlags &= ~game.gameAction.MOVE_RIGHT;
        break;

      case game.gameControl.down:
      case game.gameControl.up:
        this._upPressed = false;
        break;
    }
  },
  // 只在两个碰撞体开始接触时被调用一次
  onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
    this.jumping = false;
  },
  // 只在两个碰撞体结束接触时被调用一次
  onEndContact: function onEndContact(contact, selfCollider, otherCollider) {},
  // 每次将要处理碰撞体接触逻辑时被调用
  onPreSolve: function onPreSolve(contact, selfCollider, otherCollider) {},
  // 每次处理完碰撞体接触逻辑时被调用
  onPostSolve: function onPostSolve(contact, selfCollider, otherCollider) {},
  update: function update(dt) {
    if (game.isOver) return;
    var speed = this.body.linearVelocity;

    if (this.node.isDeath) {
      speed.x = 0;
      this.body.linearVelocity = speed;
      return;
    }

    if (this._moveFlags === game.gameAction.MOVE_LEFT) {
      // speed.x -= this.acceleration * dt;
      // if (speed.x < -this.maxSpeed) {
      //     speed.x = -this.maxSpeed;
      // }
      speed.x = -this.maxSpeed;
      this.node.emit("changeDirection", -1); //更改方向
    } else if (this._moveFlags === game.gameAction.MOVE_RIGHT) {
      // speed.x += this.acceleration * dt;
      // if (speed.x > this.maxSpeed) {
      //     speed.x = this.maxSpeed;
      // }
      speed.x = this.maxSpeed;
      this.node.emit("changeDirection", 1); //更改方向
    } else {
      speed.x = 0; // if (speed.x != 0) {
      //     var d = this.drag * dt;
      //     if (Math.abs(speed.x) <= d) {
      //         speed.x = 0;
      //     } else {
      //         speed.x -= speed.x > 0 ? d : -d;
      //     }
      // }
    }

    if (Math.abs(speed.y) < 1) {
      this.jumps = 2;
    }

    if (this.jumps > 0 && this._up) {
      speed.y = this.jumpSpeed;
      this.jumps--;
      this.setState(2);
      this.jumping = true;
    }

    this._up = false;

    if (this.jumping == false) {
      if (speed.x > 0 || speed.x < 0) {
        this.setState(1);
      } else {
        this.setState(0);
      }
    }

    if (speed.x != 0) {
      if (speed.x < 0) {
        if (this.node.x < game.mapRect.x + 10) {
          speed.x = 0;
        }
      } else {
        if (this.node.x > game.mapRect.x + game.mapRect.width - 10) {
          speed.x = 0;
        }
      }

      if (speed.y == 0) {
        speed.y = 10;
      }
    }

    this.body.linearVelocity = speed;
  },
  //设置角色状态
  setState: function setState(value) {
    if (this.roleState == value) return;
    this.node.roleState = this.roleState = value;
    this.node.emit("roleState", this.roleState); //更改动作
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemySettng.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6ecf2+i3l1Giop2hM3sD43b', 'enemySettng');
// Script/enemy/enemySettng.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onLoad: function onLoad() {
    var parent = this.node.parent; //父节点

    var box = this.node.getComponent(cc.BoxCollider); //碰撞组件

    if (box) {
      var parentBox = parent.getComponent(cc.PhysicsBoxCollider); //物理引擎碰撞组件

      parentBox.offset = box.offset.clone();
      parentBox.size = box.size.clone();
    } else {// box = this.node.getComponent(cc.PolygonCollider); //碰撞组件
      // var parentBox = parent.getComponent(cc.PhysicsPolygonCollider);//物理引擎碰撞组件
      // parentBox.points = box.points;
    }
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxlbmVteVxcZW5lbXlTZXR0bmcuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkxvYWQiLCJwYXJlbnQiLCJub2RlIiwiYm94IiwiZ2V0Q29tcG9uZW50IiwiQm94Q29sbGlkZXIiLCJwYXJlbnRCb3giLCJQaHlzaWNzQm94Q29sbGlkZXIiLCJvZmZzZXQiLCJjbG9uZSIsInNpemUiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsTUFISyxvQkFHSTtBQUNMLFFBQUlDLE1BQU0sR0FBRyxLQUFLQyxJQUFMLENBQVVELE1BQXZCLENBREssQ0FDMEI7O0FBQy9CLFFBQUlFLEdBQUcsR0FBRyxLQUFLRCxJQUFMLENBQVVFLFlBQVYsQ0FBdUJSLEVBQUUsQ0FBQ1MsV0FBMUIsQ0FBVixDQUZLLENBRTZDOztBQUNsRCxRQUFJRixHQUFKLEVBQVM7QUFDTCxVQUFJRyxTQUFTLEdBQUdMLE1BQU0sQ0FBQ0csWUFBUCxDQUFvQlIsRUFBRSxDQUFDVyxrQkFBdkIsQ0FBaEIsQ0FESyxDQUNzRDs7QUFDM0RELE1BQUFBLFNBQVMsQ0FBQ0UsTUFBVixHQUFtQkwsR0FBRyxDQUFDSyxNQUFKLENBQVdDLEtBQVgsRUFBbkI7QUFDQUgsTUFBQUEsU0FBUyxDQUFDSSxJQUFWLEdBQWlCUCxHQUFHLENBQUNPLElBQUosQ0FBU0QsS0FBVCxFQUFqQjtBQUNILEtBSkQsTUFLSyxDQUNEO0FBQ0E7QUFDQTtBQUNIO0FBQ0osR0FoQkk7QUFpQkxFLEVBQUFBLEtBakJLLG1CQWlCRyxDQUNQLENBbEJJLENBbUJMOztBQW5CSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5ub2RlLnBhcmVudDsgLy/niLboioLngrlcclxuICAgICAgICB2YXIgYm94ID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5Cb3hDb2xsaWRlcik7IC8v56Kw5pKe57uE5Lu2XHJcbiAgICAgICAgaWYgKGJveCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50Qm94ID0gcGFyZW50LmdldENvbXBvbmVudChjYy5QaHlzaWNzQm94Q29sbGlkZXIpOy8v54mp55CG5byV5pOO56Kw5pKe57uE5Lu2XHJcbiAgICAgICAgICAgIHBhcmVudEJveC5vZmZzZXQgPSBib3gub2Zmc2V0LmNsb25lKCk7XHJcbiAgICAgICAgICAgIHBhcmVudEJveC5zaXplID0gYm94LnNpemUuY2xvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGJveCA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuUG9seWdvbkNvbGxpZGVyKTsgLy/norDmkp7nu4Tku7ZcclxuICAgICAgICAgICAgLy8gdmFyIHBhcmVudEJveCA9IHBhcmVudC5nZXRDb21wb25lbnQoY2MuUGh5c2ljc1BvbHlnb25Db2xsaWRlcik7Ly/niannkIblvJXmk47norDmkp7nu4Tku7ZcclxuICAgICAgICAgICAgLy8gcGFyZW50Qm94LnBvaW50cyA9IGJveC5wb2ludHM7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemyMelee.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '21c8dFsJ8FAxpIyuysBCphu', 'enemyMelee');
// Script/enemy/enemyMelee.js

"use strict";

var PoolComponent = require("PoolComponent");

cc.Class({
  "extends": PoolComponent,
  properties: {
    parent: cc.Node
  },
  unuse: function unuse() {
    this.shooting = false;
    this.parent.off("shoot_start", this.shoot_start, this);
    this.parent.off("shoot_end", this.shoot_end, this);
  },
  reuse: function reuse(data) {
    this.data = data;
    if (!this.parent) this.parent = this.node.parent;
    this.parent.on("shoot_start", this.shoot_start, this);
    this.parent.on("shoot_end", this.shoot_end, this);
    this.shooting = false;
  },
  //碰撞进入
  onCollisionEnter: function onCollisionEnter(other, self) {
    if (this.parent.isDeath) return;
    if (game.isOver) return;

    if (this.shooting) {
      this.shoot(other);
    }
  },
  //碰撞停留
  onCollisionStay: function onCollisionStay(other, self) {
    if (this.shooting) {
      this.shoot(other);
    }
  },
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {},
  //开始射击
  shoot_start: function shoot_start() {
    this.shooting = true;
  },
  //射击动作结束
  shoot_end: function shoot_end() {
    this.shooting = false;
  },
  //该方法为生命周期方法，父类未必会有实现。
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  shoot: function shoot(other) {
    this.shooting = false;
    var hps = other.node.getComponentsInChildren("hpComponent");

    if (hps && hps.length) {
      var hp = hps[0];
      hp.onHurt(this.data.attack);
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxlbmVteVxcZW5lbXlNZWxlZS5qcyJdLCJuYW1lcyI6WyJQb29sQ29tcG9uZW50IiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwicGFyZW50IiwiTm9kZSIsInVudXNlIiwic2hvb3RpbmciLCJvZmYiLCJzaG9vdF9zdGFydCIsInNob290X2VuZCIsInJldXNlIiwiZGF0YSIsIm5vZGUiLCJvbiIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvdGhlciIsInNlbGYiLCJpc0RlYXRoIiwiZ2FtZSIsImlzT3ZlciIsInNob290Iiwib25Db2xsaXNpb25TdGF5Iiwib25Db2xsaXNpb25FeGl0Iiwib25EZXN0cm95Iiwib25Mb2FkIiwiaHBzIiwiZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4iLCJsZW5ndGgiLCJocCIsIm9uSHVydCIsImF0dGFjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTNCOztBQUNBQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLE1BQU0sRUFBRUgsRUFBRSxDQUFDSTtBQURILEdBRlA7QUFLTEMsRUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBQ2YsU0FBS0MsUUFBTCxHQUFnQixLQUFoQjtBQUNBLFNBQUtILE1BQUwsQ0FBWUksR0FBWixDQUFnQixhQUFoQixFQUErQixLQUFLQyxXQUFwQyxFQUFpRCxJQUFqRDtBQUNBLFNBQUtMLE1BQUwsQ0FBWUksR0FBWixDQUFnQixXQUFoQixFQUE2QixLQUFLRSxTQUFsQyxFQUE2QyxJQUE3QztBQUNILEdBVEk7QUFVTEMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0I7QUFDbkIsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsUUFBSSxDQUFDLEtBQUtSLE1BQVYsRUFBa0IsS0FBS0EsTUFBTCxHQUFjLEtBQUtTLElBQUwsQ0FBVVQsTUFBeEI7QUFDbEIsU0FBS0EsTUFBTCxDQUFZVSxFQUFaLENBQWUsYUFBZixFQUE4QixLQUFLTCxXQUFuQyxFQUFnRCxJQUFoRDtBQUNBLFNBQUtMLE1BQUwsQ0FBWVUsRUFBWixDQUFlLFdBQWYsRUFBNEIsS0FBS0osU0FBakMsRUFBNEMsSUFBNUM7QUFDQSxTQUFLSCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0gsR0FoQkk7QUFpQkw7QUFDQVEsRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3JDLFFBQUksS0FBS2IsTUFBTCxDQUFZYyxPQUFoQixFQUF5QjtBQUN6QixRQUFJQyxJQUFJLENBQUNDLE1BQVQsRUFBaUI7O0FBQ2pCLFFBQUksS0FBS2IsUUFBVCxFQUFtQjtBQUNmLFdBQUtjLEtBQUwsQ0FBV0wsS0FBWDtBQUNIO0FBQ0osR0F4Qkk7QUF5Qkw7QUFDQU0sRUFBQUEsZUFBZSxFQUFFLHlCQUFVTixLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUNwQyxRQUFJLEtBQUtWLFFBQVQsRUFBbUI7QUFDZixXQUFLYyxLQUFMLENBQVdMLEtBQVg7QUFDSDtBQUNKLEdBOUJJO0FBK0JMO0FBQ0FPLEVBQUFBLGVBQWUsRUFBRSx5QkFBVVAsS0FBVixFQUFpQkMsSUFBakIsRUFBdUIsQ0FDdkMsQ0FqQ0k7QUFrQ0w7QUFDQVIsRUFBQUEsV0FuQ0sseUJBbUNTO0FBQ1YsU0FBS0YsUUFBTCxHQUFnQixJQUFoQjtBQUNILEdBckNJO0FBc0NMO0FBQ0FHLEVBQUFBLFNBdkNLLHVCQXVDTztBQUNSLFNBQUtILFFBQUwsR0FBZ0IsS0FBaEI7QUFDSCxHQXpDSTtBQTBDTDtBQUNBaUIsRUFBQUEsU0EzQ0ssdUJBMkNPLENBQ1gsQ0E1Q0k7QUE2Q0xDLEVBQUFBLE1BN0NLLG9CQTZDSSxDQUNSLENBOUNJO0FBK0NMSixFQUFBQSxLQS9DSyxpQkErQ0NMLEtBL0NELEVBK0NRO0FBQ1QsU0FBS1QsUUFBTCxHQUFnQixLQUFoQjtBQUNBLFFBQUltQixHQUFHLEdBQUdWLEtBQUssQ0FBQ0gsSUFBTixDQUFXYyx1QkFBWCxDQUFtQyxhQUFuQyxDQUFWOztBQUNBLFFBQUlELEdBQUcsSUFBSUEsR0FBRyxDQUFDRSxNQUFmLEVBQXVCO0FBQ25CLFVBQUlDLEVBQUUsR0FBR0gsR0FBRyxDQUFDLENBQUQsQ0FBWjtBQUNBRyxNQUFBQSxFQUFFLENBQUNDLE1BQUgsQ0FBVSxLQUFLbEIsSUFBTCxDQUFVbUIsTUFBcEI7QUFDSDtBQUNKO0FBdERJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIilcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogUG9vbENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBwYXJlbnQ6IGNjLk5vZGVcclxuICAgIH0sXHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2hvb3RpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhcmVudC5vZmYoXCJzaG9vdF9zdGFydFwiLCB0aGlzLnNob290X3N0YXJ0LCB0aGlzKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5vZmYoXCJzaG9vdF9lbmRcIiwgdGhpcy5zaG9vdF9lbmQsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkgdGhpcy5wYXJlbnQgPSB0aGlzLm5vZGUucGFyZW50O1xyXG4gICAgICAgIHRoaXMucGFyZW50Lm9uKFwic2hvb3Rfc3RhcnRcIiwgdGhpcy5zaG9vdF9zdGFydCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQub24oXCJzaG9vdF9lbmRcIiwgdGhpcy5zaG9vdF9lbmQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2hvb3RpbmcgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvL+eisOaSnui/m+WFpVxyXG4gICAgb25Db2xsaXNpb25FbnRlcjogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50LmlzRGVhdGgpIHJldHVybjtcclxuICAgICAgICBpZiAoZ2FtZS5pc092ZXIpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5zaG9vdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnNob290KG90aGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy/norDmkp7lgZznlZlcclxuICAgIG9uQ29sbGlzaW9uU3RheTogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvb3RpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG9vdChvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe6YCA5Ye6XHJcbiAgICBvbkNvbGxpc2lvbkV4aXQ6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgfSxcclxuICAgIC8v5byA5aeL5bCE5Ye7XHJcbiAgICBzaG9vdF9zdGFydCgpIHtcclxuICAgICAgICB0aGlzLnNob290aW5nID0gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICAvL+WwhOWHu+WKqOS9nOe7k+adn1xyXG4gICAgc2hvb3RfZW5kKCkge1xyXG4gICAgICAgIHRoaXMuc2hvb3RpbmcgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvL+ivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAglxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgIH0sXHJcbiAgICBzaG9vdChvdGhlcikge1xyXG4gICAgICAgIHRoaXMuc2hvb3RpbmcgPSBmYWxzZTtcclxuICAgICAgICBsZXQgaHBzID0gb3RoZXIubm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihcImhwQ29tcG9uZW50XCIpO1xyXG4gICAgICAgIGlmIChocHMgJiYgaHBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgaHAgPSBocHNbMF07XHJcbiAgICAgICAgICAgIGhwLm9uSHVydCh0aGlzLmRhdGEuYXR0YWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/follow.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e3b98skOxJLhZAeNYmwoUq4', 'follow');
// Script/core/follow.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    target: {
      "default": null,
      type: cc.Node
    },
    map: cc.Node
  },
  // use this for initialization
  onLoad: function onLoad() {
    if (!this.target || !this.map) {
      return;
    }

    var widget = this.node.getComponent(cc.Widget);

    if (widget) {
      widget.updateAlignment();
    }

    this.mapRect = this.map.getBoundingBox();
    this.minX = 0;
    this.maxX = this.mapRect.width - cc.winSize.width;
    this.minY = 0;
    this.maxY = this.mapRect.height - cc.winSize.height;
    game.mapRect = this.mapRect;
  },
  // called every frame, uncomment this function to activate update callback
  lateUpdate: function lateUpdate(dt) {
    if (!this.target) {
      return;
    }

    var targetPos = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);
    var nodepos = this.node.parent.convertToNodeSpaceAR(targetPos);
    if (nodepos.x < this.minX) nodepos.x = this.minX;else if (nodepos.x > this.maxX) nodepos.x = this.maxX;
    if (nodepos.y < this.minY) nodepos.y = this.minY;else if (nodepos.y > this.maxY) nodepos.y = this.maxY;
    this.node.position = nodepos; // let ratio = targetPos.y / cc.winSize.height;
    // this.camera.zoomRatio = 1 + (0.5 - ratio) * 0.5;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb3JlXFxmb2xsb3cuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJ0YXJnZXQiLCJ0eXBlIiwiTm9kZSIsIm1hcCIsIm9uTG9hZCIsIndpZGdldCIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJXaWRnZXQiLCJ1cGRhdGVBbGlnbm1lbnQiLCJtYXBSZWN0IiwiZ2V0Qm91bmRpbmdCb3giLCJtaW5YIiwibWF4WCIsIndpZHRoIiwid2luU2l6ZSIsIm1pblkiLCJtYXhZIiwiaGVpZ2h0IiwiZ2FtZSIsImxhdGVVcGRhdGUiLCJkdCIsInRhcmdldFBvcyIsImNvbnZlcnRUb1dvcmxkU3BhY2VBUiIsIlZlYzIiLCJaRVJPIiwibm9kZXBvcyIsInBhcmVudCIsImNvbnZlcnRUb05vZGVTcGFjZUFSIiwieCIsInkiLCJwb3NpdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLE1BQU0sRUFBRTtBQUNKLGlCQUFTLElBREw7QUFFSkMsTUFBQUEsSUFBSSxFQUFFTCxFQUFFLENBQUNNO0FBRkwsS0FEQTtBQUtSQyxJQUFBQSxHQUFHLEVBQUVQLEVBQUUsQ0FBQ007QUFMQSxHQUZQO0FBU0w7QUFDQUUsRUFBQUEsTUFBTSxFQUFFLGtCQUFZO0FBQ2hCLFFBQUksQ0FBQyxLQUFLSixNQUFOLElBQWdCLENBQUMsS0FBS0csR0FBMUIsRUFBK0I7QUFDM0I7QUFDSDs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCWCxFQUFFLENBQUNZLE1BQTFCLENBQWI7O0FBQ0EsUUFBSUgsTUFBSixFQUFZO0FBQ1JBLE1BQUFBLE1BQU0sQ0FBQ0ksZUFBUDtBQUNIOztBQUNELFNBQUtDLE9BQUwsR0FBZSxLQUFLUCxHQUFMLENBQVNRLGNBQVQsRUFBZjtBQUNBLFNBQUtDLElBQUwsR0FBWSxDQUFaO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEtBQUtILE9BQUwsQ0FBYUksS0FBYixHQUFxQmxCLEVBQUUsQ0FBQ21CLE9BQUgsQ0FBV0QsS0FBNUM7QUFDQSxTQUFLRSxJQUFMLEdBQVksQ0FBWjtBQUNBLFNBQUtDLElBQUwsR0FBWSxLQUFLUCxPQUFMLENBQWFRLE1BQWIsR0FBc0J0QixFQUFFLENBQUNtQixPQUFILENBQVdHLE1BQTdDO0FBRUFDLElBQUFBLElBQUksQ0FBQ1QsT0FBTCxHQUFhLEtBQUtBLE9BQWxCO0FBQ0gsR0F6Qkk7QUEwQkw7QUFDQVUsRUFBQUEsVUFBVSxFQUFFLG9CQUFVQyxFQUFWLEVBQWM7QUFDdEIsUUFBSSxDQUFDLEtBQUtyQixNQUFWLEVBQWtCO0FBQ2Q7QUFDSDs7QUFDRCxRQUFJc0IsU0FBUyxHQUFHLEtBQUt0QixNQUFMLENBQVl1QixxQkFBWixDQUFrQzNCLEVBQUUsQ0FBQzRCLElBQUgsQ0FBUUMsSUFBMUMsQ0FBaEI7QUFDQSxRQUFJQyxPQUFPLEdBQUcsS0FBS3BCLElBQUwsQ0FBVXFCLE1BQVYsQ0FBaUJDLG9CQUFqQixDQUFzQ04sU0FBdEMsQ0FBZDtBQUNBLFFBQUlJLE9BQU8sQ0FBQ0csQ0FBUixHQUFZLEtBQUtqQixJQUFyQixFQUEyQmMsT0FBTyxDQUFDRyxDQUFSLEdBQVksS0FBS2pCLElBQWpCLENBQTNCLEtBQ0ssSUFBSWMsT0FBTyxDQUFDRyxDQUFSLEdBQVksS0FBS2hCLElBQXJCLEVBQTJCYSxPQUFPLENBQUNHLENBQVIsR0FBWSxLQUFLaEIsSUFBakI7QUFDaEMsUUFBSWEsT0FBTyxDQUFDSSxDQUFSLEdBQVksS0FBS2QsSUFBckIsRUFBMkJVLE9BQU8sQ0FBQ0ksQ0FBUixHQUFZLEtBQUtkLElBQWpCLENBQTNCLEtBQ0ssSUFBSVUsT0FBTyxDQUFDSSxDQUFSLEdBQVksS0FBS2IsSUFBckIsRUFBMkJTLE9BQU8sQ0FBQ0ksQ0FBUixHQUFZLEtBQUtiLElBQWpCO0FBQ2hDLFNBQUtYLElBQUwsQ0FBVXlCLFFBQVYsR0FBcUJMLE9BQXJCLENBVnNCLENBV3RCO0FBQ0E7QUFDSDtBQXhDSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IGNjLk5vZGVcbiAgICB9LFxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMudGFyZ2V0IHx8ICF0aGlzLm1hcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aWRnZXQgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLldpZGdldCk7XG4gICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgIHdpZGdldC51cGRhdGVBbGlnbm1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcFJlY3QgPSB0aGlzLm1hcC5nZXRCb3VuZGluZ0JveCgpO1xuICAgICAgICB0aGlzLm1pblggPSAwO1xuICAgICAgICB0aGlzLm1heFggPSB0aGlzLm1hcFJlY3Qud2lkdGggLSBjYy53aW5TaXplLndpZHRoO1xuICAgICAgICB0aGlzLm1pblkgPSAwO1xuICAgICAgICB0aGlzLm1heFkgPSB0aGlzLm1hcFJlY3QuaGVpZ2h0IC0gY2Mud2luU2l6ZS5oZWlnaHQ7XG5cbiAgICAgICAgZ2FtZS5tYXBSZWN0PXRoaXMubWFwUmVjdDtcbiAgICB9LFxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgbGF0ZVVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGlmICghdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGFyZ2V0UG9zID0gdGhpcy50YXJnZXQuY29udmVydFRvV29ybGRTcGFjZUFSKGNjLlZlYzIuWkVSTyk7XG4gICAgICAgIGxldCBub2RlcG9zID0gdGhpcy5ub2RlLnBhcmVudC5jb252ZXJ0VG9Ob2RlU3BhY2VBUih0YXJnZXRQb3MpO1xuICAgICAgICBpZiAobm9kZXBvcy54IDwgdGhpcy5taW5YKSBub2RlcG9zLnggPSB0aGlzLm1pblg7XG4gICAgICAgIGVsc2UgaWYgKG5vZGVwb3MueCA+IHRoaXMubWF4WCkgbm9kZXBvcy54ID0gdGhpcy5tYXhYO1xuICAgICAgICBpZiAobm9kZXBvcy55IDwgdGhpcy5taW5ZKSBub2RlcG9zLnkgPSB0aGlzLm1pblk7XG4gICAgICAgIGVsc2UgaWYgKG5vZGVwb3MueSA+IHRoaXMubWF4WSkgbm9kZXBvcy55ID0gdGhpcy5tYXhZO1xuICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSBub2RlcG9zO1xuICAgICAgICAvLyBsZXQgcmF0aW8gPSB0YXJnZXRQb3MueSAvIGNjLndpblNpemUuaGVpZ2h0O1xuICAgICAgICAvLyB0aGlzLmNhbWVyYS56b29tUmF0aW8gPSAxICsgKDAuNSAtIHJhdGlvKSAqIDAuNTtcbiAgICB9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemyHp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '763a3woBJFIwJJmjLAd9Nrw', 'enemyHp');
// Script/enemy/enemyHp.js

"use strict";

var HpComponent = require("hpComponent"); //池子组件


cc.Class({
  "extends": HpComponent,
  properties: {
    progressBar: cc.ProgressBar
  },
  //受到的伤害
  onHurt: function onHurt(value) {
    this.curHp -= value;
    this.isShow = true;
    this.progressBar.node.opacity = 255;
    this.showTime = 0;
    this.updateBar();

    if (this.curHp <= 0) {
      this.node.emit("death");
      this.parent.emit("death");
    }
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    this.y = this.progressBar.node.y;
  },
  unuse: function unuse() {},
  reuse: function reuse(data) {
    this.totalHp = this.curHp = data.hp; //数据配置

    this.updateBar();
    this.showTime = 0;
    this.isShow = false;
    this.progressBar.node.opacity = 0;
    this.progressBar.node.y = this.y + data.zy;
  },
  updateBar: function updateBar() {
    var progress = (this.curHp / this.totalHp).format();
    this.progressBar.progress = progress;
  },
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    var hurt = other.node.getComponent("hurt");
    if (!hurt || hurt.hurtValue == 0) return;
    this.curHp -= hurt.hurtValue;
    hurt.end();
    this.isShow = true;
    this.progressBar.node.opacity = 255;
    this.showTime = 0;
    this.updateBar();

    if (this.curHp <= 0) {
      this.node.emit("death");
    }
  },
  onCollisionStay: function onCollisionStay(other, self) {},
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {// cc.log("碰撞退出")
  },
  update: function update(dt) {
    this.showTime += dt;

    if (this.isShow && this.showTime > 2) {
      this.isShow = false;
      this.progressBar.node.opacity = 0;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxlbmVteVxcZW5lbXlIcC5qcyJdLCJuYW1lcyI6WyJIcENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInByb2dyZXNzQmFyIiwiUHJvZ3Jlc3NCYXIiLCJvbkh1cnQiLCJ2YWx1ZSIsImN1ckhwIiwiaXNTaG93Iiwibm9kZSIsIm9wYWNpdHkiLCJzaG93VGltZSIsInVwZGF0ZUJhciIsImVtaXQiLCJwYXJlbnQiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJ5IiwidW51c2UiLCJyZXVzZSIsImRhdGEiLCJ0b3RhbEhwIiwiaHAiLCJ6eSIsInByb2dyZXNzIiwiZm9ybWF0Iiwib25Db2xsaXNpb25FbnRlciIsIm90aGVyIiwic2VsZiIsImh1cnQiLCJnZXRDb21wb25lbnQiLCJodXJ0VmFsdWUiLCJlbmQiLCJvbkNvbGxpc2lvblN0YXkiLCJvbkNvbGxpc2lvbkV4aXQiLCJ1cGRhdGUiLCJkdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQXpCLEVBQTBDOzs7QUFDMUNDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsV0FESjtBQUVMSSxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsV0FBVyxFQUFFSCxFQUFFLENBQUNJO0FBRFIsR0FGUDtBQUtMO0FBQ0FDLEVBQUFBLE1BTkssa0JBTUVDLEtBTkYsRUFNUztBQUNWLFNBQUtDLEtBQUwsSUFBY0QsS0FBZDtBQUNBLFNBQUtFLE1BQUwsR0FBYyxJQUFkO0FBQ0EsU0FBS0wsV0FBTCxDQUFpQk0sSUFBakIsQ0FBc0JDLE9BQXRCLEdBQWdDLEdBQWhDO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtDLFNBQUw7O0FBQ0EsUUFBSSxLQUFLTCxLQUFMLElBQWMsQ0FBbEIsRUFBcUI7QUFDakIsV0FBS0UsSUFBTCxDQUFVSSxJQUFWLENBQWUsT0FBZjtBQUNBLFdBQUtDLE1BQUwsQ0FBWUQsSUFBWixDQUFpQixPQUFqQjtBQUNIO0FBQ0osR0FoQkk7QUFpQkxFLEVBQUFBLFNBakJLLHVCQWlCTyxDQUNYLENBbEJJO0FBbUJMQyxFQUFBQSxNQW5CSyxvQkFtQkk7QUFDTCxTQUFLQyxDQUFMLEdBQVMsS0FBS2QsV0FBTCxDQUFpQk0sSUFBakIsQ0FBc0JRLENBQS9CO0FBQ0gsR0FyQkk7QUFzQkxDLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQXZCSTtBQXdCTEMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0I7QUFDbkIsU0FBS0MsT0FBTCxHQUFlLEtBQUtkLEtBQUwsR0FBYWEsSUFBSSxDQUFDRSxFQUFqQyxDQURtQixDQUNrQjs7QUFDckMsU0FBS1YsU0FBTDtBQUNBLFNBQUtELFFBQUwsR0FBZ0IsQ0FBaEI7QUFDQSxTQUFLSCxNQUFMLEdBQWMsS0FBZDtBQUNBLFNBQUtMLFdBQUwsQ0FBaUJNLElBQWpCLENBQXNCQyxPQUF0QixHQUFnQyxDQUFoQztBQUNBLFNBQUtQLFdBQUwsQ0FBaUJNLElBQWpCLENBQXNCUSxDQUF0QixHQUEyQixLQUFLQSxDQUFMLEdBQVNHLElBQUksQ0FBQ0csRUFBekM7QUFDSCxHQS9CSTtBQWdDTFgsRUFBQUEsU0FoQ0ssdUJBZ0NPO0FBQ1IsUUFBSVksUUFBUSxHQUFHLENBQUMsS0FBS2pCLEtBQUwsR0FBYSxLQUFLYyxPQUFuQixFQUE0QkksTUFBNUIsRUFBZjtBQUNBLFNBQUt0QixXQUFMLENBQWlCcUIsUUFBakIsR0FBNEJBLFFBQTVCO0FBQ0gsR0FuQ0k7QUFvQ0w7QUFDQUUsRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3JDLFFBQUlDLElBQUksR0FBR0YsS0FBSyxDQUFDbEIsSUFBTixDQUFXcUIsWUFBWCxDQUF3QixNQUF4QixDQUFYO0FBQ0EsUUFBSSxDQUFDRCxJQUFELElBQVNBLElBQUksQ0FBQ0UsU0FBTCxJQUFrQixDQUEvQixFQUFrQztBQUNsQyxTQUFLeEIsS0FBTCxJQUFjc0IsSUFBSSxDQUFDRSxTQUFuQjtBQUNBRixJQUFBQSxJQUFJLENBQUNHLEdBQUw7QUFDQSxTQUFLeEIsTUFBTCxHQUFjLElBQWQ7QUFDQSxTQUFLTCxXQUFMLENBQWlCTSxJQUFqQixDQUFzQkMsT0FBdEIsR0FBZ0MsR0FBaEM7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS0MsU0FBTDs7QUFDQSxRQUFJLEtBQUtMLEtBQUwsSUFBYyxDQUFsQixFQUFxQjtBQUNqQixXQUFLRSxJQUFMLENBQVVJLElBQVYsQ0FBZSxPQUFmO0FBQ0g7QUFDSixHQWpESTtBQWtETG9CLEVBQUFBLGVBQWUsRUFBRSx5QkFBVU4sS0FBVixFQUFpQkMsSUFBakIsRUFBdUIsQ0FDdkMsQ0FuREk7QUFvREw7QUFDQU0sRUFBQUEsZUFBZSxFQUFFLHlCQUFVUCxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QixDQUNwQztBQUNILEdBdkRJO0FBd0RMTyxFQUFBQSxNQXhESyxrQkF3REVDLEVBeERGLEVBd0RNO0FBQ1AsU0FBS3pCLFFBQUwsSUFBaUJ5QixFQUFqQjs7QUFDQSxRQUFJLEtBQUs1QixNQUFMLElBQWUsS0FBS0csUUFBTCxHQUFnQixDQUFuQyxFQUFzQztBQUNsQyxXQUFLSCxNQUFMLEdBQWMsS0FBZDtBQUNBLFdBQUtMLFdBQUwsQ0FBaUJNLElBQWpCLENBQXNCQyxPQUF0QixHQUFnQyxDQUFoQztBQUNIO0FBQ0o7QUE5REksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IEhwQ29tcG9uZW50ID0gcmVxdWlyZShcImhwQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBIcENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBwcm9ncmVzc0JhcjogY2MuUHJvZ3Jlc3NCYXJcclxuICAgIH0sXHJcbiAgICAvL+WPl+WIsOeahOS8pOWus1xyXG4gICAgb25IdXJ0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jdXJIcCAtPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmlzU2hvdyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCYXIoKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJIcCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFwiZGVhdGhcIik7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmVtaXQoXCJkZWF0aFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLnByb2dyZXNzQmFyLm5vZGUueTtcclxuICAgIH0sXHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMudG90YWxIcCA9IHRoaXMuY3VySHAgPSBkYXRhLmhwOyAvL+aVsOaNrumFjee9rlxyXG4gICAgICAgIHRoaXMudXBkYXRlQmFyKCk7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLm5vZGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLnkgPSAodGhpcy55ICsgZGF0YS56eSk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlQmFyKCkge1xyXG4gICAgICAgIHZhciBwcm9ncmVzcyA9ICh0aGlzLmN1ckhwIC8gdGhpcy50b3RhbEhwKS5mb3JtYXQoKTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnByb2dyZXNzID0gcHJvZ3Jlc3M7XHJcbiAgICB9LFxyXG4gICAgLy/norDmkp7mo4DmtYvliLBcclxuICAgIG9uQ29sbGlzaW9uRW50ZXI6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIHZhciBodXJ0ID0gb3RoZXIubm9kZS5nZXRDb21wb25lbnQoXCJodXJ0XCIpO1xyXG4gICAgICAgIGlmICghaHVydCB8fCBodXJ0Lmh1cnRWYWx1ZSA9PSAwKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5jdXJIcCAtPSBodXJ0Lmh1cnRWYWx1ZTtcclxuICAgICAgICBodXJ0LmVuZCgpO1xyXG4gICAgICAgIHRoaXMuaXNTaG93ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLm5vZGUub3BhY2l0eSA9IDI1NTtcclxuICAgICAgICB0aGlzLnNob3dUaW1lID0gMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUJhcigpO1xyXG4gICAgICAgIGlmICh0aGlzLmN1ckhwIDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmVtaXQoXCJkZWF0aFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25Db2xsaXNpb25TdGF5OiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcclxuICAgIH0sXHJcbiAgICAvL+eisOaSnumAgOWHulxyXG4gICAgb25Db2xsaXNpb25FeGl0OiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcclxuICAgICAgICAvLyBjYy5sb2coXCLnorDmkp7pgIDlh7pcIilcclxuICAgIH0sXHJcbiAgICB1cGRhdGUoZHQpIHtcclxuICAgICAgICB0aGlzLnNob3dUaW1lICs9IGR0O1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2hvdyAmJiB0aGlzLnNob3dUaW1lID4gMikge1xyXG4gICAgICAgICAgICB0aGlzLmlzU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyLm5vZGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/factory/taSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ca680c/pjZBg54VhBzvvIZY', 'taSprite');
// Script/factory/taSprite.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    this.node.off("death", this.death, this);
  },
  addEvent: function addEvent() {
    this.node.on("death", this.death, this);
    this.node.on("dissolve", this.dissolve, this);
  },
  dissolve: function dissolve(value) {
    if (value > 1) value = 1;
    if (value < 0) value = 0;
    value = value * 255;
    if (this.hua) this.hua.setHua(value); //this.material.setProperty("disLevel", value);
  },
  death: function death() {
    if (this.isDeath) return;
    this.node.isDeath = this.isDeath = true;
    this.node.getComponent(cc.PolygonCollider).enabled = false;
  },
  onLoad: function onLoad() {
    this.node.isDeath = this.isDeath = false;
    this.addEvent(); // let renderComponents = this.node.getComponents(cc.RenderComponent);
    // let renderComponent = renderComponents[0];
    // this.material = renderComponent.getMaterial(0);

    this.hua = this.node.getComponent("hua");
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxmYWN0b3J5XFx0YVNwcml0ZS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uRGVzdHJveSIsIm5vZGUiLCJvZmYiLCJkZWF0aCIsImFkZEV2ZW50Iiwib24iLCJkaXNzb2x2ZSIsInZhbHVlIiwiaHVhIiwic2V0SHVhIiwiaXNEZWF0aCIsImdldENvbXBvbmVudCIsIlBvbHlnb25Db2xsaWRlciIsImVuYWJsZWQiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsU0FISyx1QkFHTztBQUNSLFNBQUtDLElBQUwsQ0FBVUMsR0FBVixDQUFjLE9BQWQsRUFBdUIsS0FBS0MsS0FBNUIsRUFBbUMsSUFBbkM7QUFDSCxHQUxJO0FBTUxDLEVBQUFBLFFBTkssc0JBTU07QUFDUCxTQUFLSCxJQUFMLENBQVVJLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLEtBQUtGLEtBQTNCLEVBQWtDLElBQWxDO0FBQ0EsU0FBS0YsSUFBTCxDQUFVSSxFQUFWLENBQWEsVUFBYixFQUF5QixLQUFLQyxRQUE5QixFQUF3QyxJQUF4QztBQUNILEdBVEk7QUFVTEEsRUFBQUEsUUFWSyxvQkFVSUMsS0FWSixFQVVXO0FBQ1osUUFBSUEsS0FBSyxHQUFHLENBQVosRUFBZUEsS0FBSyxHQUFHLENBQVI7QUFDZixRQUFJQSxLQUFLLEdBQUcsQ0FBWixFQUFlQSxLQUFLLEdBQUcsQ0FBUjtBQUNmQSxJQUFBQSxLQUFLLEdBQUdBLEtBQUssR0FBRyxHQUFoQjtBQUNBLFFBQUksS0FBS0MsR0FBVCxFQUNJLEtBQUtBLEdBQUwsQ0FBU0MsTUFBVCxDQUFnQkYsS0FBaEIsRUFMUSxDQU1aO0FBQ0gsR0FqQkk7QUFrQkxKLEVBQUFBLEtBbEJLLG1CQWtCRztBQUNKLFFBQUksS0FBS08sT0FBVCxFQUFrQjtBQUNsQixTQUFLVCxJQUFMLENBQVVTLE9BQVYsR0FBb0IsS0FBS0EsT0FBTCxHQUFlLElBQW5DO0FBQ0EsU0FBS1QsSUFBTCxDQUFVVSxZQUFWLENBQXVCZixFQUFFLENBQUNnQixlQUExQixFQUEyQ0MsT0FBM0MsR0FBcUQsS0FBckQ7QUFDSCxHQXRCSTtBQXVCTEMsRUFBQUEsTUF2Qkssb0JBdUJJO0FBQ0wsU0FBS2IsSUFBTCxDQUFVUyxPQUFWLEdBQW9CLEtBQUtBLE9BQUwsR0FBZSxLQUFuQztBQUNBLFNBQUtOLFFBQUwsR0FGSyxDQUdMO0FBQ0E7QUFDQTs7QUFDQSxTQUFLSSxHQUFMLEdBQVcsS0FBS1AsSUFBTCxDQUFVVSxZQUFWLENBQXVCLEtBQXZCLENBQVg7QUFDSCxHQTlCSTtBQStCTEksRUFBQUEsS0EvQkssbUJBK0JHLENBQ1A7QUFoQ0ksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihcImRlYXRoXCIsIHRoaXMuZGVhdGgsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGFkZEV2ZW50KCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihcImRlYXRoXCIsIHRoaXMuZGVhdGgsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihcImRpc3NvbHZlXCIsIHRoaXMuZGlzc29sdmUsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGRpc3NvbHZlKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID4gMSkgdmFsdWUgPSAxO1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlICogMjU1O1xyXG4gICAgICAgIGlmICh0aGlzLmh1YSlcclxuICAgICAgICAgICAgdGhpcy5odWEuc2V0SHVhKHZhbHVlKTtcclxuICAgICAgICAvL3RoaXMubWF0ZXJpYWwuc2V0UHJvcGVydHkoXCJkaXNMZXZlbFwiLCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgZGVhdGgoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWF0aCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMubm9kZS5pc0RlYXRoID0gdGhpcy5pc0RlYXRoID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLlBvbHlnb25Db2xsaWRlcikuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLm5vZGUuaXNEZWF0aCA9IHRoaXMuaXNEZWF0aCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnQoKTtcclxuICAgICAgICAvLyBsZXQgcmVuZGVyQ29tcG9uZW50cyA9IHRoaXMubm9kZS5nZXRDb21wb25lbnRzKGNjLlJlbmRlckNvbXBvbmVudCk7XHJcbiAgICAgICAgLy8gbGV0IHJlbmRlckNvbXBvbmVudCA9IHJlbmRlckNvbXBvbmVudHNbMF07XHJcbiAgICAgICAgLy8gdGhpcy5tYXRlcmlhbCA9IHJlbmRlckNvbXBvbmVudC5nZXRNYXRlcmlhbCgwKTtcclxuICAgICAgICB0aGlzLmh1YSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoXCJodWFcIik7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemySpine.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '53e9aIJWw9L671lHuSyQq66', 'enemySpine');
// Script/enemy/enemySpine.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  //骨骼动画精灵组件
  "extends": PoolComponent,
  properties: {},
  //该方法为生命周期方法，父类未必会有实现。
  onDestroy: function onDestroy() {},
  unuse: function unuse() {
    //this.clearTracks();
    this.parent.off("roleState", this.setRoleState, this);
    this.parent.off("attack", this.setRoleState, this);
    this.node.off("death", this.death, this);
    game.off("gameOver", this.gameOver, this);
    this.node.off("shoot_start", this.shoot_start, this);
    this.node.off("shoot_end", this.shoot_end, this);
    this.node.off("collision_shoot_start", this.collision_shoot_start, this);
    this.node.off("collision_shoot_end", this.shoot_end, this);
  },
  reuse: function reuse(data) {
    this.shootIng = false;
    if (!this.parent) this.parent = this.node.parent;
    this.node.getComponent(cc.Collider).enabled = true;
    this.parent.isDeath = this.node.isDeath = false;
    this.parent.on("roleState", this.setRoleState, this);
    this.parent.on("attack", this.attack, this);
    this.node.on("death", this.death, this);
    this.node.on("shoot_start", this.shoot_start, this);
    this.node.on("collision_shoot_start", this.collision_shoot_start, this);
    this.node.on("collision_shoot_end", this.shoot_end, this);
    this.node.on("shoot_end", this.shoot_end, this);
    game.on("gameOver", this.gameOver, this);
    this.node.y = data.zy;
  },
  shoot_end: function shoot_end() {
    this.sp.timeScale = 1;
  },
  shoot_start: function shoot_start() {
    this.sp.timeScale = 0.5;
  },
  collision_shoot_start: function collision_shoot_start(value) {
    value = value || 0.1;
    this.sp.timeScale = 0.1;
  },
  update: function update() {
    if (this.sp.timeScale < 1) this.sp.timeScale += 0.02;
  },
  gameOver: function gameOver() {
    this.changeAction("idle");
  },
  //死亡
  death: function death() {
    this.changeAction("death");
    this.parent.isDeath = this.node.isDeath = true;
    this.node.getComponent(cc.Collider).enabled = false;
  },
  onLoad: function onLoad() {
    if (!this.parent) this.parent = this.node.parent;
    this.sp = this.getComponent(sp.Skeleton); //获取骨骼动画组件
    // this.sp_skeleton_data = this.sp._skeleton.data;
    // this.sp_state = this.sp.getState();
    // this.sp_state_data = this.sp_state.data;
    // this.sp_state_data.defaultMix = 0.3;
    //  this.setMix('run', 'attack', 0.1);
    //  this.setMix('idle', 'attack', 0.1); //移动射击

    var spine = this.sp;
    this.shootIng = false;
    spine.setStartListener(function (trackEntry) {
      var animationName = trackEntry.animation ? trackEntry.animation.name : "";

      if (animationName == "attack") {
        this.shootIng = true;
        this.node.emit("shoot_start");
      }
    }.bind(this));
    spine.setCompleteListener(function (trackEntry) {
      var animationName = trackEntry.animation ? trackEntry.animation.name : "";

      if (animationName === 'death') {
        // this.parent.removeFromParent();
        var pool = this.parent.pool;

        if (pool) {
          pool.put(this.parent);
        } else {
          this.parent.removeFromParent(true);
          this.parent.destroy();
        }
      }

      if (animationName === "attack") {
        //this.node.emit("attackShoot", 2);
        this.shootIng = false;
        this.node.emit("shoot_end");
        this.sp.setAnimation(0, this.curAction, true);
      }
    }.bind(this));
  },
  //setMix 为所有关键帧设定混合及混合时间（从当前值开始差值）。
  setMix: function setMix(anim1, anim2, mixTime) {// this.sp.setMix(anim1, anim2, mixTime);
    // this.sp.setMix(anim2, anim1, mixTime);
  },
  attack: function attack(pos) {
    this.targetPos = pos; //目标位置

    this.changeAction("attack");
  },
  setRoleState: function setRoleState(value) {
    this.roleState = value; //角色状态  0=静止 1=移动 2=跳跃

    switch (value) {
      case 0:
        //静止
        this.changeAction("idle");
        break;

      case 1:
        //移动
        this.changeAction("run");
        break;

      case 2:
        //跳跃
        //  this.changeAction("jump");
        break;
    }
  },
  changeAction: function changeAction(value) {
    if (!this.node) return;
    if (this.node.isDeath) return;
    if (this.sp.animation == value) return;
    var self = this;

    switch (value) {
      case "death":
        this.sp.timeScale = 1;
        this.sp.setAnimation(0, "death", false);
        break;

      case "run":
        this.sp.timeScale = 1;
        this.sp.setAnimation(0, "run", true);
        this.curAction = "run";
        break;

      case "idle":
        this.sp.timeScale = 1;
        this.curAction = "idle";
        if (!this.shootIng) this.sp.setAnimation(0, "idle", true);
        break;

      case "attack":
        this.sp.setAnimation(0, "attack", false); // this.sp.setTrackEventListener(entry, function (trackIndex, event) {
        //     //   console.log("TrackEventListener :", event.data.name, Date.now());
        //     // let weapon = this.sp.findBone("root_qiang");
        //     // let weaponPos = cc.v2(weapon.worldX, weapon.worldY);
        //     // let worldPos = this.node.convertToWorldSpaceAR(weaponPos);
        //     // let rotation = gameUtils.getRotation(worldPos, this.targetPos);
        //     //self.node.emit("attack", 1, worldPos, 180, "enbull");
        //     this.node.emit("attackShoot", 3);
        // }.bind(this));

        break;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/gameEvent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1e3a2/1EAlD1Y4msD+ZT9A3', 'gameEvent');
// Script/game/gameEvent.js

"use strict";

module.exports = {
  /*****加载场景*/
  load_scene: "load_scene",

  /*****弹出一个预制体*/
  popup_prefab: "popup_prefab",

  /*****关闭一个预制体*/
  closed_prefab: "closed_prefab",

  /*****向左移动*/
  moveLeft: "moveLeft"
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lXFxnYW1lRXZlbnQuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvYWRfc2NlbmUiLCJwb3B1cF9wcmVmYWIiLCJjbG9zZWRfcHJlZmFiIiwibW92ZUxlZnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiO0FBQ0FDLEVBQUFBLFVBQVUsRUFBRSxZQUZDOztBQUdiO0FBQ0FDLEVBQUFBLFlBQVksRUFBRSxjQUpEOztBQUtiO0FBQ0FDLEVBQUFBLGFBQWEsRUFBRSxlQU5GOztBQU9iO0FBQ0FDLEVBQUFBLFFBQVEsRUFBRTtBQVJHLENBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIC8qKioqKuWKoOi9veWcuuaZryovXHJcbiAgICBsb2FkX3NjZW5lOiBcImxvYWRfc2NlbmVcIixcclxuICAgIC8qKioqKuW8ueWHuuS4gOS4qumihOWItuS9kyovXHJcbiAgICBwb3B1cF9wcmVmYWI6IFwicG9wdXBfcHJlZmFiXCIsXHJcbiAgICAvKioqKirlhbPpl63kuIDkuKrpooTliLbkvZMqL1xyXG4gICAgY2xvc2VkX3ByZWZhYjogXCJjbG9zZWRfcHJlZmFiXCIsXHJcbiAgICAvKioqKirlkJHlt6bnp7vliqgqL1xyXG4gICAgbW92ZUxlZnQ6IFwibW92ZUxlZnRcIixcclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/factory/taPaoguan.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3165e4GGOFNBJy2i4VpdT0f', 'taPaoguan');
// Script/factory/taPaoguan.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    sendNode: cc.Node,
    attackTme: 1,
    //攻击时间
    attack: 1000,
    //攻击力
    bulletName: "bullet5"
  },
  onDestroy: function onDestroy() {
    this.parent.off("death", this.death, this);
  },
  addEvent: function addEvent() {
    this.parent.on("death", this.death, this);
  },
  death: function death() {
    this.node.getComponent(cc.CircleCollider).enabled = false;
    var renderComponents = this.node.getComponents(cc.RenderComponent);
    var renderComponent = renderComponents[0];
    renderComponent.setMaterial(0, game.materias["dissolve"]);
  },
  onLoad: function onLoad() {
    this.targets = [];
    this.sendTime = 0;
    this.parent = this.node.parent;
    this.worldPos = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
    var sx = this.node.scaleX; //* this.parent.scaleX;

    var psy = this.parent.scaleX; //* this.parent.scaleX;

    sx = sx * psy;
    this.flip = sx < 0;
    this.flip2 = psy < 0;
    this.targetGroup = "enbull2";

    if (this.node.group == "myeye") {
      this.targetGroup = "mybull2";
    }

    this.addEvent();
  },
  //碰撞进入
  onCollisionEnter: function onCollisionEnter(other, self) {
    if (game.isOver) return;
    if (this.node.isDeath) return;
    var node = other.node;

    if (this.targets.indexOf(node) < 0) {
      this.targets.push(node);
    }
  },
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {
    if (game.isOver) return;
    if (this.parent.isDeath) return;
    var node = other.node;
    var idx = this.targets.indexOf(node);

    if (idx >= 0) {
      this.targets.splice(idx, 1);
    }
  },
  start: function start() {},
  update: function update(dt) {
    if (game.isOver) return;
    if (this.parent.isDeath) return;
    this.sendTime += dt;

    if (!this.targets || this.targets.length == 0) {
      //
      //this.sendTime = 0;
      return;
    }

    var target = this.targets[0];
    var targetPos = target.convertToWorldSpaceAR(game.point1); // game.root.emit("drawClear");
    // game.root.emit("draw", targetPos);
    //game.root.emit("draw", this.worldPos);

    var rotation = game.gameUtils.getRotation(this.worldPos, targetPos);

    if (this.flip) {
      rotation = rotation + 180;
    }

    if (this.flip2) {
      rotation = 360 - rotation;
    }

    this.node.angle = rotation; // dt * 10;

    if (this.sendTime > this.attackTme) //攻击时间到了
      {
        this.sendTime = 0;
        var sendPos = this.sendNode.convertToWorldSpaceAR(game.point1);
        rotation = game.gameUtils.getRotation(sendPos, targetPos); //game.emit("shootFire", "fire", "eff3", sendPos, rotation, this.targetGroup);//开火动画

        game.emit("shootFire", {
          aniName: "eff3",
          v: sendPos,
          angle: rotation
        }); //开火动画

        game.emit("shoot", {
          prefabName: this.bulletName,
          //预制体名称
          v: sendPos,
          //位置
          angle: rotation - 15,
          //角度
          group: this.targetGroup,
          //组
          attack: this.attack
        });
        game.emit("shoot", {
          prefabName: this.bulletName,
          //预制体名称
          v: sendPos,
          //位置
          angle: rotation,
          //角度
          group: this.targetGroup,
          //组
          attack: this.attack
        });
        game.emit("shoot", {
          prefabName: this.bulletName,
          //预制体名称
          v: sendPos,
          //位置
          angle: rotation + 15,
          //角度
          group: this.targetGroup,
          //组
          attack: this.attack
        });
      }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/gameUtils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4ca93yd2x1Ge5bQO4eUy+Wd', 'gameUtils');
// Script/game/gameUtils.js

"use strict";

module.exports = {
  //获取两点之间的角
  getRotation: function getRotation(start, end) {
    //算好初始位置和初始角度
    var angle = Math.atan2(end.y - start.y, end.x - start.x);
    if (angle < 0) angle = angle + Math.PI * 2;else if (angle > Math.PI * 2) angle = angle - Math.PI * 2; //var rotation = 360.0-angle * 180.0 / Math.PI;//原图的初始角度是向右用360- 向左则用180-

    var rotation = angle * 180.0 / Math.PI; //原图的初始角度是向右用360- 向左则用180-

    return rotation;
  },
  standardRotation: function standardRotation(rotation) {
    while (rotation > 180) {
      rotation = rotation - 360;
    }

    while (rotation < -180) {
      rotation = rotation + 360;
    }

    return rotation;
  },
  limitRotation: function limitRotation(rotation, start, end) {
    var a = Math.abs(rotation - start);
    var b = Math.abs(end - rotation);
    return a < 180 && b < 180;
  },
  getNextPos: function getNextPos(pos, len, rotation) {
    var angle = rotation * Math.PI / 180;
    var x = pos.x + Math.cos(angle) * len;
    var y = pos.x + Math.sin(angle) * len;
    return cc.v2(x, y);
  },
  getLength: function getLength(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
  },
  getSpriteFrames: function getSpriteFrames(atlas, textName) {
    textName = textName + "_";
    var frames = [];
    var i = 0;

    while (true) {
      var frameName = jm.sprintf('%s%d', textName, i);
      var frame = atlas.getSpriteFrame(frameName);

      if (!frame) {
        frameName = jm.sprintf('%s%02d', textName, i);
        frame = atlas.getSpriteFrame(frameName);
      }

      if (frame) {
        frames.push(frame);
      } else if (i > 1) {
        break;
      }

      i++;
    }

    return frames;
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lXFxnYW1lVXRpbHMuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdldFJvdGF0aW9uIiwic3RhcnQiLCJlbmQiLCJhbmdsZSIsIk1hdGgiLCJhdGFuMiIsInkiLCJ4IiwiUEkiLCJyb3RhdGlvbiIsInN0YW5kYXJkUm90YXRpb24iLCJsaW1pdFJvdGF0aW9uIiwiYSIsImFicyIsImIiLCJnZXROZXh0UG9zIiwicG9zIiwibGVuIiwiY29zIiwic2luIiwiY2MiLCJ2MiIsImdldExlbmd0aCIsInAxIiwicDIiLCJzcXJ0IiwicG93IiwiZ2V0U3ByaXRlRnJhbWVzIiwiYXRsYXMiLCJ0ZXh0TmFtZSIsImZyYW1lcyIsImkiLCJmcmFtZU5hbWUiLCJqbSIsInNwcmludGYiLCJmcmFtZSIsImdldFNwcml0ZUZyYW1lIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2pCO0FBQ0lDLEVBQUFBLFdBQVcsRUFBRSxxQkFBVUMsS0FBVixFQUFpQkMsR0FBakIsRUFBc0I7QUFDL0I7QUFDQSxRQUFJQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxHQUFHLENBQUNJLENBQUosR0FBUUwsS0FBSyxDQUFDSyxDQUF6QixFQUE0QkosR0FBRyxDQUFDSyxDQUFKLEdBQVFOLEtBQUssQ0FBQ00sQ0FBMUMsQ0FBWjtBQUNBLFFBQUlKLEtBQUssR0FBRyxDQUFaLEVBQ0lBLEtBQUssR0FBR0EsS0FBSyxHQUFHQyxJQUFJLENBQUNJLEVBQUwsR0FBVSxDQUExQixDQURKLEtBRUssSUFBSUwsS0FBSyxHQUFHQyxJQUFJLENBQUNJLEVBQUwsR0FBVSxDQUF0QixFQUNETCxLQUFLLEdBQUdBLEtBQUssR0FBR0MsSUFBSSxDQUFDSSxFQUFMLEdBQVUsQ0FBMUIsQ0FOMkIsQ0FPL0I7O0FBQ0EsUUFBSUMsUUFBUSxHQUFHTixLQUFLLEdBQUcsS0FBUixHQUFnQkMsSUFBSSxDQUFDSSxFQUFwQyxDQVIrQixDQVFROztBQUN2QyxXQUFPQyxRQUFQO0FBQ0gsR0FaWTtBQWFiQyxFQUFBQSxnQkFBZ0IsRUFBRSwwQkFBVUQsUUFBVixFQUFvQjtBQUNsQyxXQUFPQSxRQUFRLEdBQUcsR0FBbEIsRUFBdUI7QUFDbkJBLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxHQUFHLEdBQXRCO0FBQ0g7O0FBQ0QsV0FBT0EsUUFBUSxHQUFHLENBQUMsR0FBbkIsRUFBd0I7QUFDcEJBLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxHQUFHLEdBQXRCO0FBQ0g7O0FBQ0QsV0FBT0EsUUFBUDtBQUNILEdBckJZO0FBc0JiRSxFQUFBQSxhQUFhLEVBQUUsdUJBQVVGLFFBQVYsRUFBb0JSLEtBQXBCLEVBQTJCQyxHQUEzQixFQUFnQztBQUMzQyxRQUFJVSxDQUFDLEdBQUdSLElBQUksQ0FBQ1MsR0FBTCxDQUFTSixRQUFRLEdBQUdSLEtBQXBCLENBQVI7QUFDQSxRQUFJYSxDQUFDLEdBQUdWLElBQUksQ0FBQ1MsR0FBTCxDQUFTWCxHQUFHLEdBQUdPLFFBQWYsQ0FBUjtBQUNBLFdBQU9HLENBQUMsR0FBRyxHQUFKLElBQVdFLENBQUMsR0FBRyxHQUF0QjtBQUNILEdBMUJZO0FBMkJiQyxFQUFBQSxVQUFVLEVBQUUsb0JBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQlIsUUFBcEIsRUFBOEI7QUFDdEMsUUFBSU4sS0FBSyxHQUFHTSxRQUFRLEdBQUdMLElBQUksQ0FBQ0ksRUFBaEIsR0FBcUIsR0FBakM7QUFDQSxRQUFJRCxDQUFDLEdBQUdTLEdBQUcsQ0FBQ1QsQ0FBSixHQUFRSCxJQUFJLENBQUNjLEdBQUwsQ0FBU2YsS0FBVCxJQUFrQmMsR0FBbEM7QUFDQSxRQUFJWCxDQUFDLEdBQUdVLEdBQUcsQ0FBQ1QsQ0FBSixHQUFRSCxJQUFJLENBQUNlLEdBQUwsQ0FBU2hCLEtBQVQsSUFBa0JjLEdBQWxDO0FBQ0EsV0FBT0csRUFBRSxDQUFDQyxFQUFILENBQU1kLENBQU4sRUFBU0QsQ0FBVCxDQUFQO0FBQ0gsR0FoQ1k7QUFpQ2JnQixFQUFBQSxTQUFTLEVBQUUsbUJBQVVDLEVBQVYsRUFBY0MsRUFBZCxFQUFrQjtBQUN6QixXQUFPcEIsSUFBSSxDQUFDcUIsSUFBTCxDQUFVckIsSUFBSSxDQUFDc0IsR0FBTCxDQUFTSCxFQUFFLENBQUNoQixDQUFILEdBQU9pQixFQUFFLENBQUNqQixDQUFuQixFQUFzQixDQUF0QixJQUEyQkgsSUFBSSxDQUFDc0IsR0FBTCxDQUFTSCxFQUFFLENBQUNqQixDQUFILEdBQU9rQixFQUFFLENBQUNsQixDQUFuQixFQUFzQixDQUF0QixDQUFyQyxDQUFQO0FBQ0gsR0FuQ1k7QUFvQ2JxQixFQUFBQSxlQUFlLEVBQUUseUJBQVVDLEtBQVYsRUFBaUJDLFFBQWpCLEVBQTJCO0FBQ3hDQSxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsR0FBRyxHQUF0QjtBQUNBLFFBQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsV0FBTyxJQUFQLEVBQWE7QUFDVCxVQUFJQyxTQUFTLEdBQUdDLEVBQUUsQ0FBQ0MsT0FBSCxDQUFXLE1BQVgsRUFBbUJMLFFBQW5CLEVBQTZCRSxDQUE3QixDQUFoQjtBQUNBLFVBQUlJLEtBQUssR0FBR1AsS0FBSyxDQUFDUSxjQUFOLENBQXFCSixTQUFyQixDQUFaOztBQUNBLFVBQUksQ0FBQ0csS0FBTCxFQUFZO0FBQ1JILFFBQUFBLFNBQVMsR0FBR0MsRUFBRSxDQUFDQyxPQUFILENBQVcsUUFBWCxFQUFxQkwsUUFBckIsRUFBK0JFLENBQS9CLENBQVo7QUFDQUksUUFBQUEsS0FBSyxHQUFHUCxLQUFLLENBQUNRLGNBQU4sQ0FBcUJKLFNBQXJCLENBQVI7QUFDSDs7QUFDRCxVQUFJRyxLQUFKLEVBQVc7QUFDUEwsUUFBQUEsTUFBTSxDQUFDTyxJQUFQLENBQVlGLEtBQVo7QUFDSCxPQUZELE1BR0ssSUFBSUosQ0FBQyxHQUFHLENBQVIsRUFBVztBQUNaO0FBQ0g7O0FBQ0RBLE1BQUFBLENBQUM7QUFDSjs7QUFDRCxXQUFPRCxNQUFQO0FBQ0g7QUF4RFksQ0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4vL+iOt+WPluS4pOeCueS5i+mXtOeahOinklxyXG4gICAgZ2V0Um90YXRpb246IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgLy/nrpflpb3liJ3lp4vkvY3nva7lkozliJ3lp4vop5LluqZcclxuICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKGVuZC55IC0gc3RhcnQueSwgZW5kLnggLSBzdGFydC54KTtcclxuICAgICAgICBpZiAoYW5nbGUgPCAwKVxyXG4gICAgICAgICAgICBhbmdsZSA9IGFuZ2xlICsgTWF0aC5QSSAqIDI7XHJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPiBNYXRoLlBJICogMilcclxuICAgICAgICAgICAgYW5nbGUgPSBhbmdsZSAtIE1hdGguUEkgKiAyO1xyXG4gICAgICAgIC8vdmFyIHJvdGF0aW9uID0gMzYwLjAtYW5nbGUgKiAxODAuMCAvIE1hdGguUEk7Ly/ljp/lm77nmoTliJ3lp4vop5LluqbmmK/lkJHlj7PnlKgzNjAtIOWQkeW3puWImeeUqDE4MC1cclxuICAgICAgICB2YXIgcm90YXRpb24gPSBhbmdsZSAqIDE4MC4wIC8gTWF0aC5QSTsvL+WOn+WbvueahOWIneWni+inkuW6puaYr+WQkeWPs+eUqDM2MC0g5ZCR5bem5YiZ55SoMTgwLVxyXG4gICAgICAgIHJldHVybiByb3RhdGlvbjtcclxuICAgIH0sXHJcbiAgICBzdGFuZGFyZFJvdGF0aW9uOiBmdW5jdGlvbiAocm90YXRpb24pIHtcclxuICAgICAgICB3aGlsZSAocm90YXRpb24gPiAxODApIHtcclxuICAgICAgICAgICAgcm90YXRpb24gPSByb3RhdGlvbiAtIDM2MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHJvdGF0aW9uIDwgLTE4MCkge1xyXG4gICAgICAgICAgICByb3RhdGlvbiA9IHJvdGF0aW9uICsgMzYwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcm90YXRpb247XHJcbiAgICB9LFxyXG4gICAgbGltaXRSb3RhdGlvbjogZnVuY3Rpb24gKHJvdGF0aW9uLCBzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgdmFyIGEgPSBNYXRoLmFicyhyb3RhdGlvbiAtIHN0YXJ0KTtcclxuICAgICAgICB2YXIgYiA9IE1hdGguYWJzKGVuZCAtIHJvdGF0aW9uKTtcclxuICAgICAgICByZXR1cm4gYSA8IDE4MCAmJiBiIDwgMTgwO1xyXG4gICAgfSxcclxuICAgIGdldE5leHRQb3M6IGZ1bmN0aW9uIChwb3MsIGxlbiwgcm90YXRpb24pIHtcclxuICAgICAgICB2YXIgYW5nbGUgPSByb3RhdGlvbiAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgdmFyIHggPSBwb3MueCArIE1hdGguY29zKGFuZ2xlKSAqIGxlbjtcclxuICAgICAgICB2YXIgeSA9IHBvcy54ICsgTWF0aC5zaW4oYW5nbGUpICogbGVuO1xyXG4gICAgICAgIHJldHVybiBjYy52Mih4LCB5KTtcclxuICAgIH0sXHJcbiAgICBnZXRMZW5ndGg6IGZ1bmN0aW9uIChwMSwgcDIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAxLnggLSBwMi54LCAyKSArIE1hdGgucG93KHAxLnkgLSBwMi55LCAyKSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0U3ByaXRlRnJhbWVzOiBmdW5jdGlvbiAoYXRsYXMsIHRleHROYW1lKSB7XHJcbiAgICAgICAgdGV4dE5hbWUgPSB0ZXh0TmFtZSArIFwiX1wiXHJcbiAgICAgICAgdmFyIGZyYW1lcyA9IFtdO1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVOYW1lID0gam0uc3ByaW50ZignJXMlZCcsIHRleHROYW1lLCBpKTtcclxuICAgICAgICAgICAgdmFyIGZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoZnJhbWVOYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZnJhbWVOYW1lID0gam0uc3ByaW50ZignJXMlMDJkJywgdGV4dE5hbWUsIGkpO1xyXG4gICAgICAgICAgICAgICAgZnJhbWUgPSBhdGxhcy5nZXRTcHJpdGVGcmFtZShmcmFtZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZnJhbWVzLnB1c2goZnJhbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmcmFtZXM7XHJcbiAgICB9LFxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemySend.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4c7c8EDVUFGTpxPzzWqkAL+', 'enemySend');
// Script/enemy/enemySend.js

"use strict";

var PoolComponent = require("PoolComponent");

cc.Class({
  "extends": PoolComponent,
  properties: {
    bulletName: "bullet1",
    parent: cc.Node,
    sendNode: cc.Node,
    shootNum: 5
  },
  unuse: function unuse() {
    this.shooting = false;
    this.shoot_num = 0;
    this.parent.off("shoot_start", this.shoot_start, this);
    this.parent.off("shoot_end", this.shoot_end, this);
  },
  reuse: function reuse(data) {
    this.data = _.clone(data);
    if (!this.parent) this.parent = this.node.parent;
    this.parent.on("shoot_start", this.shoot_start, this);
    this.parent.on("shoot_end", this.shoot_end, this);
    this.shooting = false;
    this.shoot_num = 0;
  },
  //碰撞进入
  onCollisionEnter: function onCollisionEnter(other, self) {
    if (this.parent.isDeath) return;
    if (game.isOver) return;
    this.shoot_num = 0;

    if (this.shooting) {
      this.parent.emit("collision_shoot_start");
    }
  },
  //碰撞停留
  onCollisionStay: function onCollisionStay(other, self) {
    if (this.shooting) {
      this.shoot_num++;

      if (this.shoot_num >= this.shootNum) {
        this.shoot();
      }
    }
  },
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {
    this.shoot_num = 0;
  },
  //开始射击
  shoot_start: function shoot_start() {
    this.shooting = true;
  },
  //射击动作结束
  shoot_end: function shoot_end() {
    if (this.shooting) {
      this.shoot();
    } // this.shooting = false;

  },
  //该方法为生命周期方法，父类未必会有实现。
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  shoot: function shoot() {
    this.shooting = false;
    var sendNode = this.sendNode || this.node;
    var shootPos = sendNode.convertToWorldSpaceAR(game.point1);
    var targetPos = sendNode.convertToWorldSpaceAR(game.point2);
    var angle = game.gameUtils.getRotation(shootPos, targetPos);

    if (this.node.scaleX < 0) {
      angle = 360 - angle;
    } else {} // _.assignIn(this.data, {


    this.data.prefabName = this.bulletName; //预制体名称

    this.data.v = shootPos; //位置

    this.data.angle = angle; //角度

    this.data.group = "enbull"; //组
    //prefabName

    game.emit("shoot", this.data);
    this.parent.emit("collision_shoot_end");
    this.shoot_num = 0;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxlbmVteVxcZW5lbXlTZW5kLmpzIl0sIm5hbWVzIjpbIlBvb2xDb21wb25lbnQiLCJyZXF1aXJlIiwiY2MiLCJDbGFzcyIsInByb3BlcnRpZXMiLCJidWxsZXROYW1lIiwicGFyZW50IiwiTm9kZSIsInNlbmROb2RlIiwic2hvb3ROdW0iLCJ1bnVzZSIsInNob290aW5nIiwic2hvb3RfbnVtIiwib2ZmIiwic2hvb3Rfc3RhcnQiLCJzaG9vdF9lbmQiLCJyZXVzZSIsImRhdGEiLCJfIiwiY2xvbmUiLCJub2RlIiwib24iLCJvbkNvbGxpc2lvbkVudGVyIiwib3RoZXIiLCJzZWxmIiwiaXNEZWF0aCIsImdhbWUiLCJpc092ZXIiLCJlbWl0Iiwib25Db2xsaXNpb25TdGF5Iiwic2hvb3QiLCJvbkNvbGxpc2lvbkV4aXQiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzaG9vdFBvcyIsImNvbnZlcnRUb1dvcmxkU3BhY2VBUiIsInBvaW50MSIsInRhcmdldFBvcyIsInBvaW50MiIsImFuZ2xlIiwiZ2FtZVV0aWxzIiwiZ2V0Um90YXRpb24iLCJzY2FsZVgiLCJwcmVmYWJOYW1lIiwidiIsImdyb3VwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBM0I7O0FBQ0FDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsYUFESjtBQUVMSSxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsVUFBVSxFQUFFLFNBREo7QUFFUkMsSUFBQUEsTUFBTSxFQUFFSixFQUFFLENBQUNLLElBRkg7QUFHUkMsSUFBQUEsUUFBUSxFQUFFTixFQUFFLENBQUNLLElBSEw7QUFJUkUsSUFBQUEsUUFBUSxFQUFFO0FBSkYsR0FGUDtBQVFMQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVk7QUFDZixTQUFLQyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixDQUFqQjtBQUNBLFNBQUtOLE1BQUwsQ0FBWU8sR0FBWixDQUFnQixhQUFoQixFQUErQixLQUFLQyxXQUFwQyxFQUFpRCxJQUFqRDtBQUNBLFNBQUtSLE1BQUwsQ0FBWU8sR0FBWixDQUFnQixXQUFoQixFQUE2QixLQUFLRSxTQUFsQyxFQUE2QyxJQUE3QztBQUNILEdBYkk7QUFjTEMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0I7QUFDbkIsU0FBS0EsSUFBTCxHQUFZQyxDQUFDLENBQUNDLEtBQUYsQ0FBUUYsSUFBUixDQUFaO0FBQ0EsUUFBSSxDQUFDLEtBQUtYLE1BQVYsRUFBa0IsS0FBS0EsTUFBTCxHQUFjLEtBQUtjLElBQUwsQ0FBVWQsTUFBeEI7QUFDbEIsU0FBS0EsTUFBTCxDQUFZZSxFQUFaLENBQWUsYUFBZixFQUE4QixLQUFLUCxXQUFuQyxFQUFnRCxJQUFoRDtBQUNBLFNBQUtSLE1BQUwsQ0FBWWUsRUFBWixDQUFlLFdBQWYsRUFBNEIsS0FBS04sU0FBakMsRUFBNEMsSUFBNUM7QUFDQSxTQUFLSixRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixDQUFqQjtBQUNILEdBckJJO0FBc0JMO0FBQ0FVLEVBQUFBLGdCQUFnQixFQUFFLDBCQUFVQyxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUNyQyxRQUFJLEtBQUtsQixNQUFMLENBQVltQixPQUFoQixFQUF5QjtBQUN6QixRQUFJQyxJQUFJLENBQUNDLE1BQVQsRUFBaUI7QUFDakIsU0FBS2YsU0FBTCxHQUFpQixDQUFqQjs7QUFDQSxRQUFJLEtBQUtELFFBQVQsRUFBbUI7QUFDZixXQUFLTCxNQUFMLENBQVlzQixJQUFaLENBQWlCLHVCQUFqQjtBQUNIO0FBQ0osR0E5Qkk7QUErQkw7QUFDQUMsRUFBQUEsZUFBZSxFQUFFLHlCQUFVTixLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUNwQyxRQUFJLEtBQUtiLFFBQVQsRUFBbUI7QUFDZixXQUFLQyxTQUFMOztBQUNBLFVBQUksS0FBS0EsU0FBTCxJQUFrQixLQUFLSCxRQUEzQixFQUFxQztBQUNqQyxhQUFLcUIsS0FBTDtBQUNIO0FBQ0o7QUFDSixHQXZDSTtBQXdDTDtBQUNBQyxFQUFBQSxlQUFlLEVBQUUseUJBQVVSLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3BDLFNBQUtaLFNBQUwsR0FBaUIsQ0FBakI7QUFDSCxHQTNDSTtBQTRDTDtBQUNBRSxFQUFBQSxXQTdDSyx5QkE2Q1M7QUFDVixTQUFLSCxRQUFMLEdBQWdCLElBQWhCO0FBQ0gsR0EvQ0k7QUFnREw7QUFDQUksRUFBQUEsU0FqREssdUJBaURPO0FBQ1IsUUFBSSxLQUFLSixRQUFULEVBQW1CO0FBQ2YsV0FBS21CLEtBQUw7QUFDSCxLQUhPLENBSVI7O0FBQ0gsR0F0REk7QUF1REw7QUFDQUUsRUFBQUEsU0F4REssdUJBd0RPLENBQ1gsQ0F6REk7QUEwRExDLEVBQUFBLE1BMURLLG9CQTBESSxDQUNSLENBM0RJO0FBNERMSCxFQUFBQSxLQTVESyxtQkE0REc7QUFDSixTQUFLbkIsUUFBTCxHQUFnQixLQUFoQjtBQUNBLFFBQUlILFFBQVEsR0FBRyxLQUFLQSxRQUFMLElBQWlCLEtBQUtZLElBQXJDO0FBQ0EsUUFBSWMsUUFBUSxHQUFHMUIsUUFBUSxDQUFDMkIscUJBQVQsQ0FBK0JULElBQUksQ0FBQ1UsTUFBcEMsQ0FBZjtBQUNBLFFBQUlDLFNBQVMsR0FBRzdCLFFBQVEsQ0FBQzJCLHFCQUFULENBQStCVCxJQUFJLENBQUNZLE1BQXBDLENBQWhCO0FBQ0EsUUFBSUMsS0FBSyxHQUFHYixJQUFJLENBQUNjLFNBQUwsQ0FBZUMsV0FBZixDQUEyQlAsUUFBM0IsRUFBcUNHLFNBQXJDLENBQVo7O0FBQ0EsUUFBSSxLQUFLakIsSUFBTCxDQUFVc0IsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN0QkgsTUFBQUEsS0FBSyxHQUFHLE1BQU1BLEtBQWQ7QUFDSCxLQUZELE1BR0ssQ0FDSixDQVZHLENBV0o7OztBQUNBLFNBQUt0QixJQUFMLENBQVUwQixVQUFWLEdBQXVCLEtBQUt0QyxVQUE1QixDQVpJLENBWW1DOztBQUN2QyxTQUFLWSxJQUFMLENBQVUyQixDQUFWLEdBQWNWLFFBQWQsQ0FiSSxDQWFtQjs7QUFDdkIsU0FBS2pCLElBQUwsQ0FBVXNCLEtBQVYsR0FBa0JBLEtBQWxCLENBZEksQ0Fjb0I7O0FBQ3hCLFNBQUt0QixJQUFMLENBQVU0QixLQUFWLEdBQWtCLFFBQWxCLENBZkksQ0Fld0I7QUFDNUI7O0FBQ0FuQixJQUFBQSxJQUFJLENBQUNFLElBQUwsQ0FBVSxPQUFWLEVBQW1CLEtBQUtYLElBQXhCO0FBQ0EsU0FBS1gsTUFBTCxDQUFZc0IsSUFBWixDQUFpQixxQkFBakI7QUFDQSxTQUFLaEIsU0FBTCxHQUFpQixDQUFqQjtBQUNIO0FBaEZJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIilcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogUG9vbENvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBidWxsZXROYW1lOiBcImJ1bGxldDFcIixcclxuICAgICAgICBwYXJlbnQ6IGNjLk5vZGUsXHJcbiAgICAgICAgc2VuZE5vZGU6IGNjLk5vZGUsXHJcbiAgICAgICAgc2hvb3ROdW06IDVcclxuICAgIH0sXHJcbiAgICB1bnVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2hvb3RpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNob290X251bSA9IDA7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQub2ZmKFwic2hvb3Rfc3RhcnRcIiwgdGhpcy5zaG9vdF9zdGFydCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQub2ZmKFwic2hvb3RfZW5kXCIsIHRoaXMuc2hvb3RfZW5kLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICByZXVzZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBfLmNsb25lKGRhdGEpO1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHRoaXMucGFyZW50ID0gdGhpcy5ub2RlLnBhcmVudDtcclxuICAgICAgICB0aGlzLnBhcmVudC5vbihcInNob290X3N0YXJ0XCIsIHRoaXMuc2hvb3Rfc3RhcnQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMucGFyZW50Lm9uKFwic2hvb3RfZW5kXCIsIHRoaXMuc2hvb3RfZW5kLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnNob290aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaG9vdF9udW0gPSAwO1xyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe6L+b5YWlXHJcbiAgICBvbkNvbGxpc2lvbkVudGVyOiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQuaXNEZWF0aCkgcmV0dXJuO1xyXG4gICAgICAgIGlmIChnYW1lLmlzT3ZlcikgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuc2hvb3RfbnVtID0gMDtcclxuICAgICAgICBpZiAodGhpcy5zaG9vdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5lbWl0KFwiY29sbGlzaW9uX3Nob290X3N0YXJ0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvL+eisOaSnuWBnOeVmVxyXG4gICAgb25Db2xsaXNpb25TdGF5OiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG9vdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnNob290X251bSsrO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG9vdF9udW0gPj0gdGhpcy5zaG9vdE51bSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG9vdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe6YCA5Ye6XHJcbiAgICBvbkNvbGxpc2lvbkV4aXQ6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIHRoaXMuc2hvb3RfbnVtID0gMDtcclxuICAgIH0sXHJcbiAgICAvL+W8gOWni+WwhOWHu1xyXG4gICAgc2hvb3Rfc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5zaG9vdGluZyA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgLy/lsITlh7vliqjkvZznu5PmnZ9cclxuICAgIHNob290X2VuZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG9vdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnNob290KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMuc2hvb3RpbmcgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvL+ivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAglxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgIH0sXHJcbiAgICBzaG9vdCgpIHtcclxuICAgICAgICB0aGlzLnNob290aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHNlbmROb2RlID0gdGhpcy5zZW5kTm9kZSB8fCB0aGlzLm5vZGU7XHJcbiAgICAgICAgbGV0IHNob290UG9zID0gc2VuZE5vZGUuY29udmVydFRvV29ybGRTcGFjZUFSKGdhbWUucG9pbnQxKTtcclxuICAgICAgICBsZXQgdGFyZ2V0UG9zID0gc2VuZE5vZGUuY29udmVydFRvV29ybGRTcGFjZUFSKGdhbWUucG9pbnQyKTtcclxuICAgICAgICBsZXQgYW5nbGUgPSBnYW1lLmdhbWVVdGlscy5nZXRSb3RhdGlvbihzaG9vdFBvcywgdGFyZ2V0UG9zKTtcclxuICAgICAgICBpZiAodGhpcy5ub2RlLnNjYWxlWCA8IDApIHtcclxuICAgICAgICAgICAgYW5nbGUgPSAzNjAgLSBhbmdsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIF8uYXNzaWduSW4odGhpcy5kYXRhLCB7XHJcbiAgICAgICAgdGhpcy5kYXRhLnByZWZhYk5hbWUgPSB0aGlzLmJ1bGxldE5hbWU7Ly/pooTliLbkvZPlkI3np7BcclxuICAgICAgICB0aGlzLmRhdGEudiA9IHNob290UG9zOy8v5L2N572uXHJcbiAgICAgICAgdGhpcy5kYXRhLmFuZ2xlID0gYW5nbGU7Ly/op5LluqZcclxuICAgICAgICB0aGlzLmRhdGEuZ3JvdXAgPSBcImVuYnVsbFwiOyAvL+e7hFxyXG4gICAgICAgIC8vcHJlZmFiTmFtZVxyXG4gICAgICAgIGdhbWUuZW1pdChcInNob290XCIsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuZW1pdChcImNvbGxpc2lvbl9zaG9vdF9lbmRcIik7XHJcbiAgICAgICAgdGhpcy5zaG9vdF9udW0gPSAwO1xyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/enemy/enemyControl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '70ca4oo5GNEj5N/4e2f8oiQ', 'enemyControl');
// Script/enemy/enemyControl.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {
    _isMove: false,
    attackTme: 1 //攻击时间

  },
  // get isMove() {
  //     return this._isMove;
  // },
  emitMove: function emitMove(value) {
    if (this._isMove != value) {
      this._isMove = value;
      if (value) this.node.emit("key_down", game.gameControl.left);else this.node.emit("key_up", game.gameControl.left);
    }
  },
  onLoad: function onLoad() {},
  unuse: function unuse() {
    this.node.off("onCollisionEnter", this.onFindEnter, this);
    this.node.off("onCollisionExit", this.onFindExit, this);
  },
  reuse: function reuse(data) {
    this.sendTime = 0;
    this.targets = [];
    this.node.on("onCollisionEnter", this.onFindEnter, this);
    this.node.on("onCollisionExit", this.onFindExit, this);
  },
  onEnable: function onEnable() {},
  onDisable: function onDisable() {},
  onDestroy: function onDestroy() {},
  onFindEnter: function onFindEnter(target) {
    if (this.node.isDeath) return;
    var node = target.node;

    if (this.targets.indexOf(node) < 0) {
      this.targets.push(node);
    }
  },
  onFindExit: function onFindExit(target) {
    if (this.node.isDeath) return;
    var node = target.node;
    var idx = this.targets.indexOf(node);

    if (idx >= 0) {
      this.targets.splice(idx, 1);
    }
  },
  start: function start() {},
  update: function update(dt) {
    if (game.isOver) return; //游戏结束

    if (this.node.isDeath) return; //角色死亡

    this.sendTime += dt;

    if (this.targets.length > 0) {
      //有目标
      this.emitMove(false);

      if (this.sendTime > this.attackTme) //攻击时间到了
        {
          this.sendTime = 0;
          this.node.emit("attack");
        }
    } else {
      this.emitMove(true); //= true;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxlbmVteVxcZW5lbXlDb250cm9sLmpzIl0sIm5hbWVzIjpbIlBvb2xDb21wb25lbnQiLCJyZXF1aXJlIiwiY2MiLCJDbGFzcyIsInByb3BlcnRpZXMiLCJfaXNNb3ZlIiwiYXR0YWNrVG1lIiwiZW1pdE1vdmUiLCJ2YWx1ZSIsIm5vZGUiLCJlbWl0IiwiZ2FtZSIsImdhbWVDb250cm9sIiwibGVmdCIsIm9uTG9hZCIsInVudXNlIiwib2ZmIiwib25GaW5kRW50ZXIiLCJvbkZpbmRFeGl0IiwicmV1c2UiLCJkYXRhIiwic2VuZFRpbWUiLCJ0YXJnZXRzIiwib24iLCJvbkVuYWJsZSIsIm9uRGlzYWJsZSIsIm9uRGVzdHJveSIsInRhcmdldCIsImlzRGVhdGgiLCJpbmRleE9mIiwicHVzaCIsImlkeCIsInNwbGljZSIsInN0YXJ0IiwidXBkYXRlIiwiZHQiLCJpc092ZXIiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLE9BQU8sRUFBRSxLQUREO0FBRVJDLElBQUFBLFNBQVMsRUFBRSxDQUZILENBRU07O0FBRk4sR0FGUDtBQU1MO0FBQ0E7QUFDQTtBQUNBQyxFQUFBQSxRQVRLLG9CQVNJQyxLQVRKLEVBU1c7QUFDWixRQUFJLEtBQUtILE9BQUwsSUFBZ0JHLEtBQXBCLEVBQTJCO0FBQ3ZCLFdBQUtILE9BQUwsR0FBZUcsS0FBZjtBQUNBLFVBQUlBLEtBQUosRUFDSSxLQUFLQyxJQUFMLENBQVVDLElBQVYsQ0FBZSxVQUFmLEVBQTJCQyxJQUFJLENBQUNDLFdBQUwsQ0FBaUJDLElBQTVDLEVBREosS0FHSSxLQUFLSixJQUFMLENBQVVDLElBQVYsQ0FBZSxRQUFmLEVBQXlCQyxJQUFJLENBQUNDLFdBQUwsQ0FBaUJDLElBQTFDO0FBQ1A7QUFDSixHQWpCSTtBQWtCTEMsRUFBQUEsTUFsQkssb0JBa0JJLENBQ1IsQ0FuQkk7QUFvQkxDLEVBQUFBLEtBQUssRUFBRSxpQkFBWTtBQUNmLFNBQUtOLElBQUwsQ0FBVU8sR0FBVixDQUFjLGtCQUFkLEVBQWtDLEtBQUtDLFdBQXZDLEVBQW9ELElBQXBEO0FBQ0EsU0FBS1IsSUFBTCxDQUFVTyxHQUFWLENBQWMsaUJBQWQsRUFBaUMsS0FBS0UsVUFBdEMsRUFBa0QsSUFBbEQ7QUFDSCxHQXZCSTtBQXdCTEMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0I7QUFDbkIsU0FBS0MsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsU0FBS2IsSUFBTCxDQUFVYyxFQUFWLENBQWEsa0JBQWIsRUFBaUMsS0FBS04sV0FBdEMsRUFBbUQsSUFBbkQ7QUFDQSxTQUFLUixJQUFMLENBQVVjLEVBQVYsQ0FBYSxpQkFBYixFQUFnQyxLQUFLTCxVQUFyQyxFQUFpRCxJQUFqRDtBQUNILEdBN0JJO0FBOEJMTSxFQUFBQSxRQTlCSyxzQkE4Qk0sQ0FDVixDQS9CSTtBQWdDTEMsRUFBQUEsU0FoQ0ssdUJBZ0NPLENBQ1gsQ0FqQ0k7QUFrQ0xDLEVBQUFBLFNBbENLLHVCQWtDTyxDQUNYLENBbkNJO0FBb0NMVCxFQUFBQSxXQXBDSyx1QkFvQ09VLE1BcENQLEVBb0NlO0FBQ2hCLFFBQUksS0FBS2xCLElBQUwsQ0FBVW1CLE9BQWQsRUFBdUI7QUFDdkIsUUFBSW5CLElBQUksR0FBR2tCLE1BQU0sQ0FBQ2xCLElBQWxCOztBQUNBLFFBQUksS0FBS2EsT0FBTCxDQUFhTyxPQUFiLENBQXFCcEIsSUFBckIsSUFBNkIsQ0FBakMsRUFBb0M7QUFDaEMsV0FBS2EsT0FBTCxDQUFhUSxJQUFiLENBQWtCckIsSUFBbEI7QUFDSDtBQUNKLEdBMUNJO0FBMkNMUyxFQUFBQSxVQTNDSyxzQkEyQ01TLE1BM0NOLEVBMkNjO0FBQ2YsUUFBSSxLQUFLbEIsSUFBTCxDQUFVbUIsT0FBZCxFQUF1QjtBQUN2QixRQUFJbkIsSUFBSSxHQUFHa0IsTUFBTSxDQUFDbEIsSUFBbEI7QUFDQSxRQUFJc0IsR0FBRyxHQUFHLEtBQUtULE9BQUwsQ0FBYU8sT0FBYixDQUFxQnBCLElBQXJCLENBQVY7O0FBQ0EsUUFBSXNCLEdBQUcsSUFBSSxDQUFYLEVBQWM7QUFDVixXQUFLVCxPQUFMLENBQWFVLE1BQWIsQ0FBb0JELEdBQXBCLEVBQXlCLENBQXpCO0FBQ0g7QUFDSixHQWxESTtBQW1ETEUsRUFBQUEsS0FuREssbUJBbURHLENBQ1AsQ0FwREk7QUFxRExDLEVBQUFBLE1BckRLLGtCQXFERUMsRUFyREYsRUFxRE07QUFDUCxRQUFJeEIsSUFBSSxDQUFDeUIsTUFBVCxFQUFpQixPQURWLENBQ2lCOztBQUN4QixRQUFJLEtBQUszQixJQUFMLENBQVVtQixPQUFkLEVBQXVCLE9BRmhCLENBRXdCOztBQUMvQixTQUFLUCxRQUFMLElBQWlCYyxFQUFqQjs7QUFDQSxRQUFJLEtBQUtiLE9BQUwsQ0FBYWUsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUFFO0FBQzNCLFdBQUs5QixRQUFMLENBQWMsS0FBZDs7QUFDQSxVQUFJLEtBQUtjLFFBQUwsR0FBZ0IsS0FBS2YsU0FBekIsRUFBb0M7QUFDcEM7QUFDSSxlQUFLZSxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsZUFBS1osSUFBTCxDQUFVQyxJQUFWLENBQWUsUUFBZjtBQUNIO0FBQ0osS0FQRCxNQVFLO0FBQ0QsV0FBS0gsUUFBTCxDQUFjLElBQWQsRUFEQyxDQUNtQjtBQUN2QjtBQUNKO0FBcEVJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIik7IC8v5rGg5a2Q57uE5Lu2XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IFBvb2xDb21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgX2lzTW92ZTogZmFsc2UsXHJcbiAgICAgICAgYXR0YWNrVG1lOiAxLCAvL+aUu+WHu+aXtumXtFxyXG4gICAgfSxcclxuICAgIC8vIGdldCBpc01vdmUoKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuX2lzTW92ZTtcclxuICAgIC8vIH0sXHJcbiAgICBlbWl0TW92ZSh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc01vdmUgIT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5faXNNb3ZlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFwia2V5X2Rvd25cIiwgZ2FtZS5nYW1lQ29udHJvbC5sZWZ0KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmVtaXQoXCJrZXlfdXBcIiwgZ2FtZS5nYW1lQ29udHJvbC5sZWZ0KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIHVudXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihcIm9uQ29sbGlzaW9uRW50ZXJcIiwgdGhpcy5vbkZpbmRFbnRlciwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihcIm9uQ29sbGlzaW9uRXhpdFwiLCB0aGlzLm9uRmluZEV4aXQsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuc2VuZFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihcIm9uQ29sbGlzaW9uRW50ZXJcIiwgdGhpcy5vbkZpbmRFbnRlciwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKFwib25Db2xsaXNpb25FeGl0XCIsIHRoaXMub25GaW5kRXhpdCwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgb25FbmFibGUoKSB7XHJcbiAgICB9LFxyXG4gICAgb25EaXNhYmxlKCkge1xyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICBvbkZpbmRFbnRlcih0YXJnZXQpIHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlLmlzRGVhdGgpIHJldHVybjtcclxuICAgICAgICB2YXIgbm9kZSA9IHRhcmdldC5ub2RlO1xyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldHMuaW5kZXhPZihub2RlKSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uRmluZEV4aXQodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZS5pc0RlYXRoKSByZXR1cm47XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0YXJnZXQubm9kZTtcclxuICAgICAgICB2YXIgaWR4ID0gdGhpcy50YXJnZXRzLmluZGV4T2Yobm9kZSlcclxuICAgICAgICBpZiAoaWR4ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICB1cGRhdGUoZHQpIHtcclxuICAgICAgICBpZiAoZ2FtZS5pc092ZXIpIHJldHVybjsvL+a4uOaIj+e7k+adn1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuaXNEZWF0aCkgcmV0dXJuOyAvL+inkuiJsuatu+S6oVxyXG4gICAgICAgIHRoaXMuc2VuZFRpbWUgKz0gZHQ7XHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0cy5sZW5ndGggPiAwKSB7IC8v5pyJ55uu5qCHXHJcbiAgICAgICAgICAgIHRoaXMuZW1pdE1vdmUoZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZW5kVGltZSA+IHRoaXMuYXR0YWNrVG1lKSAvL+aUu+WHu+aXtumXtOWIsOS6hlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRUaW1lID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFwiYXR0YWNrXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRNb3ZlKHRydWUpOy8vPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/localStorage.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2e428uQFSlI1qpJJtJv9kar', 'localStorage');
// Script/game/localStorage.js

"use strict";

module.exports = {
  _localStorage: {},
  clear: function clear() {
    this._localStorage = {};
    cc.sys.localStorage.clear();
  },
  removeItem: function removeItem(key) {
    cc.sys.localStorage.removeItem(key);
    delete this._localStorage[key];
  },
  setItem: function setItem(key, value) {
    this._localStorage[key] = value;

    try {
      value = JSON.stringify(value);
    } catch (e) {
      value = value;
    }

    cc.sys.localStorage.setItem(key, value);
  },
  getItem: function getItem(key) {
    if (this._localStorage[key]) {
      return this._localStorage[key];
      var value = cc.sys.localStorage.getItem(key);

      if (value) {
        try {
          value = JSON.parse(value);
        } catch (e) {
          value = value;
        }

        this._localStorage[key] = value;
        return value;
      }

      return null;
    }
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lXFxsb2NhbFN0b3JhZ2UuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIl9sb2NhbFN0b3JhZ2UiLCJjbGVhciIsImNjIiwic3lzIiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsImtleSIsInNldEl0ZW0iLCJ2YWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwiZ2V0SXRlbSIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsYUFBYSxFQUFFLEVBREY7QUFFYkMsRUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBQ2YsU0FBS0QsYUFBTCxHQUFxQixFQUFyQjtBQUNBRSxJQUFBQSxFQUFFLENBQUNDLEdBQUgsQ0FBT0MsWUFBUCxDQUFvQkgsS0FBcEI7QUFDSCxHQUxZO0FBTWJJLEVBQUFBLFVBQVUsRUFBRSxvQkFBVUMsR0FBVixFQUFlO0FBQ3ZCSixJQUFBQSxFQUFFLENBQUNDLEdBQUgsQ0FBT0MsWUFBUCxDQUFvQkMsVUFBcEIsQ0FBK0JDLEdBQS9CO0FBQ0EsV0FBTyxLQUFLTixhQUFMLENBQW1CTSxHQUFuQixDQUFQO0FBQ0gsR0FUWTtBQVViQyxFQUFBQSxPQUFPLEVBQUUsaUJBQVVELEdBQVYsRUFBZUUsS0FBZixFQUFzQjtBQUMzQixTQUFLUixhQUFMLENBQW1CTSxHQUFuQixJQUEwQkUsS0FBMUI7O0FBQ0EsUUFBSTtBQUNBQSxNQUFBQSxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixLQUFmLENBQVI7QUFDSCxLQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1JILE1BQUFBLEtBQUssR0FBR0EsS0FBUjtBQUNIOztBQUNETixJQUFBQSxFQUFFLENBQUNDLEdBQUgsQ0FBT0MsWUFBUCxDQUFvQkcsT0FBcEIsQ0FBNEJELEdBQTVCLEVBQWlDRSxLQUFqQztBQUNILEdBbEJZO0FBbUJiSSxFQUFBQSxPQUFPLEVBQUUsaUJBQVVOLEdBQVYsRUFBZTtBQUNwQixRQUFJLEtBQUtOLGFBQUwsQ0FBbUJNLEdBQW5CLENBQUosRUFBNkI7QUFDekIsYUFBTyxLQUFLTixhQUFMLENBQW1CTSxHQUFuQixDQUFQO0FBQ0EsVUFBSUUsS0FBSyxHQUFHTixFQUFFLENBQUNDLEdBQUgsQ0FBT0MsWUFBUCxDQUFvQlEsT0FBcEIsQ0FBNEJOLEdBQTVCLENBQVo7O0FBQ0EsVUFBSUUsS0FBSixFQUFXO0FBQ1AsWUFBSTtBQUNBQSxVQUFBQSxLQUFLLEdBQUdDLElBQUksQ0FBQ0ksS0FBTCxDQUFXTCxLQUFYLENBQVI7QUFDSCxTQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1JILFVBQUFBLEtBQUssR0FBR0EsS0FBUjtBQUNIOztBQUNELGFBQUtSLGFBQUwsQ0FBbUJNLEdBQW5CLElBQTBCRSxLQUExQjtBQUNBLGVBQU9BLEtBQVA7QUFDSDs7QUFDRCxhQUFPLElBQVA7QUFDSDtBQUNKO0FBbENZLENBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIF9sb2NhbFN0b3JhZ2U6IHt9LFxyXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9sb2NhbFN0b3JhZ2UgPSB7fTtcclxuICAgICAgICBjYy5zeXMubG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGNjLnN5cy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9sb2NhbFN0b3JhZ2Vba2V5XTtcclxuICAgIH0sXHJcbiAgICBzZXRJdGVtOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2xvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYy5zeXMubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0SXRlbTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9sb2NhbFN0b3JhZ2Vba2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxTdG9yYWdlW2tleV07XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNjLnN5cy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxTdG9yYWdlW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/layer/shootBomb.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f2566cSZnlDGZVdumaO1M4+', 'shootBomb');
// Script/layer/shootBomb.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    game.off("bomb1", this.bomb1, this); //爆炸

    game.off("bomb2", this.bomb2, this); //爆炸

    game.off("bomb3", this.bomb3, this); //爆炸
  },
  onLoad: function onLoad() {
    game.on("bomb1", this.bomb1, this); //爆炸

    game.on("bomb2", this.bomb2, this); //爆炸

    game.on("bomb3", this.bomb3, this); //爆炸
  },

  /********
   *
   * 爆炸效果
   * **/
  bomb1: function bomb1(data) {
    data.aniName = "bomb1";
    var pool = game.bombPool["bomb1"];

    if (pool && pool.prefab) {
      pool.getNode(data, this.node); //this.node.addChild(b);
    }
  },

  /********
   *
   * 爆炸效果
   * **/
  bomb2: function bomb2(data) {
    data.aniName = "bomb2";
    var pool = game.bombPool["bomb2"];

    if (pool && pool.prefab) {
      pool.getNode(data, this.node); //this.node.addChild(b);
    }
  },

  /********
   * 爆炸效果
   * **/
  bomb3: function bomb3(data) {
    data.aniName = "bomb3";
    var pool = game.bombPool["bomb3"];

    if (pool && pool.prefab) {
      pool.getNode(data, this.node); //this.node.addChild(b);
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxsYXllclxcc2hvb3RCb21iLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25EZXN0cm95IiwiZ2FtZSIsIm9mZiIsImJvbWIxIiwiYm9tYjIiLCJib21iMyIsIm9uTG9hZCIsIm9uIiwiZGF0YSIsImFuaU5hbWUiLCJwb29sIiwiYm9tYlBvb2wiLCJwcmVmYWIiLCJnZXROb2RlIiwibm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsU0FISyx1QkFHTztBQUNSQyxJQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxPQUFULEVBQWtCLEtBQUtDLEtBQXZCLEVBQThCLElBQTlCLEVBRFEsQ0FDNEI7O0FBQ3BDRixJQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxPQUFULEVBQWtCLEtBQUtFLEtBQXZCLEVBQThCLElBQTlCLEVBRlEsQ0FFNEI7O0FBQ3BDSCxJQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxPQUFULEVBQWtCLEtBQUtHLEtBQXZCLEVBQThCLElBQTlCLEVBSFEsQ0FHNEI7QUFDdkMsR0FQSTtBQVFMQyxFQUFBQSxNQVJLLG9CQVFJO0FBQ0xMLElBQUFBLElBQUksQ0FBQ00sRUFBTCxDQUFRLE9BQVIsRUFBaUIsS0FBS0osS0FBdEIsRUFBNkIsSUFBN0IsRUFESyxDQUM4Qjs7QUFDbkNGLElBQUFBLElBQUksQ0FBQ00sRUFBTCxDQUFRLE9BQVIsRUFBaUIsS0FBS0gsS0FBdEIsRUFBNkIsSUFBN0IsRUFGSyxDQUU4Qjs7QUFDbkNILElBQUFBLElBQUksQ0FBQ00sRUFBTCxDQUFRLE9BQVIsRUFBaUIsS0FBS0YsS0FBdEIsRUFBNkIsSUFBN0IsRUFISyxDQUc4QjtBQUN0QyxHQVpJOztBQWFMO0FBQ0o7QUFDQTtBQUNBO0FBQ0lGLEVBQUFBLEtBakJLLGlCQWlCQ0ssSUFqQkQsRUFpQk87QUFDUkEsSUFBQUEsSUFBSSxDQUFDQyxPQUFMLEdBQWUsT0FBZjtBQUNBLFFBQUlDLElBQUksR0FBR1QsSUFBSSxDQUFDVSxRQUFMLENBQWMsT0FBZCxDQUFYOztBQUNBLFFBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDRSxNQUFqQixFQUF5QjtBQUNyQkYsTUFBQUEsSUFBSSxDQUFDRyxPQUFMLENBQWFMLElBQWIsRUFBbUIsS0FBS00sSUFBeEIsRUFEcUIsQ0FFckI7QUFDSDtBQUNKLEdBeEJJOztBQXlCTDtBQUNKO0FBQ0E7QUFDQTtBQUNJVixFQUFBQSxLQTdCSyxpQkE2QkNJLElBN0JELEVBNkJPO0FBQ1JBLElBQUFBLElBQUksQ0FBQ0MsT0FBTCxHQUFlLE9BQWY7QUFDQSxRQUFJQyxJQUFJLEdBQUdULElBQUksQ0FBQ1UsUUFBTCxDQUFjLE9BQWQsQ0FBWDs7QUFDQSxRQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0UsTUFBakIsRUFBeUI7QUFDckJGLE1BQUFBLElBQUksQ0FBQ0csT0FBTCxDQUFhTCxJQUFiLEVBQW1CLEtBQUtNLElBQXhCLEVBRHFCLENBRXJCO0FBQ0g7QUFDSixHQXBDSTs7QUFxQ0w7QUFDSjtBQUNBO0FBQ0lULEVBQUFBLEtBeENLLGlCQXdDQ0csSUF4Q0QsRUF3Q087QUFDUkEsSUFBQUEsSUFBSSxDQUFDQyxPQUFMLEdBQWUsT0FBZjtBQUNBLFFBQUlDLElBQUksR0FBR1QsSUFBSSxDQUFDVSxRQUFMLENBQWMsT0FBZCxDQUFYOztBQUNBLFFBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDRSxNQUFqQixFQUF5QjtBQUNyQkYsTUFBQUEsSUFBSSxDQUFDRyxPQUFMLENBQWFMLElBQWIsRUFBbUIsS0FBS00sSUFBeEIsRUFEcUIsQ0FFckI7QUFDSDtBQUNKO0FBL0NJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIGdhbWUub2ZmKFwiYm9tYjFcIiwgdGhpcy5ib21iMSwgdGhpcyk7Ly/niIbngrhcclxuICAgICAgICBnYW1lLm9mZihcImJvbWIyXCIsIHRoaXMuYm9tYjIsIHRoaXMpOy8v54iG54K4XHJcbiAgICAgICAgZ2FtZS5vZmYoXCJib21iM1wiLCB0aGlzLmJvbWIzLCB0aGlzKTsvL+eIhueCuFxyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBnYW1lLm9uKFwiYm9tYjFcIiwgdGhpcy5ib21iMSwgdGhpcyk7Ly/niIbngrhcclxuICAgICAgICBnYW1lLm9uKFwiYm9tYjJcIiwgdGhpcy5ib21iMiwgdGhpcyk7Ly/niIbngrhcclxuICAgICAgICBnYW1lLm9uKFwiYm9tYjNcIiwgdGhpcy5ib21iMywgdGhpcyk7Ly/niIbngrhcclxuICAgIH0sXHJcbiAgICAvKioqKioqKipcclxuICAgICAqXHJcbiAgICAgKiDniIbngrjmlYjmnpxcclxuICAgICAqICoqL1xyXG4gICAgYm9tYjEoZGF0YSkge1xyXG4gICAgICAgIGRhdGEuYW5pTmFtZSA9IFwiYm9tYjFcIjtcclxuICAgICAgICBsZXQgcG9vbCA9IGdhbWUuYm9tYlBvb2xbXCJib21iMVwiXTtcclxuICAgICAgICBpZiAocG9vbCAmJiBwb29sLnByZWZhYikge1xyXG4gICAgICAgICAgICBwb29sLmdldE5vZGUoZGF0YSwgdGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgLy90aGlzLm5vZGUuYWRkQ2hpbGQoYik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qKioqKioqKlxyXG4gICAgICpcclxuICAgICAqIOeIhueCuOaViOaenFxyXG4gICAgICogKiovXHJcbiAgICBib21iMihkYXRhKSB7XHJcbiAgICAgICAgZGF0YS5hbmlOYW1lID0gXCJib21iMlwiO1xyXG4gICAgICAgIGxldCBwb29sID0gZ2FtZS5ib21iUG9vbFtcImJvbWIyXCJdO1xyXG4gICAgICAgIGlmIChwb29sICYmIHBvb2wucHJlZmFiKSB7XHJcbiAgICAgICAgICAgIHBvb2wuZ2V0Tm9kZShkYXRhLCB0aGlzLm5vZGUpO1xyXG4gICAgICAgICAgICAvL3RoaXMubm9kZS5hZGRDaGlsZChiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLyoqKioqKioqXHJcbiAgICAgKiDniIbngrjmlYjmnpxcclxuICAgICAqICoqL1xyXG4gICAgYm9tYjMoZGF0YSkge1xyXG4gICAgICAgIGRhdGEuYW5pTmFtZSA9IFwiYm9tYjNcIjtcclxuICAgICAgICBsZXQgcG9vbCA9IGdhbWUuYm9tYlBvb2xbXCJib21iM1wiXTtcclxuICAgICAgICBpZiAocG9vbCAmJiBwb29sLnByZWZhYikge1xyXG4gICAgICAgICAgICBwb29sLmdldE5vZGUoZGF0YSwgdGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgLy90aGlzLm5vZGUuYWRkQ2hpbGQoYik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/soundManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fee26zaSPFIiIpnn8GNirz9', 'soundManager');
// Script/game/soundManager.js

"use strict";

module.exports = {
  _musicUrl: null,
  _musicMute: false,
  _musicVolume: 1,
  _effectList: [],
  _effectMute: false,
  _effectVolume: 1,
  _curMusicId: null,
  init: function init() {
    var musicMute = game.localStorage.getItem("musicMute");
    if (musicMute == null) musicMute = false;
    this.musicMute = musicMute;
    var effectMute = game.localStorage.getItem("effectMute");
    if (effectMute == null) effectMute = false;
    this.effectMute = effectMute;
    var musicVolume = game.localStorage.getItem("musicVolume");
    if (musicVolume == null) musicVolume = 1;
    this.musicVolume = musicVolume;
    var effectVolume = game.localStorage.getItem("effectVolume");
    if (effectVolume == null) effectVolume = 1;
    this.effectVolume = effectVolume;
  },

  /****
   * 音乐是否静音
   * ****/
  get musicMute() {
    return this._musicMute;
  },

  set musicMute(value) {
    if (this._musicMute != value) {
      game.localStorage.setItem("musicMute", value);
      this._musicMute = value;
      if (!value) this.playMusic(this._musicUrl, true, true);else cc.audioEngine.stopMusic();
    }
  },

  /**背景音乐音量 */
  get musicVolume() {
    return this._musicVolume;
  },

  set musicVolume(value) {
    if (this._musicVolume != value) {
      game.localStorage.setItem("musicVolume", value);
      this._musicVolume = value;
      cc.audioEngine.setMusicVolume(value);
    }
  },

  /**音效是否静音 */
  get effectMute() {
    return this._effectMute;
  },

  set effectMute(value) {
    if (this._effectMute != value) {
      game.localStorage.setItem("effectMute", value);
      this._effectMute = value;
      if (value) cc.audioEngine.stopAllEffects();
    }
  },

  /**音效音量 */
  get effectVolume() {
    return this._effectVolume;
  },

  set effectVolume(value) {
    if (this._effectVolume != value) {
      game.localStorage.setItem("effectVolume", value);
      this._effectVolume = value;
      cc.audioEngine.setEffectsVolume(value);
    }
  },

  /**
   * 播放背景音乐
   */
  playMusic: function playMusic(url, loop, afresh) {
    if (!afresh && this._musicUrl == url) return;
    if (this._musicMute) return;
    this._musicUrl = url;
    cc.resources.load(url, cc.AudioClip, function (err, clip) {
      if (this._curMusicId) cc.audioEngine.stop(this._curMusicId);
      this._curMusicId = cc.audioEngine.playMusic(clip, loop);
    }.bind(this));
  },

  /**暂停播放背景音乐 */
  pauseMusic: function pauseMusic() {
    cc.audioEngine.pauseMusic();
  },

  /**继续播放背景音乐 */
  resumeMusic: function resumeMusic() {
    cc.audioEngine.resumeMusic();
  },

  /**停止背景音乐 */
  stopMusic: function stopMusic() {
    cc.audioEngine.stopMusic();
  },

  /**
   * 播放音效
   * @param audioName 音乐文件名称，不需要填文件后缀
   * @param loop 是否循环播放
   * @param folder 资源文件夹名称，必须放在resources文件夹下面
   */
  playEffect: function playEffect(url, loop) {
    loop = loop || false;
    this.checkEffect();
    if (this._effectMute) return;
    cc.loader.loadRes(url, cc.AudioClip, function (err, clip) {
      var id = cc.audioEngine.playEffect(clip, loop);
      cc.audioEngine.setVolume(id, this.effectVolume);

      this._effectList.push({
        "url": url,
        "id": id
      });
    }.bind(this));
  },
  checkEffect: function checkEffect() {
    for (var i = this._effectList.length - 1; i >= 0; i--) {
      var obj = this._effectList[i];
      if (cc.audioEngine.getState(obj["id"]) == -1) this._effectList.splice(i, 1);
    }
  },

  /**
   * 停止某个音效
   * @param audioName
   * @param folder
   */
  stopEffect: function stopEffect(url) {
    for (var i = this._effectList.length - 1; i >= 0; i--) {
      var obj = this._effectList[i];

      if (cc.audioEngine.getState(obj["id"]) == -1) {
        this._effectList.splice(i, 1);

        continue;
      }

      if (obj["url"] == url) {
        cc.audioEngine.stopEffect(obj["id"]);

        this._effectList.splice(i, 1);
      }
    }
  },

  /**停止所有音效 */
  stopAllEffect: function stopAllEffect() {
    cc.audioEngine.stopAllEffects();
    this._effectList.length = 0;
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/factory/taHp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6995994YAJM0bDydGhmuXN4', 'taHp');
// Script/factory/taHp.js

"use strict";

var HpComponent = require("hpComponent"); //池子组件


cc.Class({
  "extends": HpComponent,
  properties: {
    progressBar: cc.ProgressBar,
    totalHp: 1000
  },
  //受到的伤害
  onHurt: function onHurt(value) {
    this.curHp -= value;
    this.isShow = true;
    this.progressBar.node.opacity = 255;
    this.showTime = 0;
    this.updateBar();

    if (this.curHp <= 0) {
      this.node.emit("death");
      this.parent.emit("death");
    }
  },
  onDestroy: function onDestroy() {},
  updateBar: function updateBar() {
    var progress = (this.curHp / this.totalHp).format();
    this.progressBar.progress = progress;
    this.node.emit("dissolve", 1 - progress);
  },
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    var hurt = other.node.getComponent("hurt");
    if (!hurt || hurt.hurtValue == 0) return;
    this.curHp -= hurt.hurtValue;
    hurt.end();
    this.isShow = true;
    this.progressBar.node.opacity = 255;
    this.showTime = 0;
    this.updateBar();

    if (this.curHp <= 0) {
      this.node.emit("death");
    } //D:\project\client\dbl-client\build\
    // jsb-link\frameworks\runtime-src\proj.android-studio\app\jni\Android.mk

  },
  onCollisionStay: function onCollisionStay(other, self) {},
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {// cc.log("碰撞退出")
  },
  onLoad: function onLoad() {
    this.curHp = this.totalHp;
    this.updateBar();
    this.showTime = 0;
    this.isShow = false;
    this.progressBar.node.opacity = 0;
  },
  start: function start() {},
  update: function update(dt) {
    this.showTime += dt;

    if (this.isShow && this.showTime > 2) {
      this.isShow = false;
      this.progressBar.node.opacity = 0;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxmYWN0b3J5XFx0YUhwLmpzIl0sIm5hbWVzIjpbIkhwQ29tcG9uZW50IiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwicHJvZ3Jlc3NCYXIiLCJQcm9ncmVzc0JhciIsInRvdGFsSHAiLCJvbkh1cnQiLCJ2YWx1ZSIsImN1ckhwIiwiaXNTaG93Iiwibm9kZSIsIm9wYWNpdHkiLCJzaG93VGltZSIsInVwZGF0ZUJhciIsImVtaXQiLCJwYXJlbnQiLCJvbkRlc3Ryb3kiLCJwcm9ncmVzcyIsImZvcm1hdCIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvdGhlciIsInNlbGYiLCJodXJ0IiwiZ2V0Q29tcG9uZW50IiwiaHVydFZhbHVlIiwiZW5kIiwib25Db2xsaXNpb25TdGF5Iiwib25Db2xsaXNpb25FeGl0Iiwib25Mb2FkIiwic3RhcnQiLCJ1cGRhdGUiLCJkdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQXpCLEVBQTBDOzs7QUFDMUNDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsV0FESjtBQUVMSSxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsV0FBVyxFQUFFSCxFQUFFLENBQUNJLFdBRFI7QUFFUkMsSUFBQUEsT0FBTyxFQUFFO0FBRkQsR0FGUDtBQU1MO0FBQ0FDLEVBQUFBLE1BUEssa0JBT0VDLEtBUEYsRUFPUztBQUNWLFNBQUtDLEtBQUwsSUFBY0QsS0FBZDtBQUNBLFNBQUtFLE1BQUwsR0FBYyxJQUFkO0FBQ0EsU0FBS04sV0FBTCxDQUFpQk8sSUFBakIsQ0FBc0JDLE9BQXRCLEdBQWdDLEdBQWhDO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtDLFNBQUw7O0FBQ0EsUUFBSSxLQUFLTCxLQUFMLElBQWMsQ0FBbEIsRUFBcUI7QUFDakIsV0FBS0UsSUFBTCxDQUFVSSxJQUFWLENBQWUsT0FBZjtBQUNBLFdBQUtDLE1BQUwsQ0FBWUQsSUFBWixDQUFpQixPQUFqQjtBQUNIO0FBQ0osR0FqQkk7QUFrQkxFLEVBQUFBLFNBbEJLLHVCQWtCTyxDQUNYLENBbkJJO0FBb0JMSCxFQUFBQSxTQXBCSyx1QkFvQk87QUFDUixRQUFJSSxRQUFRLEdBQUcsQ0FBQyxLQUFLVCxLQUFMLEdBQWEsS0FBS0gsT0FBbkIsRUFBNEJhLE1BQTVCLEVBQWY7QUFDQSxTQUFLZixXQUFMLENBQWlCYyxRQUFqQixHQUE0QkEsUUFBNUI7QUFDQSxTQUFLUCxJQUFMLENBQVVJLElBQVYsQ0FBZSxVQUFmLEVBQTRCLElBQUlHLFFBQWhDO0FBQ0gsR0F4Qkk7QUF5Qkw7QUFDQUUsRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3JDLFFBQUlDLElBQUksR0FBR0YsS0FBSyxDQUFDVixJQUFOLENBQVdhLFlBQVgsQ0FBd0IsTUFBeEIsQ0FBWDtBQUNBLFFBQUksQ0FBQ0QsSUFBRCxJQUFTQSxJQUFJLENBQUNFLFNBQUwsSUFBa0IsQ0FBL0IsRUFBa0M7QUFDbEMsU0FBS2hCLEtBQUwsSUFBY2MsSUFBSSxDQUFDRSxTQUFuQjtBQUNBRixJQUFBQSxJQUFJLENBQUNHLEdBQUw7QUFDQSxTQUFLaEIsTUFBTCxHQUFjLElBQWQ7QUFDQSxTQUFLTixXQUFMLENBQWlCTyxJQUFqQixDQUFzQkMsT0FBdEIsR0FBZ0MsR0FBaEM7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS0MsU0FBTDs7QUFDQSxRQUFJLEtBQUtMLEtBQUwsSUFBYyxDQUFsQixFQUFxQjtBQUNqQixXQUFLRSxJQUFMLENBQVVJLElBQVYsQ0FBZSxPQUFmO0FBQ0gsS0FYb0MsQ0FZckM7QUFDQTs7QUFDSCxHQXhDSTtBQXlDTFksRUFBQUEsZUFBZSxFQUFFLHlCQUFVTixLQUFWLEVBQWlCQyxJQUFqQixFQUF1QixDQUN2QyxDQTFDSTtBQTJDTDtBQUNBTSxFQUFBQSxlQUFlLEVBQUUseUJBQVVQLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCLENBQ3BDO0FBQ0gsR0E5Q0k7QUErQ0xPLEVBQUFBLE1BL0NLLG9CQStDSTtBQUNMLFNBQUtwQixLQUFMLEdBQWEsS0FBS0gsT0FBbEI7QUFDQSxTQUFLUSxTQUFMO0FBQ0EsU0FBS0QsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtILE1BQUwsR0FBYyxLQUFkO0FBQ0EsU0FBS04sV0FBTCxDQUFpQk8sSUFBakIsQ0FBc0JDLE9BQXRCLEdBQWdDLENBQWhDO0FBQ0gsR0FyREk7QUFzRExrQixFQUFBQSxLQXRESyxtQkFzREcsQ0FDUCxDQXZESTtBQXdETEMsRUFBQUEsTUF4REssa0JBd0RFQyxFQXhERixFQXdETTtBQUNQLFNBQUtuQixRQUFMLElBQWlCbUIsRUFBakI7O0FBQ0EsUUFBSSxLQUFLdEIsTUFBTCxJQUFlLEtBQUtHLFFBQUwsR0FBZ0IsQ0FBbkMsRUFBc0M7QUFDbEMsV0FBS0gsTUFBTCxHQUFjLEtBQWQ7QUFDQSxXQUFLTixXQUFMLENBQWlCTyxJQUFqQixDQUFzQkMsT0FBdEIsR0FBZ0MsQ0FBaEM7QUFDSDtBQUNKO0FBOURJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBIcENvbXBvbmVudCA9IHJlcXVpcmUoXCJocENvbXBvbmVudFwiKTsgLy/msaDlrZDnu4Tku7ZcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogSHBDb21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgcHJvZ3Jlc3NCYXI6IGNjLlByb2dyZXNzQmFyLFxyXG4gICAgICAgIHRvdGFsSHA6IDEwMDBcclxuICAgIH0sXHJcbiAgICAvL+WPl+WIsOeahOS8pOWus1xyXG4gICAgb25IdXJ0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jdXJIcCAtPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmlzU2hvdyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCYXIoKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJIcCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFwiZGVhdGhcIik7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmVtaXQoXCJkZWF0aFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZUJhcigpIHtcclxuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAodGhpcy5jdXJIcCAvIHRoaXMudG90YWxIcCkuZm9ybWF0KCk7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgICAgIHRoaXMubm9kZS5lbWl0KFwiZGlzc29sdmVcIiwgKDEgLSBwcm9ncmVzcykpO1xyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe5qOA5rWL5YiwXHJcbiAgICBvbkNvbGxpc2lvbkVudGVyOiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcclxuICAgICAgICB2YXIgaHVydCA9IG90aGVyLm5vZGUuZ2V0Q29tcG9uZW50KFwiaHVydFwiKTtcclxuICAgICAgICBpZiAoIWh1cnQgfHwgaHVydC5odXJ0VmFsdWUgPT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuY3VySHAgLT0gaHVydC5odXJ0VmFsdWU7XHJcbiAgICAgICAgaHVydC5lbmQoKTtcclxuICAgICAgICB0aGlzLmlzU2hvdyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCYXIoKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJIcCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFwiZGVhdGhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vRDpcXHByb2plY3RcXGNsaWVudFxcZGJsLWNsaWVudFxcYnVpbGRcXFxyXG4gICAgICAgIC8vIGpzYi1saW5rXFxmcmFtZXdvcmtzXFxydW50aW1lLXNyY1xccHJvai5hbmRyb2lkLXN0dWRpb1xcYXBwXFxqbmlcXEFuZHJvaWQubWtcclxuICAgIH0sXHJcbiAgICBvbkNvbGxpc2lvblN0YXk6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe6YCA5Ye6XHJcbiAgICBvbkNvbGxpc2lvbkV4aXQ6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIC8vIGNjLmxvZyhcIueisOaSnumAgOWHulwiKVxyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLmN1ckhwID0gdGhpcy50b3RhbEhwO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQmFyKCk7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLm5vZGUub3BhY2l0eSA9IDA7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlKGR0KSB7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSArPSBkdDtcclxuICAgICAgICBpZiAodGhpcy5pc1Nob3cgJiYgdGhpcy5zaG93VGltZSA+IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/gameAction.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1987bpreidA7KxKdyHPjZqG', 'gameAction');
// Script/game/gameAction.js

"use strict";

module.exports = {
  /*****站立    跑步  跳跃 射击  蹲下*/
  idle: "idle",

  /*****跳跃上*/
  jump: "jump",

  /*****跑步动作*/
  run: "run",

  /*****射击动作*/
  attack: "attack",

  /*****蹲下动作*/
  crouch: "crouch",

  /*****向左移动*/
  MOVE_LEFT: 1,

  /*****向右移动*/
  MOVE_RIGHT: 2
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lXFxnYW1lQWN0aW9uLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpZGxlIiwianVtcCIsInJ1biIsImF0dGFjayIsImNyb3VjaCIsIk1PVkVfTEVGVCIsIk1PVkVfUklHSFQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiO0FBQ0FDLEVBQUFBLElBQUksRUFBRSxNQUZPOztBQUdiO0FBQ0FDLEVBQUFBLElBQUksRUFBRSxNQUpPOztBQUtiO0FBQ0FDLEVBQUFBLEdBQUcsRUFBRSxLQU5ROztBQU9iO0FBQ0FDLEVBQUFBLE1BQU0sRUFBRSxRQVJLOztBQVNiO0FBQ0FDLEVBQUFBLE1BQU0sRUFBRSxRQVZLOztBQVdiO0FBQ0FDLEVBQUFBLFNBQVMsRUFBRSxDQVpFOztBQWFiO0FBQ0FDLEVBQUFBLFVBQVUsRUFBRTtBQWRDLENBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIC8qKioqKuermeeriyAgICDot5HmraUgIOi3s+i3gyDlsITlh7sgIOi5suS4iyovXHJcbiAgICBpZGxlOiBcImlkbGVcIixcclxuICAgIC8qKioqKui3s+i3g+S4iiovXHJcbiAgICBqdW1wOiBcImp1bXBcIixcclxuICAgIC8qKioqKui3keatpeWKqOS9nCovXHJcbiAgICBydW46IFwicnVuXCIsXHJcbiAgICAvKioqKirlsITlh7vliqjkvZwqL1xyXG4gICAgYXR0YWNrOiBcImF0dGFja1wiLFxyXG4gICAgLyoqKioq6Lmy5LiL5Yqo5L2cKi9cclxuICAgIGNyb3VjaDogXCJjcm91Y2hcIixcclxuICAgIC8qKioqKuWQkeW3puenu+WKqCovXHJcbiAgICBNT1ZFX0xFRlQ6IDEsXHJcbiAgICAvKioqKirlkJHlj7Pnp7vliqgqL1xyXG4gICAgTU9WRV9SSUdIVDogMixcclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/layer/roleLayer.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8715d6tVP5MypVr8XqhnGHf', 'roleLayer');
// Script/layer/roleLayer.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    game.off("chubing", this.chubing, this);
  },
  onLoad: function onLoad() {
    this.zIndex = 0; //

    this.yList = [-10, -5, 0, 5, 10];
    game.on("chubing", this.chubing, this);
  },
  chubing: function chubing(prefabName, pos, data) {
    var pool = game.bingPool[prefabName];

    if (pool && pool.prefab) {
      this.zIndex++;
      this.zIndex = this.zIndex % this.yList.length;
      data.zy = this.yList[this.zIndex];
      var b = pool.getNode(data, this.node);
      b.x = pos.x;
      b.y = pos.y; //this.node.addChild(b);

      b.zIndex = this.zIndex;
    }
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxsYXllclxccm9sZUxheWVyLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25EZXN0cm95IiwiZ2FtZSIsIm9mZiIsImNodWJpbmciLCJvbkxvYWQiLCJ6SW5kZXgiLCJ5TGlzdCIsIm9uIiwicHJlZmFiTmFtZSIsInBvcyIsImRhdGEiLCJwb29sIiwiYmluZ1Bvb2wiLCJwcmVmYWIiLCJsZW5ndGgiLCJ6eSIsImIiLCJnZXROb2RlIiwibm9kZSIsIngiLCJ5Iiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR0xDLEVBQUFBLFNBSEssdUJBR087QUFDUkMsSUFBQUEsSUFBSSxDQUFDQyxHQUFMLENBQVMsU0FBVCxFQUFvQixLQUFLQyxPQUF6QixFQUFrQyxJQUFsQztBQUNILEdBTEk7QUFNTEMsRUFBQUEsTUFOSyxvQkFNSTtBQUNMLFNBQUtDLE1BQUwsR0FBYyxDQUFkLENBREssQ0FDVzs7QUFDaEIsU0FBS0MsS0FBTCxHQUFhLENBQUMsQ0FBQyxFQUFGLEVBQU0sQ0FBQyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsRUFBaEIsQ0FBYjtBQUNBTCxJQUFBQSxJQUFJLENBQUNNLEVBQUwsQ0FBUSxTQUFSLEVBQW1CLEtBQUtKLE9BQXhCLEVBQWlDLElBQWpDO0FBQ0gsR0FWSTtBQVdMQSxFQUFBQSxPQVhLLG1CQVdHSyxVQVhILEVBV2VDLEdBWGYsRUFXb0JDLElBWHBCLEVBVzBCO0FBQzNCLFFBQUlDLElBQUksR0FBR1YsSUFBSSxDQUFDVyxRQUFMLENBQWNKLFVBQWQsQ0FBWDs7QUFDQSxRQUFJRyxJQUFJLElBQUlBLElBQUksQ0FBQ0UsTUFBakIsRUFBeUI7QUFDckIsV0FBS1IsTUFBTDtBQUNBLFdBQUtBLE1BQUwsR0FBYyxLQUFLQSxNQUFMLEdBQWMsS0FBS0MsS0FBTCxDQUFXUSxNQUF2QztBQUNBSixNQUFBQSxJQUFJLENBQUNLLEVBQUwsR0FBVSxLQUFLVCxLQUFMLENBQVcsS0FBS0QsTUFBaEIsQ0FBVjtBQUNBLFVBQUlXLENBQUMsR0FBR0wsSUFBSSxDQUFDTSxPQUFMLENBQWFQLElBQWIsRUFBbUIsS0FBS1EsSUFBeEIsQ0FBUjtBQUNBRixNQUFBQSxDQUFDLENBQUNHLENBQUYsR0FBTVYsR0FBRyxDQUFDVSxDQUFWO0FBQ0FILE1BQUFBLENBQUMsQ0FBQ0ksQ0FBRixHQUFNWCxHQUFHLENBQUNXLENBQVYsQ0FOcUIsQ0FPckI7O0FBQ0FKLE1BQUFBLENBQUMsQ0FBQ1gsTUFBRixHQUFXLEtBQUtBLE1BQWhCO0FBQ0g7QUFDSixHQXZCSTtBQXdCTGdCLEVBQUFBLEtBeEJLLG1CQXdCRyxDQUNQLENBekJJLENBMEJMOztBQTFCSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICBnYW1lLm9mZihcImNodWJpbmdcIiwgdGhpcy5jaHViaW5nLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy56SW5kZXggPSAwOy8vXHJcbiAgICAgICAgdGhpcy55TGlzdCA9IFstMTAsIC01LCAwLCA1LCAxMF07XHJcbiAgICAgICAgZ2FtZS5vbihcImNodWJpbmdcIiwgdGhpcy5jaHViaW5nLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBjaHViaW5nKHByZWZhYk5hbWUsIHBvcywgZGF0YSkge1xyXG4gICAgICAgIGxldCBwb29sID0gZ2FtZS5iaW5nUG9vbFtwcmVmYWJOYW1lXTtcclxuICAgICAgICBpZiAocG9vbCAmJiBwb29sLnByZWZhYikge1xyXG4gICAgICAgICAgICB0aGlzLnpJbmRleCsrO1xyXG4gICAgICAgICAgICB0aGlzLnpJbmRleCA9IHRoaXMuekluZGV4ICUgdGhpcy55TGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGRhdGEuenkgPSB0aGlzLnlMaXN0W3RoaXMuekluZGV4XTtcclxuICAgICAgICAgICAgbGV0IGIgPSBwb29sLmdldE5vZGUoZGF0YSwgdGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgYi54ID0gcG9zLng7XHJcbiAgICAgICAgICAgIGIueSA9IHBvcy55O1xyXG4gICAgICAgICAgICAvL3RoaXMubm9kZS5hZGRDaGlsZChiKTtcclxuICAgICAgICAgICAgYi56SW5kZXggPSB0aGlzLnpJbmRleDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/pool/persisPool.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6b153YOncVB679HyrjGu8mU', 'persisPool');
// Script/pool/persisPool.js

"use strict";

var NodePool = require('NodePool');

cc.Class({
  "extends": cc.Component,
  properties: {
    bulletPool: {
      "default": [],
      type: NodePool
    },
    firePool: {
      "default": [],
      type: NodePool
    },
    bombPool: {
      "default": [],
      type: NodePool
    },
    bingPool: {
      "default": [],
      type: NodePool
    }
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    game.bulletPool = {};

    for (var i in this.bulletPool) {
      var pool = this.bulletPool[i];

      if (pool) {
        game.bulletPool[pool.prefab.name] = pool;
      }
    }

    game.firePool = {};

    for (var i in this.firePool) {
      var pool = this.firePool[i];

      if (pool) {
        game.firePool[pool.prefab.name] = pool;
      }
    }

    game.bombPool = {};

    for (var i in this.bombPool) {
      var pool = this.bombPool[i];

      if (pool) {
        game.bombPool[pool.prefab.name] = pool;
      }
    }

    game.bingPool = {};

    for (var i in this.bingPool) {
      var pool = this.bingPool[i];

      if (pool) {
        game.bingPool[pool.prefab.name] = pool;
      }
    }
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxwb29sXFxwZXJzaXNQb29sLmpzIl0sIm5hbWVzIjpbIk5vZGVQb29sIiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiYnVsbGV0UG9vbCIsInR5cGUiLCJmaXJlUG9vbCIsImJvbWJQb29sIiwiYmluZ1Bvb2wiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJnYW1lIiwiaSIsInBvb2wiLCJwcmVmYWIiLCJuYW1lIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF4Qjs7QUFDQUMsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLFVBQVUsRUFBRTtBQUNSLGlCQUFTLEVBREQ7QUFFUkMsTUFBQUEsSUFBSSxFQUFFUDtBQUZFLEtBREo7QUFLUlEsSUFBQUEsUUFBUSxFQUFFO0FBQ04saUJBQVMsRUFESDtBQUVORCxNQUFBQSxJQUFJLEVBQUVQO0FBRkEsS0FMRjtBQVNSUyxJQUFBQSxRQUFRLEVBQUU7QUFDTixpQkFBUyxFQURIO0FBRU5GLE1BQUFBLElBQUksRUFBRVA7QUFGQSxLQVRGO0FBYVJVLElBQUFBLFFBQVEsRUFBRTtBQUNOLGlCQUFTLEVBREg7QUFFTkgsTUFBQUEsSUFBSSxFQUFFUDtBQUZBO0FBYkYsR0FGUDtBQW9CTFcsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkk7QUFzQkxDLEVBQUFBLE1BdEJLLG9CQXNCSTtBQUNMQyxJQUFBQSxJQUFJLENBQUNQLFVBQUwsR0FBa0IsRUFBbEI7O0FBQ0EsU0FBSyxJQUFJUSxDQUFULElBQWMsS0FBS1IsVUFBbkIsRUFBK0I7QUFDM0IsVUFBSVMsSUFBSSxHQUFHLEtBQUtULFVBQUwsQ0FBZ0JRLENBQWhCLENBQVg7O0FBQ0EsVUFBSUMsSUFBSixFQUFVO0FBQ05GLFFBQUFBLElBQUksQ0FBQ1AsVUFBTCxDQUFnQlMsSUFBSSxDQUFDQyxNQUFMLENBQVlDLElBQTVCLElBQW9DRixJQUFwQztBQUNIO0FBQ0o7O0FBQ0RGLElBQUFBLElBQUksQ0FBQ0wsUUFBTCxHQUFnQixFQUFoQjs7QUFDQSxTQUFLLElBQUlNLENBQVQsSUFBYyxLQUFLTixRQUFuQixFQUE2QjtBQUN6QixVQUFJTyxJQUFJLEdBQUcsS0FBS1AsUUFBTCxDQUFjTSxDQUFkLENBQVg7O0FBQ0EsVUFBSUMsSUFBSixFQUFVO0FBQ05GLFFBQUFBLElBQUksQ0FBQ0wsUUFBTCxDQUFjTyxJQUFJLENBQUNDLE1BQUwsQ0FBWUMsSUFBMUIsSUFBa0NGLElBQWxDO0FBQ0g7QUFDSjs7QUFDREYsSUFBQUEsSUFBSSxDQUFDSixRQUFMLEdBQWdCLEVBQWhCOztBQUNBLFNBQUssSUFBSUssQ0FBVCxJQUFjLEtBQUtMLFFBQW5CLEVBQTZCO0FBQ3pCLFVBQUlNLElBQUksR0FBRyxLQUFLTixRQUFMLENBQWNLLENBQWQsQ0FBWDs7QUFDQSxVQUFJQyxJQUFKLEVBQVU7QUFDTkYsUUFBQUEsSUFBSSxDQUFDSixRQUFMLENBQWNNLElBQUksQ0FBQ0MsTUFBTCxDQUFZQyxJQUExQixJQUFrQ0YsSUFBbEM7QUFDSDtBQUNKOztBQUNERixJQUFBQSxJQUFJLENBQUNILFFBQUwsR0FBZ0IsRUFBaEI7O0FBQ0EsU0FBSyxJQUFJSSxDQUFULElBQWMsS0FBS0osUUFBbkIsRUFBNkI7QUFDekIsVUFBSUssSUFBSSxHQUFHLEtBQUtMLFFBQUwsQ0FBY0ksQ0FBZCxDQUFYOztBQUNBLFVBQUlDLElBQUosRUFBVTtBQUNORixRQUFBQSxJQUFJLENBQUNILFFBQUwsQ0FBY0ssSUFBSSxDQUFDQyxNQUFMLENBQVlDLElBQTFCLElBQWtDRixJQUFsQztBQUNIO0FBQ0o7QUFDSixHQW5ESTtBQW9ETEcsRUFBQUEsS0FwREssbUJBb0RHLENBQ1AsQ0FyREksQ0FzREw7O0FBdERLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5vZGVQb29sID0gcmVxdWlyZSgnTm9kZVBvb2wnKTtcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGJ1bGxldFBvb2w6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogW10sXHJcbiAgICAgICAgICAgIHR5cGU6IE5vZGVQb29sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaXJlUG9vbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBbXSxcclxuICAgICAgICAgICAgdHlwZTogTm9kZVBvb2xcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvbWJQb29sOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IFtdLFxyXG4gICAgICAgICAgICB0eXBlOiBOb2RlUG9vbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmluZ1Bvb2w6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogW10sXHJcbiAgICAgICAgICAgIHR5cGU6IE5vZGVQb29sXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGdhbWUuYnVsbGV0UG9vbCA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5idWxsZXRQb29sKSB7XHJcbiAgICAgICAgICAgIHZhciBwb29sID0gdGhpcy5idWxsZXRQb29sW2ldO1xyXG4gICAgICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZS5idWxsZXRQb29sW3Bvb2wucHJlZmFiLm5hbWVdID0gcG9vbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBnYW1lLmZpcmVQb29sID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmZpcmVQb29sKSB7XHJcbiAgICAgICAgICAgIHZhciBwb29sID0gdGhpcy5maXJlUG9vbFtpXTtcclxuICAgICAgICAgICAgaWYgKHBvb2wpIHtcclxuICAgICAgICAgICAgICAgIGdhbWUuZmlyZVBvb2xbcG9vbC5wcmVmYWIubmFtZV0gPSBwb29sO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWUuYm9tYlBvb2wgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuYm9tYlBvb2wpIHtcclxuICAgICAgICAgICAgdmFyIHBvb2wgPSB0aGlzLmJvbWJQb29sW2ldO1xyXG4gICAgICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZS5ib21iUG9vbFtwb29sLnByZWZhYi5uYW1lXSA9IHBvb2w7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ2FtZS5iaW5nUG9vbCA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5iaW5nUG9vbCkge1xyXG4gICAgICAgICAgICB2YXIgcG9vbCA9IHRoaXMuYmluZ1Bvb2xbaV07XHJcbiAgICAgICAgICAgIGlmIChwb29sKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lLmJpbmdQb29sW3Bvb2wucHJlZmFiLm5hbWVdID0gcG9vbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/pool/hpComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1e596R/ioBPXItESN8XUEIC', 'hpComponent');
// Script/pool/hpComponent.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  //受到的伤害
  onHurt: function onHurt(value) {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxwb29sXFxocENvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJQb29sQ29tcG9uZW50IiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwib25IdXJ0IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTDtBQUNBQyxFQUFBQSxNQUpLLGtCQUlFQyxLQUpGLEVBSVMsQ0FDYjtBQUxJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIik7IC8v5rGg5a2Q57uE5Lu2XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IFBvb2xDb21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIC8v5Y+X5Yiw55qE5Lyk5a6zXHJcbiAgICBvbkh1cnQodmFsdWUpIHtcclxuICAgIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game/gameScene.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b47a7q7LrNMk7TkU5za+/7x', 'gameScene');
// Script/game/gameScene.js

"use strict";

module.exports = {
  hall: "hall",
  gameGuanka: "gameGuanka",
  gameMain: "gameMain",
  mapEdit: "mapEdit",
  roleEdit: "roleEdit"
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lXFxnYW1lU2NlbmUuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhhbGwiLCJnYW1lR3VhbmthIiwiZ2FtZU1haW4iLCJtYXBFZGl0Iiwicm9sZUVkaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsTUFETztBQUViQyxFQUFBQSxVQUFVLEVBQUMsWUFGRTtBQUdiQyxFQUFBQSxRQUFRLEVBQUUsVUFIRztBQUliQyxFQUFBQSxPQUFPLEVBQUUsU0FKSTtBQUtiQyxFQUFBQSxRQUFRLEVBQUU7QUFMRyxDQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBoYWxsOiBcImhhbGxcIixcclxuICAgIGdhbWVHdWFua2E6XCJnYW1lR3VhbmthXCIsXHJcbiAgICBnYW1lTWFpbjogXCJnYW1lTWFpblwiLFxyXG4gICAgbWFwRWRpdDogXCJtYXBFZGl0XCIsXHJcbiAgICByb2xlRWRpdDogXCJyb2xlRWRpdFwiLFxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/layer/shootFire.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7172ddJtO9NhYeuNeOXY+mF', 'shootFire');
// Script/layer/shootFire.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    game.off("shootFire", this.shootFire, this); //开火动画
  },
  onLoad: function onLoad() {
    game.on("shootFire", this.shootFire, this); //开火动画
  },

  /*****
   * 开火动画
   * **/
  shootFire: function shootFire(data) {
    var pool = game.firePool["fire"];

    if (pool && pool.prefab) {
      pool.getNode(data, this.node); //this.node.addChild(b);
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxsYXllclxcc2hvb3RGaXJlLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25EZXN0cm95IiwiZ2FtZSIsIm9mZiIsInNob290RmlyZSIsIm9uTG9hZCIsIm9uIiwiZGF0YSIsInBvb2wiLCJmaXJlUG9vbCIsInByZWZhYiIsImdldE5vZGUiLCJub2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxTQUhLLHVCQUdPO0FBQ1JDLElBQUFBLElBQUksQ0FBQ0MsR0FBTCxDQUFTLFdBQVQsRUFBc0IsS0FBS0MsU0FBM0IsRUFBc0MsSUFBdEMsRUFEUSxDQUNvQztBQUMvQyxHQUxJO0FBTUxDLEVBQUFBLE1BTkssb0JBTUk7QUFDTEgsSUFBQUEsSUFBSSxDQUFDSSxFQUFMLENBQVEsV0FBUixFQUFxQixLQUFLRixTQUExQixFQUFxQyxJQUFyQyxFQURLLENBQ3NDO0FBQzlDLEdBUkk7O0FBU0w7QUFDSjtBQUNBO0FBQ0lBLEVBQUFBLFNBWksscUJBWUtHLElBWkwsRUFZVztBQUVaLFFBQUlDLElBQUksR0FBR04sSUFBSSxDQUFDTyxRQUFMLENBQWMsTUFBZCxDQUFYOztBQUNBLFFBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDRSxNQUFqQixFQUF5QjtBQUNyQkYsTUFBQUEsSUFBSSxDQUFDRyxPQUFMLENBQWFKLElBQWIsRUFBa0IsS0FBS0ssSUFBdkIsRUFEcUIsQ0FFckI7QUFDSDtBQUNKO0FBbkJJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIGdhbWUub2ZmKFwic2hvb3RGaXJlXCIsIHRoaXMuc2hvb3RGaXJlLCB0aGlzKTsvL+W8gOeBq+WKqOeUu1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBnYW1lLm9uKFwic2hvb3RGaXJlXCIsIHRoaXMuc2hvb3RGaXJlLCB0aGlzKTsvL+W8gOeBq+WKqOeUu1xyXG4gICAgfSxcclxuICAgIC8qKioqKlxyXG4gICAgICog5byA54Gr5Yqo55S7XHJcbiAgICAgKiAqKi9cclxuICAgIHNob290RmlyZShkYXRhKSB7XHJcblxyXG4gICAgICAgIGxldCBwb29sID0gZ2FtZS5maXJlUG9vbFtcImZpcmVcIl07XHJcbiAgICAgICAgaWYgKHBvb2wgJiYgcG9vbC5wcmVmYWIpIHtcclxuICAgICAgICAgICAgcG9vbC5nZXROb2RlKGRhdGEsdGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgLy90aGlzLm5vZGUuYWRkQ2hpbGQoYik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/guangka/guanItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'da537/LzyFMrbvYsOvGkxoy', 'guanItem');
// Script/guangka/guanItem.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    num: 101,
    stars: [cc.Sprite],
    label: cc.Label,
    gkIcon: cc.Sprite
  },
  onDestroy: function onDestroy() {
    this.addEvent(false);
  },
  onLoad: function onLoad() {
    this.zhang = parseInt(this.num / 100);
    this.guan = this.num % 100;
    this.label.string = this.guan.toString();
  },
  addEvent: function addEvent(flg) {
    if (this.flg == flg) return;
    this.flg = flg;

    if (flg) {
      this.node.on(cc.Node.EventType.TOUCH_END, this.onTouch, this);
    } else {
      this.node.off(cc.Node.EventType.TOUCH_END, this.onTouch, this);
    }
  },
  onTouch: function onTouch() {
    cc.log(1);
    game.guanKaInfo = "guan1_1";
    game.emit(game.gameEvent.load_scene, game.gameScene.gameMain);
  },
  setInfo: function setInfo(info) {
    info = info || {};
    info.level = info.level || 0; //0

    if (game.curNum == this.num) {
      this.gkIcon.spriteFrame = game.ui_atlas.getSpriteFrame("gk-guka0");
      this.addEvent(true);
    } else {
      if (info.state) {
        this.addEvent(true);
        this.gkIcon.spriteFrame = game.ui_atlas.getSpriteFrame("gk-guka1");
      } else {
        this.gkIcon.spriteFrame = game.ui_atlas.getSpriteFrame("gk-guka2");
      }
    }

    for (var i = 0; i < this.stars.length; i++) {
      var star = this.stars[i];

      if (info.state > i) {
        star.spriteFrame = game.ui_atlas.getSpriteFrame("gk-start1");
      } else {
        star.spriteFrame = game.ui_atlas.getSpriteFrame("gk-start0");
      }
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxndWFuZ2thXFxndWFuSXRlbS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm51bSIsInN0YXJzIiwiU3ByaXRlIiwibGFiZWwiLCJMYWJlbCIsImdrSWNvbiIsIm9uRGVzdHJveSIsImFkZEV2ZW50Iiwib25Mb2FkIiwiemhhbmciLCJwYXJzZUludCIsImd1YW4iLCJzdHJpbmciLCJ0b1N0cmluZyIsImZsZyIsIm5vZGUiLCJvbiIsIk5vZGUiLCJFdmVudFR5cGUiLCJUT1VDSF9FTkQiLCJvblRvdWNoIiwib2ZmIiwibG9nIiwiZ2FtZSIsImd1YW5LYUluZm8iLCJlbWl0IiwiZ2FtZUV2ZW50IiwibG9hZF9zY2VuZSIsImdhbWVTY2VuZSIsImdhbWVNYWluIiwic2V0SW5mbyIsImluZm8iLCJsZXZlbCIsImN1ck51bSIsInNwcml0ZUZyYW1lIiwidWlfYXRsYXMiLCJnZXRTcHJpdGVGcmFtZSIsInN0YXRlIiwiaSIsImxlbmd0aCIsInN0YXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxHQUFHLEVBQUUsR0FERztBQUVSQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQ0wsRUFBRSxDQUFDTSxNQUFKLENBRkM7QUFHUkMsSUFBQUEsS0FBSyxFQUFFUCxFQUFFLENBQUNRLEtBSEY7QUFJUkMsSUFBQUEsTUFBTSxFQUFFVCxFQUFFLENBQUNNO0FBSkgsR0FGUDtBQVFMSSxFQUFBQSxTQVJLLHVCQVFPO0FBQ1IsU0FBS0MsUUFBTCxDQUFjLEtBQWQ7QUFDSCxHQVZJO0FBV0xDLEVBQUFBLE1BWEssb0JBV0k7QUFDTCxTQUFLQyxLQUFMLEdBQWFDLFFBQVEsQ0FBQyxLQUFLVixHQUFMLEdBQVcsR0FBWixDQUFyQjtBQUNBLFNBQUtXLElBQUwsR0FBWSxLQUFLWCxHQUFMLEdBQVcsR0FBdkI7QUFDQSxTQUFLRyxLQUFMLENBQVdTLE1BQVgsR0FBb0IsS0FBS0QsSUFBTCxDQUFVRSxRQUFWLEVBQXBCO0FBQ0gsR0FmSTtBQWdCTE4sRUFBQUEsUUFoQkssb0JBZ0JJTyxHQWhCSixFQWdCUztBQUNWLFFBQUksS0FBS0EsR0FBTCxJQUFZQSxHQUFoQixFQUFxQjtBQUNyQixTQUFLQSxHQUFMLEdBQVdBLEdBQVg7O0FBQ0EsUUFBSUEsR0FBSixFQUFTO0FBQ0wsV0FBS0MsSUFBTCxDQUFVQyxFQUFWLENBQWFwQixFQUFFLENBQUNxQixJQUFILENBQVFDLFNBQVIsQ0FBa0JDLFNBQS9CLEVBQTBDLEtBQUtDLE9BQS9DLEVBQXdELElBQXhEO0FBQ0gsS0FGRCxNQUdLO0FBQ0QsV0FBS0wsSUFBTCxDQUFVTSxHQUFWLENBQWN6QixFQUFFLENBQUNxQixJQUFILENBQVFDLFNBQVIsQ0FBa0JDLFNBQWhDLEVBQTJDLEtBQUtDLE9BQWhELEVBQXlELElBQXpEO0FBQ0g7QUFDSixHQXpCSTtBQTBCTEEsRUFBQUEsT0ExQksscUJBMEJLO0FBQ054QixJQUFBQSxFQUFFLENBQUMwQixHQUFILENBQU8sQ0FBUDtBQUNBQyxJQUFBQSxJQUFJLENBQUNDLFVBQUwsR0FBa0IsU0FBbEI7QUFDQUQsSUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVVGLElBQUksQ0FBQ0csU0FBTCxDQUFlQyxVQUF6QixFQUFxQ0osSUFBSSxDQUFDSyxTQUFMLENBQWVDLFFBQXBEO0FBQ0gsR0E5Qkk7QUErQkxDLEVBQUFBLE9BL0JLLG1CQStCR0MsSUEvQkgsRUErQlM7QUFDVkEsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLElBQUksRUFBZjtBQUNBQSxJQUFBQSxJQUFJLENBQUNDLEtBQUwsR0FBYUQsSUFBSSxDQUFDQyxLQUFMLElBQWMsQ0FBM0IsQ0FGVSxDQUVvQjs7QUFDOUIsUUFBSVQsSUFBSSxDQUFDVSxNQUFMLElBQWUsS0FBS2pDLEdBQXhCLEVBQTZCO0FBQ3pCLFdBQUtLLE1BQUwsQ0FBWTZCLFdBQVosR0FBMEJYLElBQUksQ0FBQ1ksUUFBTCxDQUFjQyxjQUFkLENBQTZCLFVBQTdCLENBQTFCO0FBQ0EsV0FBSzdCLFFBQUwsQ0FBYyxJQUFkO0FBQ0gsS0FIRCxNQUlLO0FBQ0QsVUFBSXdCLElBQUksQ0FBQ00sS0FBVCxFQUFnQjtBQUNaLGFBQUs5QixRQUFMLENBQWMsSUFBZDtBQUNBLGFBQUtGLE1BQUwsQ0FBWTZCLFdBQVosR0FBMEJYLElBQUksQ0FBQ1ksUUFBTCxDQUFjQyxjQUFkLENBQTZCLFVBQTdCLENBQTFCO0FBQ0gsT0FIRCxNQUlLO0FBQ0QsYUFBSy9CLE1BQUwsQ0FBWTZCLFdBQVosR0FBMEJYLElBQUksQ0FBQ1ksUUFBTCxDQUFjQyxjQUFkLENBQTZCLFVBQTdCLENBQTFCO0FBQ0g7QUFDSjs7QUFDRCxTQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS3JDLEtBQUwsQ0FBV3NDLE1BQS9CLEVBQXVDRCxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFVBQUlFLElBQUksR0FBRyxLQUFLdkMsS0FBTCxDQUFXcUMsQ0FBWCxDQUFYOztBQUNBLFVBQUlQLElBQUksQ0FBQ00sS0FBTCxHQUFhQyxDQUFqQixFQUFvQjtBQUNoQkUsUUFBQUEsSUFBSSxDQUFDTixXQUFMLEdBQW1CWCxJQUFJLENBQUNZLFFBQUwsQ0FBY0MsY0FBZCxDQUE2QixXQUE3QixDQUFuQjtBQUNILE9BRkQsTUFHSztBQUNESSxRQUFBQSxJQUFJLENBQUNOLFdBQUwsR0FBbUJYLElBQUksQ0FBQ1ksUUFBTCxDQUFjQyxjQUFkLENBQTZCLFdBQTdCLENBQW5CO0FBQ0g7QUFDSjtBQUNKO0FBeERJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBudW06IDEwMSxcclxuICAgICAgICBzdGFyczogW2NjLlNwcml0ZV0sXHJcbiAgICAgICAgbGFiZWw6IGNjLkxhYmVsLFxyXG4gICAgICAgIGdrSWNvbjogY2MuU3ByaXRlXHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnQoZmFsc2UpXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMuemhhbmcgPSBwYXJzZUludCh0aGlzLm51bSAvIDEwMCk7XHJcbiAgICAgICAgdGhpcy5ndWFuID0gdGhpcy5udW0gJSAxMDA7XHJcbiAgICAgICAgdGhpcy5sYWJlbC5zdHJpbmcgPSB0aGlzLmd1YW4udG9TdHJpbmcoKTtcclxuICAgIH0sXHJcbiAgICBhZGRFdmVudChmbGcpIHtcclxuICAgICAgICBpZiAodGhpcy5mbGcgPT0gZmxnKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5mbGcgPSBmbGc7XHJcbiAgICAgICAgaWYgKGZsZykge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2gsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uVG91Y2goKSB7XHJcbiAgICAgICAgY2MubG9nKDEpO1xyXG4gICAgICAgIGdhbWUuZ3VhbkthSW5mbyA9IFwiZ3VhbjFfMVwiO1xyXG4gICAgICAgIGdhbWUuZW1pdChnYW1lLmdhbWVFdmVudC5sb2FkX3NjZW5lLCBnYW1lLmdhbWVTY2VuZS5nYW1lTWFpbilcclxuICAgIH0sXHJcbiAgICBzZXRJbmZvKGluZm8pIHtcclxuICAgICAgICBpbmZvID0gaW5mbyB8fCB7fTtcclxuICAgICAgICBpbmZvLmxldmVsID0gaW5mby5sZXZlbCB8fCAwOyAvLzBcclxuICAgICAgICBpZiAoZ2FtZS5jdXJOdW0gPT0gdGhpcy5udW0pIHtcclxuICAgICAgICAgICAgdGhpcy5na0ljb24uc3ByaXRlRnJhbWUgPSBnYW1lLnVpX2F0bGFzLmdldFNwcml0ZUZyYW1lKFwiZ2stZ3VrYTBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5mby5zdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2tJY29uLnNwcml0ZUZyYW1lID0gZ2FtZS51aV9hdGxhcy5nZXRTcHJpdGVGcmFtZShcImdrLWd1a2ExXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5na0ljb24uc3ByaXRlRnJhbWUgPSBnYW1lLnVpX2F0bGFzLmdldFNwcml0ZUZyYW1lKFwiZ2stZ3VrYTJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFyID0gdGhpcy5zdGFyc1tpXTtcclxuICAgICAgICAgICAgaWYgKGluZm8uc3RhdGUgPiBpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFyLnNwcml0ZUZyYW1lID0gZ2FtZS51aV9hdGxhcy5nZXRTcHJpdGVGcmFtZShcImdrLXN0YXJ0MVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXIuc3ByaXRlRnJhbWUgPSBnYW1lLnVpX2F0bGFzLmdldFNwcml0ZUZyYW1lKFwiZ2stc3RhcnQwXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/pool/NodePool.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd16ceST37dE3YeHbTYWlJHF', 'NodePool');
// Script/pool/NodePool.js

"use strict";

module.exports = cc.Class({
  name: 'NodePool',
  properties: {
    prefab: cc.Prefab
  },
  ctor: function ctor() {
    this.nodePool = new cc.NodePool();
  },
  //获取一个节点
  getNode: function getNode(data, parent) {
    var node = null;

    if (this.nodePool.size() > 0) {
      // 通过 size 接口判断对象池中是否有空闲的对象
      node = this.nodePool.get();
    } else {
      // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建
      node = cc.instantiate(this.prefab);
      node.pool = this;
    }

    if (parent) parent.addChild(node);
    var poolComponents = node.getComponentsInChildren("PoolComponent");

    for (var i in poolComponents) {
      var poolComponent = poolComponents[i];
      poolComponent.reuse(data); //启用
    }

    return node;
  },
  put: function put(node) {
    node.removeFromParent();
    this.nodePool.put(node); // 通过之前传入的管理类实例回收子弹

    var poolComponents = node.getComponentsInChildren("PoolComponent");

    for (var i in poolComponents) {
      var poolComponent = poolComponents[i];
      poolComponent.unuse(); //启用
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxwb29sXFxOb2RlUG9vbC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwicHJlZmFiIiwiUHJlZmFiIiwiY3RvciIsIm5vZGVQb29sIiwiTm9kZVBvb2wiLCJnZXROb2RlIiwiZGF0YSIsInBhcmVudCIsIm5vZGUiLCJzaXplIiwiZ2V0IiwiaW5zdGFudGlhdGUiLCJwb29sIiwiYWRkQ2hpbGQiLCJwb29sQ29tcG9uZW50cyIsImdldENvbXBvbmVudHNJbkNoaWxkcmVuIiwiaSIsInBvb2xDb21wb25lbnQiLCJyZXVzZSIsInB1dCIsInJlbW92ZUZyb21QYXJlbnQiLCJ1bnVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUN0QkMsRUFBQUEsSUFBSSxFQUFFLFVBRGdCO0FBRXRCQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsTUFBTSxFQUFFSixFQUFFLENBQUNLO0FBREgsR0FGVTtBQUt0QkMsRUFBQUEsSUFMc0Isa0JBS2Y7QUFDSCxTQUFLQyxRQUFMLEdBQWdCLElBQUlQLEVBQUUsQ0FBQ1EsUUFBUCxFQUFoQjtBQUNILEdBUHFCO0FBUXRCO0FBQ0FDLEVBQUFBLE9BQU8sRUFBRSxpQkFBVUMsSUFBVixFQUFnQkMsTUFBaEIsRUFBd0I7QUFDN0IsUUFBSUMsSUFBSSxHQUFHLElBQVg7O0FBQ0EsUUFBSSxLQUFLTCxRQUFMLENBQWNNLElBQWQsS0FBdUIsQ0FBM0IsRUFBOEI7QUFBRTtBQUM1QkQsTUFBQUEsSUFBSSxHQUFHLEtBQUtMLFFBQUwsQ0FBY08sR0FBZCxFQUFQO0FBQ0gsS0FGRCxNQUVPO0FBQUU7QUFDTEYsTUFBQUEsSUFBSSxHQUFHWixFQUFFLENBQUNlLFdBQUgsQ0FBZSxLQUFLWCxNQUFwQixDQUFQO0FBQ0FRLE1BQUFBLElBQUksQ0FBQ0ksSUFBTCxHQUFZLElBQVo7QUFDSDs7QUFDRCxRQUFJTCxNQUFKLEVBQVlBLE1BQU0sQ0FBQ00sUUFBUCxDQUFnQkwsSUFBaEI7QUFDWixRQUFJTSxjQUFjLEdBQUdOLElBQUksQ0FBQ08sdUJBQUwsQ0FBNkIsZUFBN0IsQ0FBckI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFULElBQWNGLGNBQWQsRUFBOEI7QUFDMUIsVUFBSUcsYUFBYSxHQUFHSCxjQUFjLENBQUNFLENBQUQsQ0FBbEM7QUFDQUMsTUFBQUEsYUFBYSxDQUFDQyxLQUFkLENBQW9CWixJQUFwQixFQUYwQixDQUVDO0FBQzlCOztBQUNELFdBQU9FLElBQVA7QUFDSCxHQXhCcUI7QUF5QnRCVyxFQUFBQSxHQUFHLEVBQUUsYUFBVVgsSUFBVixFQUFnQjtBQUNqQkEsSUFBQUEsSUFBSSxDQUFDWSxnQkFBTDtBQUNBLFNBQUtqQixRQUFMLENBQWNnQixHQUFkLENBQWtCWCxJQUFsQixFQUZpQixDQUVROztBQUN6QixRQUFJTSxjQUFjLEdBQUdOLElBQUksQ0FBQ08sdUJBQUwsQ0FBNkIsZUFBN0IsQ0FBckI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFULElBQWNGLGNBQWQsRUFBOEI7QUFDMUIsVUFBSUcsYUFBYSxHQUFHSCxjQUFjLENBQUNFLENBQUQsQ0FBbEM7QUFDQUMsTUFBQUEsYUFBYSxDQUFDSSxLQUFkLEdBRjBCLENBRUg7QUFDMUI7QUFDSjtBQWpDcUIsQ0FBVCxDQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjYy5DbGFzcyh7XHJcbiAgICBuYW1lOiAnTm9kZVBvb2wnLFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHByZWZhYjogY2MuUHJlZmFiXHJcbiAgICB9LFxyXG4gICAgY3RvcigpIHtcclxuICAgICAgICB0aGlzLm5vZGVQb29sID0gbmV3IGNjLk5vZGVQb29sKCk7XHJcbiAgICB9LFxyXG4gICAgLy/ojrflj5bkuIDkuKroioLngrlcclxuICAgIGdldE5vZGU6IGZ1bmN0aW9uIChkYXRhLCBwYXJlbnQpIHtcclxuICAgICAgICBsZXQgbm9kZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZVBvb2wuc2l6ZSgpID4gMCkgeyAvLyDpgJrov4cgc2l6ZSDmjqXlj6PliKTmlq3lr7nosaHmsaDkuK3mmK/lkKbmnInnqbrpl7LnmoTlr7nosaFcclxuICAgICAgICAgICAgbm9kZSA9IHRoaXMubm9kZVBvb2wuZ2V0KCk7XHJcbiAgICAgICAgfSBlbHNlIHsgLy8g5aaC5p6c5rKh5pyJ56m66Zey5a+56LGh77yM5Lmf5bCx5piv5a+56LGh5rGg5Lit5aSH55So5a+56LGh5LiN5aSf5pe277yM5oiR5Lus5bCx55SoIGNjLmluc3RhbnRpYXRlIOmHjeaWsOWIm+W7ulxyXG4gICAgICAgICAgICBub2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy5wcmVmYWIpO1xyXG4gICAgICAgICAgICBub2RlLnBvb2wgPSB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFyZW50KSBwYXJlbnQuYWRkQ2hpbGQobm9kZSk7XHJcbiAgICAgICAgbGV0IHBvb2xDb21wb25lbnRzID0gbm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihcIlBvb2xDb21wb25lbnRcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBwb29sQ29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBsZXQgcG9vbENvbXBvbmVudCA9IHBvb2xDb21wb25lbnRzW2ldO1xyXG4gICAgICAgICAgICBwb29sQ29tcG9uZW50LnJldXNlKGRhdGEpOyAvL+WQr+eUqFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH0sXHJcbiAgICBwdXQ6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgbm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XHJcbiAgICAgICAgdGhpcy5ub2RlUG9vbC5wdXQobm9kZSk7IC8vIOmAmui/h+S5i+WJjeS8oOWFpeeahOeuoeeQhuexu+WunuS+i+WbnuaUtuWtkOW8uVxyXG4gICAgICAgIGxldCBwb29sQ29tcG9uZW50cyA9IG5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oXCJQb29sQ29tcG9uZW50XCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gcG9vbENvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgbGV0IHBvb2xDb21wb25lbnQgPSBwb29sQ29tcG9uZW50c1tpXTtcclxuICAgICAgICAgICAgcG9vbENvbXBvbmVudC51bnVzZSgpOyAvL+WQr+eUqFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/hall.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '69945lhXk9LGqmOhtuNdoDG', 'hall');
// Script/scene/hall.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onEnterGame: function onEnterGame(event, value) {
    value = parseInt(value);

    switch (value) {
      case 1:
        game.isOver = false;
        game.emit(game.gameEvent.load_scene, game.gameScene.gameGuanka);
        break;

      case 2:
        game.emit(game.gameEvent.load_scene, game.gameScene.mapEdit);
        break;

      case 3:
        game.emit(game.gameEvent.load_scene, game.gameScene.roleEdit);
        break;

      default:
        break;
    }
  },
  onLoad: function onLoad() {
    //game.soundManager.musicMute = true;
    game.soundManager.playMusic(game.gameSound.op, true);
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxzY2VuZVxcaGFsbC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm9uRW50ZXJHYW1lIiwiZXZlbnQiLCJ2YWx1ZSIsInBhcnNlSW50IiwiZ2FtZSIsImlzT3ZlciIsImVtaXQiLCJnYW1lRXZlbnQiLCJsb2FkX3NjZW5lIiwiZ2FtZVNjZW5lIiwiZ2FtZUd1YW5rYSIsIm1hcEVkaXQiLCJyb2xlRWRpdCIsIm9uTG9hZCIsInNvdW5kTWFuYWdlciIsInBsYXlNdXNpYyIsImdhbWVTb3VuZCIsIm9wIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR0xDLEVBQUFBLFdBSEssdUJBR09DLEtBSFAsRUFHY0MsS0FIZCxFQUdxQjtBQUN0QkEsSUFBQUEsS0FBSyxHQUFHQyxRQUFRLENBQUNELEtBQUQsQ0FBaEI7O0FBQ0EsWUFBUUEsS0FBUjtBQUNJLFdBQUssQ0FBTDtBQUNJRSxRQUFBQSxJQUFJLENBQUNDLE1BQUwsR0FBYyxLQUFkO0FBQ0FELFFBQUFBLElBQUksQ0FBQ0UsSUFBTCxDQUFVRixJQUFJLENBQUNHLFNBQUwsQ0FBZUMsVUFBekIsRUFBcUNKLElBQUksQ0FBQ0ssU0FBTCxDQUFlQyxVQUFwRDtBQUNBOztBQUNKLFdBQUssQ0FBTDtBQUNJTixRQUFBQSxJQUFJLENBQUNFLElBQUwsQ0FBVUYsSUFBSSxDQUFDRyxTQUFMLENBQWVDLFVBQXpCLEVBQXFDSixJQUFJLENBQUNLLFNBQUwsQ0FBZUUsT0FBcEQ7QUFDQTs7QUFDSixXQUFLLENBQUw7QUFDSVAsUUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVVGLElBQUksQ0FBQ0csU0FBTCxDQUFlQyxVQUF6QixFQUFxQ0osSUFBSSxDQUFDSyxTQUFMLENBQWVHLFFBQXBEO0FBQ0E7O0FBQ0o7QUFDSTtBQVpSO0FBY0gsR0FuQkk7QUFvQkxDLEVBQUFBLE1BcEJLLG9CQW9CSTtBQUNMO0FBQ0FULElBQUFBLElBQUksQ0FBQ1UsWUFBTCxDQUFrQkMsU0FBbEIsQ0FBNEJYLElBQUksQ0FBQ1ksU0FBTCxDQUFlQyxFQUEzQyxFQUErQyxJQUEvQztBQUVILEdBeEJJO0FBeUJMQyxFQUFBQSxLQXpCSyxtQkF5QkcsQ0FDUCxDQTFCSTtBQTJCTEMsRUFBQUEsU0EzQkssdUJBMkJPLENBQ1gsQ0E1QkksQ0E2Qkw7O0FBN0JLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25FbnRlckdhbWUoZXZlbnQsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSlcclxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGdhbWUuaXNPdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lLmVtaXQoZ2FtZS5nYW1lRXZlbnQubG9hZF9zY2VuZSwgZ2FtZS5nYW1lU2NlbmUuZ2FtZUd1YW5rYSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmxvYWRfc2NlbmUsIGdhbWUuZ2FtZVNjZW5lLm1hcEVkaXQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGdhbWUuZW1pdChnYW1lLmdhbWVFdmVudC5sb2FkX3NjZW5lLCBnYW1lLmdhbWVTY2VuZS5yb2xlRWRpdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgLy9nYW1lLnNvdW5kTWFuYWdlci5tdXNpY011dGUgPSB0cnVlO1xyXG4gICAgICAgIGdhbWUuc291bmRNYW5hZ2VyLnBsYXlNdXNpYyhnYW1lLmdhbWVTb3VuZC5vcCwgdHJ1ZSk7XHJcblxyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgIH0sXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/mapEdit.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd4bd4llXEhEb4dwq1+ayqtz', 'mapEdit');
// Script/scene/mapEdit.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  oBack: function oBack(event, value) {
    game.emit(game.gameEvent.load_scene, game.gameScene.hall);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxzY2VuZVxcbWFwRWRpdC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsInN0YXJ0Iiwib0JhY2siLCJldmVudCIsInZhbHVlIiwiZ2FtZSIsImVtaXQiLCJnYW1lRXZlbnQiLCJsb2FkX3NjZW5lIiwiZ2FtZVNjZW5lIiwiaGFsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZlEsR0FGUDtBQW1CTDtBQUNBO0FBQ0FDLEVBQUFBLEtBckJLLG1CQXFCRyxDQUNQLENBdEJJO0FBdUJMQyxFQUFBQSxLQXZCSyxpQkF1QkNDLEtBdkJELEVBdUJRQyxLQXZCUixFQXVCZTtBQUdoQkMsSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVVELElBQUksQ0FBQ0UsU0FBTCxDQUFlQyxVQUF6QixFQUFxQ0gsSUFBSSxDQUFDSSxTQUFMLENBQWVDLElBQXBEO0FBQ0gsR0EzQkksQ0E0Qkw7O0FBNUJLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcclxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBiYXI6IHtcclxuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XHJcbiAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgIH0sXHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuICAgIC8vIG9uTG9hZCAoKSB7fSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIG9CYWNrKGV2ZW50LCB2YWx1ZSkge1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBnYW1lLmVtaXQoZ2FtZS5nYW1lRXZlbnQubG9hZF9zY2VuZSwgZ2FtZS5nYW1lU2NlbmUuaGFsbCk7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/login.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '113afyh7FVBEZ7WptwQ+j6t', 'login');
// Script/scene/login.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    window.jm = require("jm");
    window.game = jm.eventEmitter();
    window._ = require("lodash");
    window.async = require("async");

    require("utils"); //game.gameConfig = require("gameConfig"); //公共函数


    game.gameSound = require("gameSound"); //公共函数

    game.gamePopup = require("gamePopup"); //公共函数

    game.zhujueConfig = require("zhujueConfig"); //公共函数\

    game.gameAction = require("gameAction"); //公共函数

    game.gameControl = require("gameControl"); //公共函数

    game.gameEvent = require("gameEvent"); //公共函数

    game.gameScene = require("gameScene"); //公共函数

    game.gameUtils = require("gameUtils"); //公共函数

    game.localStorage = require("localStorage"); //公共函数

    game.soundManager = require("soundManager"); //公共函数

    game.point1 = cc.v2(0, 0);
    game.point2 = cc.v2(-100, 0);
    game.soundManager.init();
    cc.tween(this.node).then(cc.delayTime(0.1)).call(function () {
      game.emit(game.gameEvent.load_scene, game.gameScene.hall);
    }).start();
  },
  start: function start() {} // update (dt) {},i

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxzY2VuZVxcbG9naW4uanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJ3aW5kb3ciLCJqbSIsInJlcXVpcmUiLCJnYW1lIiwiZXZlbnRFbWl0dGVyIiwiXyIsImFzeW5jIiwiZ2FtZVNvdW5kIiwiZ2FtZVBvcHVwIiwiemh1anVlQ29uZmlnIiwiZ2FtZUFjdGlvbiIsImdhbWVDb250cm9sIiwiZ2FtZUV2ZW50IiwiZ2FtZVNjZW5lIiwiZ2FtZVV0aWxzIiwibG9jYWxTdG9yYWdlIiwic291bmRNYW5hZ2VyIiwicG9pbnQxIiwidjIiLCJwb2ludDIiLCJpbml0IiwidHdlZW4iLCJub2RlIiwidGhlbiIsImRlbGF5VGltZSIsImNhbGwiLCJlbWl0IiwibG9hZF9zY2VuZSIsImhhbGwiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsU0FISyx1QkFHTyxDQUNYLENBSkk7QUFLTEMsRUFBQUEsTUFMSyxvQkFLSTtBQUNMQyxJQUFBQSxNQUFNLENBQUNDLEVBQVAsR0FBWUMsT0FBTyxDQUFDLElBQUQsQ0FBbkI7QUFDQUYsSUFBQUEsTUFBTSxDQUFDRyxJQUFQLEdBQWNGLEVBQUUsQ0FBQ0csWUFBSCxFQUFkO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ssQ0FBUCxHQUFXSCxPQUFPLENBQUMsUUFBRCxDQUFsQjtBQUNBRixJQUFBQSxNQUFNLENBQUNNLEtBQVAsR0FBZUosT0FBTyxDQUFDLE9BQUQsQ0FBdEI7O0FBQ0FBLElBQUFBLE9BQU8sQ0FBQyxPQUFELENBQVAsQ0FMSyxDQU1MOzs7QUFDQUMsSUFBQUEsSUFBSSxDQUFDSSxTQUFMLEdBQWlCTCxPQUFPLENBQUMsV0FBRCxDQUF4QixDQVBLLENBT2tDOztBQUN2Q0MsSUFBQUEsSUFBSSxDQUFDSyxTQUFMLEdBQWlCTixPQUFPLENBQUMsV0FBRCxDQUF4QixDQVJLLENBUWtDOztBQUN2Q0MsSUFBQUEsSUFBSSxDQUFDTSxZQUFMLEdBQW9CUCxPQUFPLENBQUMsY0FBRCxDQUEzQixDQVRLLENBU3dDOztBQUM3Q0MsSUFBQUEsSUFBSSxDQUFDTyxVQUFMLEdBQWtCUixPQUFPLENBQUMsWUFBRCxDQUF6QixDQVZLLENBVW9DOztBQUN6Q0MsSUFBQUEsSUFBSSxDQUFDUSxXQUFMLEdBQW1CVCxPQUFPLENBQUMsYUFBRCxDQUExQixDQVhLLENBV3NDOztBQUMzQ0MsSUFBQUEsSUFBSSxDQUFDUyxTQUFMLEdBQWlCVixPQUFPLENBQUMsV0FBRCxDQUF4QixDQVpLLENBWWtDOztBQUN2Q0MsSUFBQUEsSUFBSSxDQUFDVSxTQUFMLEdBQWlCWCxPQUFPLENBQUMsV0FBRCxDQUF4QixDQWJLLENBYWtDOztBQUN2Q0MsSUFBQUEsSUFBSSxDQUFDVyxTQUFMLEdBQWlCWixPQUFPLENBQUMsV0FBRCxDQUF4QixDQWRLLENBY2tDOztBQUN2Q0MsSUFBQUEsSUFBSSxDQUFDWSxZQUFMLEdBQW9CYixPQUFPLENBQUMsY0FBRCxDQUEzQixDQWZLLENBZXdDOztBQUM3Q0MsSUFBQUEsSUFBSSxDQUFDYSxZQUFMLEdBQW9CZCxPQUFPLENBQUMsY0FBRCxDQUEzQixDQWhCSyxDQWdCd0M7O0FBQzdDQyxJQUFBQSxJQUFJLENBQUNjLE1BQUwsR0FBWXZCLEVBQUUsQ0FBQ3dCLEVBQUgsQ0FBTSxDQUFOLEVBQVEsQ0FBUixDQUFaO0FBQ0FmLElBQUFBLElBQUksQ0FBQ2dCLE1BQUwsR0FBWXpCLEVBQUUsQ0FBQ3dCLEVBQUgsQ0FBTSxDQUFDLEdBQVAsRUFBVyxDQUFYLENBQVo7QUFDQWYsSUFBQUEsSUFBSSxDQUFDYSxZQUFMLENBQWtCSSxJQUFsQjtBQUNBMUIsSUFBQUEsRUFBRSxDQUFDMkIsS0FBSCxDQUFTLEtBQUtDLElBQWQsRUFBb0JDLElBQXBCLENBQXlCN0IsRUFBRSxDQUFDOEIsU0FBSCxDQUFhLEdBQWIsQ0FBekIsRUFBNENDLElBQTVDLENBQWlELFlBQVk7QUFDekR0QixNQUFBQSxJQUFJLENBQUN1QixJQUFMLENBQVV2QixJQUFJLENBQUNTLFNBQUwsQ0FBZWUsVUFBekIsRUFBcUN4QixJQUFJLENBQUNVLFNBQUwsQ0FBZWUsSUFBcEQ7QUFDSCxLQUZELEVBRUdDLEtBRkg7QUFHSCxHQTVCSTtBQTZCTEEsRUFBQUEsS0E3QkssbUJBNkJHLENBQ1AsQ0E5QkksQ0ErQkw7O0FBL0JLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB3aW5kb3cuam0gPSByZXF1aXJlKFwiam1cIik7XHJcbiAgICAgICAgd2luZG93LmdhbWUgPSBqbS5ldmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB3aW5kb3cuXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcbiAgICAgICAgd2luZG93LmFzeW5jID0gcmVxdWlyZShcImFzeW5jXCIpO1xyXG4gICAgICAgIHJlcXVpcmUoXCJ1dGlsc1wiKTtcclxuICAgICAgICAvL2dhbWUuZ2FtZUNvbmZpZyA9IHJlcXVpcmUoXCJnYW1lQ29uZmlnXCIpOyAvL+WFrOWFseWHveaVsFxyXG4gICAgICAgIGdhbWUuZ2FtZVNvdW5kID0gcmVxdWlyZShcImdhbWVTb3VuZFwiKTsgLy/lhazlhbHlh73mlbBcclxuICAgICAgICBnYW1lLmdhbWVQb3B1cCA9IHJlcXVpcmUoXCJnYW1lUG9wdXBcIik7IC8v5YWs5YWx5Ye95pWwXHJcbiAgICAgICAgZ2FtZS56aHVqdWVDb25maWcgPSByZXF1aXJlKFwiemh1anVlQ29uZmlnXCIpOyAvL+WFrOWFseWHveaVsFxcXHJcbiAgICAgICAgZ2FtZS5nYW1lQWN0aW9uID0gcmVxdWlyZShcImdhbWVBY3Rpb25cIik7IC8v5YWs5YWx5Ye95pWwXHJcbiAgICAgICAgZ2FtZS5nYW1lQ29udHJvbCA9IHJlcXVpcmUoXCJnYW1lQ29udHJvbFwiKTsgLy/lhazlhbHlh73mlbBcclxuICAgICAgICBnYW1lLmdhbWVFdmVudCA9IHJlcXVpcmUoXCJnYW1lRXZlbnRcIik7IC8v5YWs5YWx5Ye95pWwXHJcbiAgICAgICAgZ2FtZS5nYW1lU2NlbmUgPSByZXF1aXJlKFwiZ2FtZVNjZW5lXCIpOyAvL+WFrOWFseWHveaVsFxyXG4gICAgICAgIGdhbWUuZ2FtZVV0aWxzID0gcmVxdWlyZShcImdhbWVVdGlsc1wiKTsgLy/lhazlhbHlh73mlbBcclxuICAgICAgICBnYW1lLmxvY2FsU3RvcmFnZSA9IHJlcXVpcmUoXCJsb2NhbFN0b3JhZ2VcIik7IC8v5YWs5YWx5Ye95pWwXHJcbiAgICAgICAgZ2FtZS5zb3VuZE1hbmFnZXIgPSByZXF1aXJlKFwic291bmRNYW5hZ2VyXCIpOyAvL+WFrOWFseWHveaVsFxyXG4gICAgICAgIGdhbWUucG9pbnQxPWNjLnYyKDAsMCk7XHJcbiAgICAgICAgZ2FtZS5wb2ludDI9Y2MudjIoLTEwMCwwKTtcclxuICAgICAgICBnYW1lLnNvdW5kTWFuYWdlci5pbml0KCk7XHJcbiAgICAgICAgY2MudHdlZW4odGhpcy5ub2RlKS50aGVuKGNjLmRlbGF5VGltZSgwLjEpKS5jYWxsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmxvYWRfc2NlbmUsIGdhbWUuZ2FtZVNjZW5lLmhhbGwpO1xyXG4gICAgICAgIH0pLnN0YXJ0KCk7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30saVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/gameOver.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '21393ebELhIl4cV4D6PscYC', 'gameOver');
// Script/scene/gameOver.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    this.node.off("death", this.death, this);
  },
  addEvent: function addEvent() {
    this.node.on("death", this.death, this);
  },
  death: function death() {
    if (this.isDeath) return;
    game.isOver = true;
    this.node.isDeath = this.isDeath = true;
    var win = true;

    if (this.node.group == "myrole") {
      win = false;
    }

    game.emit("gameOver");
    var physicsManager = cc.director.getPhysicsManager();
    physicsManager.enabled = false;
    cc.director.getCollisionManager().enabled = false;

    if (win) {
      game.emit(game.gameEvent.popup_prefab, game.gamePopup.gameOver_win, {
        test: parseInt(Math.random() * 1000),
        win: win
      });
      game.soundManager.playMusic(game.gameSound.bgm_win, false); //停止播放音乐
    } else {
      game.emit(game.gameEvent.popup_prefab, game.gamePopup.gameOver_loss, {
        test: parseInt(Math.random() * 1000),
        win: win
      });
      game.soundManager.playMusic(game.gameSound.bgm_lose, false); //停止播放音乐
    }
  },
  onLoad: function onLoad() {
    this.isDeath = false;
    this.addEvent();
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxzY2VuZVxcZ2FtZU92ZXIuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJub2RlIiwib2ZmIiwiZGVhdGgiLCJhZGRFdmVudCIsIm9uIiwiaXNEZWF0aCIsImdhbWUiLCJpc092ZXIiLCJ3aW4iLCJncm91cCIsImVtaXQiLCJwaHlzaWNzTWFuYWdlciIsImRpcmVjdG9yIiwiZ2V0UGh5c2ljc01hbmFnZXIiLCJlbmFibGVkIiwiZ2V0Q29sbGlzaW9uTWFuYWdlciIsImdhbWVFdmVudCIsInBvcHVwX3ByZWZhYiIsImdhbWVQb3B1cCIsImdhbWVPdmVyX3dpbiIsInRlc3QiLCJwYXJzZUludCIsIk1hdGgiLCJyYW5kb20iLCJzb3VuZE1hbmFnZXIiLCJwbGF5TXVzaWMiLCJnYW1lU291bmQiLCJiZ21fd2luIiwiZ2FtZU92ZXJfbG9zcyIsImJnbV9sb3NlIiwib25Mb2FkIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR0xDLEVBQUFBLFNBSEssdUJBR087QUFDUixTQUFLQyxJQUFMLENBQVVDLEdBQVYsQ0FBYyxPQUFkLEVBQXVCLEtBQUtDLEtBQTVCLEVBQW1DLElBQW5DO0FBQ0gsR0FMSTtBQU1MQyxFQUFBQSxRQU5LLHNCQU1NO0FBQ1AsU0FBS0gsSUFBTCxDQUFVSSxFQUFWLENBQWEsT0FBYixFQUFzQixLQUFLRixLQUEzQixFQUFrQyxJQUFsQztBQUNILEdBUkk7QUFTTEEsRUFBQUEsS0FUSyxtQkFTRztBQUNKLFFBQUksS0FBS0csT0FBVCxFQUFrQjtBQUNsQkMsSUFBQUEsSUFBSSxDQUFDQyxNQUFMLEdBQWMsSUFBZDtBQUNBLFNBQUtQLElBQUwsQ0FBVUssT0FBVixHQUFvQixLQUFLQSxPQUFMLEdBQWUsSUFBbkM7QUFDQSxRQUFJRyxHQUFHLEdBQUcsSUFBVjs7QUFDQSxRQUFJLEtBQUtSLElBQUwsQ0FBVVMsS0FBVixJQUFtQixRQUF2QixFQUFpQztBQUM3QkQsTUFBQUEsR0FBRyxHQUFHLEtBQU47QUFDSDs7QUFDREYsSUFBQUEsSUFBSSxDQUFDSSxJQUFMLENBQVUsVUFBVjtBQUNBLFFBQUlDLGNBQWMsR0FBR2hCLEVBQUUsQ0FBQ2lCLFFBQUgsQ0FBWUMsaUJBQVosRUFBckI7QUFDQUYsSUFBQUEsY0FBYyxDQUFDRyxPQUFmLEdBQXlCLEtBQXpCO0FBQ0FuQixJQUFBQSxFQUFFLENBQUNpQixRQUFILENBQVlHLG1CQUFaLEdBQWtDRCxPQUFsQyxHQUE0QyxLQUE1Qzs7QUFDQSxRQUFJTixHQUFKLEVBQVM7QUFDTEYsTUFBQUEsSUFBSSxDQUFDSSxJQUFMLENBQVVKLElBQUksQ0FBQ1UsU0FBTCxDQUFlQyxZQUF6QixFQUF1Q1gsSUFBSSxDQUFDWSxTQUFMLENBQWVDLFlBQXRELEVBQW9FO0FBQ2hFQyxRQUFBQSxJQUFJLEVBQUVDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLElBQWpCLENBRGtEO0FBRWhFZixRQUFBQSxHQUFHLEVBQUVBO0FBRjJELE9BQXBFO0FBSUFGLE1BQUFBLElBQUksQ0FBQ2tCLFlBQUwsQ0FBa0JDLFNBQWxCLENBQTRCbkIsSUFBSSxDQUFDb0IsU0FBTCxDQUFlQyxPQUEzQyxFQUFvRCxLQUFwRCxFQUxLLENBS3NEO0FBQzlELEtBTkQsTUFPSztBQUNEckIsTUFBQUEsSUFBSSxDQUFDSSxJQUFMLENBQVVKLElBQUksQ0FBQ1UsU0FBTCxDQUFlQyxZQUF6QixFQUF1Q1gsSUFBSSxDQUFDWSxTQUFMLENBQWVVLGFBQXRELEVBQXFFO0FBQ2pFUixRQUFBQSxJQUFJLEVBQUVDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLElBQWpCLENBRG1EO0FBRWpFZixRQUFBQSxHQUFHLEVBQUVBO0FBRjRELE9BQXJFO0FBSUFGLE1BQUFBLElBQUksQ0FBQ2tCLFlBQUwsQ0FBa0JDLFNBQWxCLENBQTRCbkIsSUFBSSxDQUFDb0IsU0FBTCxDQUFlRyxRQUEzQyxFQUFxRCxLQUFyRCxFQUxDLENBSzJEO0FBQy9EO0FBQ0osR0FuQ0k7QUFvQ0xDLEVBQUFBLE1BcENLLG9CQW9DSTtBQUNMLFNBQUt6QixPQUFMLEdBQWUsS0FBZjtBQUNBLFNBQUtGLFFBQUw7QUFDSCxHQXZDSTtBQXdDTDRCLEVBQUFBLEtBeENLLG1CQXdDRyxDQUNQO0FBekNJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vZmYoXCJkZWF0aFwiLCB0aGlzLmRlYXRoLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBhZGRFdmVudCgpIHtcclxuICAgICAgICB0aGlzLm5vZGUub24oXCJkZWF0aFwiLCB0aGlzLmRlYXRoLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBkZWF0aCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlYXRoKSByZXR1cm47XHJcbiAgICAgICAgZ2FtZS5pc092ZXIgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubm9kZS5pc0RlYXRoID0gdGhpcy5pc0RlYXRoID0gdHJ1ZTtcclxuICAgICAgICB2YXIgd2luID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5ub2RlLmdyb3VwID09IFwibXlyb2xlXCIpIHtcclxuICAgICAgICAgICAgd2luID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWUuZW1pdChcImdhbWVPdmVyXCIpO1xyXG4gICAgICAgIGxldCBwaHlzaWNzTWFuYWdlciA9IGNjLmRpcmVjdG9yLmdldFBoeXNpY3NNYW5hZ2VyKCk7XHJcbiAgICAgICAgcGh5c2ljc01hbmFnZXIuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNjLmRpcmVjdG9yLmdldENvbGxpc2lvbk1hbmFnZXIoKS5lbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHdpbikge1xyXG4gICAgICAgICAgICBnYW1lLmVtaXQoZ2FtZS5nYW1lRXZlbnQucG9wdXBfcHJlZmFiLCBnYW1lLmdhbWVQb3B1cC5nYW1lT3Zlcl93aW4sIHtcclxuICAgICAgICAgICAgICAgIHRlc3Q6IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiAxMDAwKSxcclxuICAgICAgICAgICAgICAgIHdpbjogd2luXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBnYW1lLnNvdW5kTWFuYWdlci5wbGF5TXVzaWMoZ2FtZS5nYW1lU291bmQuYmdtX3dpbiwgZmFsc2UpOy8v5YGc5q2i5pKt5pS+6Z+z5LmQXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBnYW1lLmVtaXQoZ2FtZS5nYW1lRXZlbnQucG9wdXBfcHJlZmFiLCBnYW1lLmdhbWVQb3B1cC5nYW1lT3Zlcl9sb3NzLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXN0OiBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMTAwMCksXHJcbiAgICAgICAgICAgICAgICB3aW46IHdpblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZ2FtZS5zb3VuZE1hbmFnZXIucGxheU11c2ljKGdhbWUuZ2FtZVNvdW5kLmJnbV9sb3NlLCBmYWxzZSk7Ly/lgZzmraLmkq3mlL7pn7PkuZBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMuaXNEZWF0aCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnQoKTtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/heros.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '53ae5RTjyFJBaf2/e8arvRC', 'heros');
// Script/test/heros.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    hero: cc.Node
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    this.node.removeAllChildren();

    for (var i = 0; i < 20; i++) {
      var hero = cc.instantiate(this.hero);
      var hua = hero.getComponent("hua");
      hua.huaValue = parseInt(i / 20 * 255);
      this.node.addChild(hero);
    }
  },
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxoZXJvcy5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImhlcm8iLCJOb2RlIiwib25EZXN0cm95Iiwib25Mb2FkIiwibm9kZSIsInJlbW92ZUFsbENoaWxkcmVuIiwiaSIsImluc3RhbnRpYXRlIiwiaHVhIiwiZ2V0Q29tcG9uZW50IiwiaHVhVmFsdWUiLCJwYXJzZUludCIsImFkZENoaWxkIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUVKLEVBQUUsQ0FBQ0s7QUFERCxHQUZQO0FBS0xDLEVBQUFBLFNBTEssdUJBS08sQ0FDWCxDQU5JO0FBT0xDLEVBQUFBLE1BUEssb0JBT0k7QUFDTCxTQUFLQyxJQUFMLENBQVVDLGlCQUFWOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUN6QixVQUFJTixJQUFJLEdBQUdKLEVBQUUsQ0FBQ1csV0FBSCxDQUFlLEtBQUtQLElBQXBCLENBQVg7QUFDQSxVQUFJUSxHQUFHLEdBQUdSLElBQUksQ0FBQ1MsWUFBTCxDQUFrQixLQUFsQixDQUFWO0FBQ0FELE1BQUFBLEdBQUcsQ0FBQ0UsUUFBSixHQUFlQyxRQUFRLENBQUNMLENBQUMsR0FBRyxFQUFKLEdBQVMsR0FBVixDQUF2QjtBQUNBLFdBQUtGLElBQUwsQ0FBVVEsUUFBVixDQUFtQlosSUFBbkI7QUFDSDtBQUNKLEdBZkk7QUFnQkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBYSxFQUFBQSxLQXhCSyxtQkF3QkcsQ0FDUCxDQXpCSSxDQTBCTDs7QUExQkssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGhlcm86IGNjLk5vZGVcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjA7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaGVybyA9IGNjLmluc3RhbnRpYXRlKHRoaXMuaGVybyk7XHJcbiAgICAgICAgICAgIHZhciBodWEgPSBoZXJvLmdldENvbXBvbmVudChcImh1YVwiKTtcclxuICAgICAgICAgICAgaHVhLmh1YVZhbHVlID0gcGFyc2VJbnQoaSAvIDIwICogMjU1KTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKGhlcm8pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuICAgIC8v5b2T6K+l57uE5Lu26KKr5ZCv55So77yM5bm25LiU5a6D55qE6IqC54K55Lmf5r+A5rS75pe244CCXHJcbiAgICAvLyBvbkVuYWJsZSgpIHtcclxuICAgIC8vIH0sXHJcbiAgICAvLyAvL+W9k+ivpee7hOS7tuiiq+emgeeUqOaIluiKgueCueWPmOS4uuaXoOaViOaXtuiwg+eUqOOAglxyXG4gICAgLy8gb25EaXNhYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8v6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CCXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/roleEdit.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd066fGB33VOJ6HhdQQa86SB', 'roleEdit');
// Script/scene/roleEdit.js

"use strict";

var track = cc.Enum({
  idle: 1,
  run: 2,
  attack1: 3,
  attack2: 4,
  jump: 5
});
cc.Class({
  "extends": cc.Component,
  properties: {
    sp: sp.Skeleton
  },
  onLoad: function onLoad() {
    this.data = this.sp._skeleton.data; // SkeletonData 骨架数据、

    var opts = {};

    for (var i in this.data.animations) {
      var animation = this.data.animations[i];
      cc.log(animation);
      cc.log(animation.duration * 30);
      opts[animation.name] = animation.duration;
    }

    this.trackIndex = track.idle; //this.sp.timeScale = 0.5;

    var ra1 = this.animations.run.duration > this.animations.attack1.duration ? this.animations.attack1.duration : this.animations.run.duration;
    var ra2 = this.animations.run.duration > this.animations.attack2.duration ? this.animations.attack2.duration : this.animations.run.duration;
    this.setMix('run', 'attack2', ra1 - 0.1);
    this.setMix('run', 'attack1', ra2 - 0.1);
    this.sp.setAnimation(track.run, "run", true);
  },
  //setMix 为所有关键帧设定混合及混合时间（从当前值开始差值）。
  setMix: function setMix(anim1, anim2, mixTime) {
    this.sp.setMix(anim1, anim2, mixTime);
    this.sp.setMix(anim2, anim1, mixTime);
  },

  /********
   * 移动
   * **/
  onMove: function onMove() {
    this.sp.clearTrack(this.trackIndex);
    this.trackIndex = track.run;
    this.sp.addAnimation(track.run, "run", true, 0.1);
  },

  /********
   * 瞄准
   * ***/
  onAim: function onAim() {},

  /********
   * 攻击
   * ***/
  onAttack1: function onAttack1() {
    cc.log("攻击1"); // this.sp.clearTrack(this.trackIndex);
    // this.trackIndex = track.attack1;

    this.sp.addAnimation(track.attack1, "attack1", false, 0);
  },
  onAttack2: function onAttack2() {
    cc.log("攻击2"); // this.sp.timeScale = 1;
    // this.sp.clearTrack(this.trackIndex);
    // this.trackIndex = track.attack2;

    this.sp.addAnimation(track.attack2, "attack2", false, 0);
  },
  onjump: function onjump() {
    cc.log("跳跃");
    this.sp.clearTrack(this.trackIndex);
    this.trackIndex = track.jump;
    this.sp.addAnimation(track.jump, "jump", false, 0.2);
  },

  /***
   * 更换皮肤
   *
   * ****/
  switchSkin: function switchSkin() {},

  /*****
   *
   * ******/
  onClick: function onClick(event) {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxzY2VuZVxccm9sZUVkaXQuanMiXSwibmFtZXMiOlsidHJhY2siLCJjYyIsIkVudW0iLCJpZGxlIiwicnVuIiwiYXR0YWNrMSIsImF0dGFjazIiLCJqdW1wIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwic3AiLCJTa2VsZXRvbiIsIm9uTG9hZCIsImRhdGEiLCJfc2tlbGV0b24iLCJvcHRzIiwiaSIsImFuaW1hdGlvbnMiLCJhbmltYXRpb24iLCJsb2ciLCJkdXJhdGlvbiIsIm5hbWUiLCJ0cmFja0luZGV4IiwicmExIiwicmEyIiwic2V0TWl4Iiwic2V0QW5pbWF0aW9uIiwiYW5pbTEiLCJhbmltMiIsIm1peFRpbWUiLCJvbk1vdmUiLCJjbGVhclRyYWNrIiwiYWRkQW5pbWF0aW9uIiwib25BaW0iLCJvbkF0dGFjazEiLCJvbkF0dGFjazIiLCJvbmp1bXAiLCJzd2l0Y2hTa2luIiwib25DbGljayIsImV2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLEtBQUssR0FBR0MsRUFBRSxDQUFDQyxJQUFILENBQVE7QUFDaEJDLEVBQUFBLElBQUksRUFBRSxDQURVO0FBRWhCQyxFQUFBQSxHQUFHLEVBQUUsQ0FGVztBQUdoQkMsRUFBQUEsT0FBTyxFQUFFLENBSE87QUFJaEJDLEVBQUFBLE9BQU8sRUFBRSxDQUpPO0FBS2hCQyxFQUFBQSxJQUFJLEVBQUU7QUFMVSxDQUFSLENBQVo7QUFPQU4sRUFBRSxDQUFDTyxLQUFILENBQVM7QUFDTCxhQUFTUCxFQUFFLENBQUNRLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLEVBQUUsRUFBRUEsRUFBRSxDQUFDQztBQURDLEdBRlA7QUFLTEMsRUFBQUEsTUFMSyxvQkFLSTtBQUNMLFNBQUtDLElBQUwsR0FBWSxLQUFLSCxFQUFMLENBQVFJLFNBQVIsQ0FBa0JELElBQTlCLENBREssQ0FDK0I7O0FBQ3BDLFFBQUlFLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUssSUFBSUMsQ0FBVCxJQUFjLEtBQUtILElBQUwsQ0FBVUksVUFBeEIsRUFBb0M7QUFDaEMsVUFBSUMsU0FBUyxHQUFHLEtBQUtMLElBQUwsQ0FBVUksVUFBVixDQUFxQkQsQ0FBckIsQ0FBaEI7QUFDQWhCLE1BQUFBLEVBQUUsQ0FBQ21CLEdBQUgsQ0FBT0QsU0FBUDtBQUNBbEIsTUFBQUEsRUFBRSxDQUFDbUIsR0FBSCxDQUFPRCxTQUFTLENBQUNFLFFBQVYsR0FBcUIsRUFBNUI7QUFDQUwsTUFBQUEsSUFBSSxDQUFDRyxTQUFTLENBQUNHLElBQVgsQ0FBSixHQUF1QkgsU0FBUyxDQUFDRSxRQUFqQztBQUNIOztBQUNELFNBQUtFLFVBQUwsR0FBa0J2QixLQUFLLENBQUNHLElBQXhCLENBVEssQ0FVTDs7QUFDQSxRQUFJcUIsR0FBRyxHQUFHLEtBQUtOLFVBQUwsQ0FBZ0JkLEdBQWhCLENBQW9CaUIsUUFBcEIsR0FBK0IsS0FBS0gsVUFBTCxDQUFnQmIsT0FBaEIsQ0FBd0JnQixRQUF2RCxHQUFrRSxLQUFLSCxVQUFMLENBQWdCYixPQUFoQixDQUF3QmdCLFFBQTFGLEdBQXFHLEtBQUtILFVBQUwsQ0FBZ0JkLEdBQWhCLENBQW9CaUIsUUFBbkk7QUFDQSxRQUFJSSxHQUFHLEdBQUcsS0FBS1AsVUFBTCxDQUFnQmQsR0FBaEIsQ0FBb0JpQixRQUFwQixHQUErQixLQUFLSCxVQUFMLENBQWdCWixPQUFoQixDQUF3QmUsUUFBdkQsR0FBa0UsS0FBS0gsVUFBTCxDQUFnQlosT0FBaEIsQ0FBd0JlLFFBQTFGLEdBQXFHLEtBQUtILFVBQUwsQ0FBZ0JkLEdBQWhCLENBQW9CaUIsUUFBbkk7QUFDQSxTQUFLSyxNQUFMLENBQVksS0FBWixFQUFtQixTQUFuQixFQUE4QkYsR0FBRyxHQUFHLEdBQXBDO0FBQ0EsU0FBS0UsTUFBTCxDQUFZLEtBQVosRUFBbUIsU0FBbkIsRUFBOEJELEdBQUcsR0FBRyxHQUFwQztBQUNBLFNBQUtkLEVBQUwsQ0FBUWdCLFlBQVIsQ0FBcUIzQixLQUFLLENBQUNJLEdBQTNCLEVBQWdDLEtBQWhDLEVBQXVDLElBQXZDO0FBQ0gsR0FyQkk7QUFzQkw7QUFDQXNCLEVBQUFBLE1BdkJLLGtCQXVCRUUsS0F2QkYsRUF1QlNDLEtBdkJULEVBdUJnQkMsT0F2QmhCLEVBdUJ5QjtBQUMxQixTQUFLbkIsRUFBTCxDQUFRZSxNQUFSLENBQWVFLEtBQWYsRUFBc0JDLEtBQXRCLEVBQTZCQyxPQUE3QjtBQUNBLFNBQUtuQixFQUFMLENBQVFlLE1BQVIsQ0FBZUcsS0FBZixFQUFzQkQsS0FBdEIsRUFBNkJFLE9BQTdCO0FBQ0gsR0ExQkk7O0FBMkJMO0FBQ0o7QUFDQTtBQUNJQyxFQUFBQSxNQTlCSyxvQkE4Qkk7QUFDTCxTQUFLcEIsRUFBTCxDQUFRcUIsVUFBUixDQUFtQixLQUFLVCxVQUF4QjtBQUNBLFNBQUtBLFVBQUwsR0FBa0J2QixLQUFLLENBQUNJLEdBQXhCO0FBQ0EsU0FBS08sRUFBTCxDQUFRc0IsWUFBUixDQUFxQmpDLEtBQUssQ0FBQ0ksR0FBM0IsRUFBZ0MsS0FBaEMsRUFBdUMsSUFBdkMsRUFBNkMsR0FBN0M7QUFDSCxHQWxDSTs7QUFtQ0w7QUFDSjtBQUNBO0FBQ0k4QixFQUFBQSxLQXRDSyxtQkFzQ0csQ0FDUCxDQXZDSTs7QUF3Q0w7QUFDSjtBQUNBO0FBQ0lDLEVBQUFBLFNBM0NLLHVCQTJDTztBQUNSbEMsSUFBQUEsRUFBRSxDQUFDbUIsR0FBSCxDQUFPLEtBQVAsRUFEUSxDQUVSO0FBQ0E7O0FBQ0EsU0FBS1QsRUFBTCxDQUFRc0IsWUFBUixDQUFxQmpDLEtBQUssQ0FBQ0ssT0FBM0IsRUFBb0MsU0FBcEMsRUFBK0MsS0FBL0MsRUFBc0QsQ0FBdEQ7QUFDSCxHQWhESTtBQWlETCtCLEVBQUFBLFNBakRLLHVCQWlETztBQUNSbkMsSUFBQUEsRUFBRSxDQUFDbUIsR0FBSCxDQUFPLEtBQVAsRUFEUSxDQUVSO0FBQ0E7QUFDQTs7QUFDQSxTQUFLVCxFQUFMLENBQVFzQixZQUFSLENBQXFCakMsS0FBSyxDQUFDTSxPQUEzQixFQUFvQyxTQUFwQyxFQUErQyxLQUEvQyxFQUFzRCxDQUF0RDtBQUNILEdBdkRJO0FBd0RMK0IsRUFBQUEsTUF4REssb0JBd0RJO0FBQ0xwQyxJQUFBQSxFQUFFLENBQUNtQixHQUFILENBQU8sSUFBUDtBQUNBLFNBQUtULEVBQUwsQ0FBUXFCLFVBQVIsQ0FBbUIsS0FBS1QsVUFBeEI7QUFDQSxTQUFLQSxVQUFMLEdBQWtCdkIsS0FBSyxDQUFDTyxJQUF4QjtBQUNBLFNBQUtJLEVBQUwsQ0FBUXNCLFlBQVIsQ0FBcUJqQyxLQUFLLENBQUNPLElBQTNCLEVBQWlDLE1BQWpDLEVBQXlDLEtBQXpDLEVBQWdELEdBQWhEO0FBQ0gsR0E3REk7O0FBOERMO0FBQ0o7QUFDQTtBQUNBO0FBQ0krQixFQUFBQSxVQWxFSyx3QkFrRVEsQ0FDWixDQW5FSTs7QUFvRUw7QUFDSjtBQUNBO0FBQ0lDLEVBQUFBLE9BdkVLLG1CQXVFR0MsS0F2RUgsRUF1RVUsQ0FDZDtBQXhFSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJhY2sgPSBjYy5FbnVtKHtcclxuICAgIGlkbGU6IDEsXHJcbiAgICBydW46IDIsXHJcbiAgICBhdHRhY2sxOiAzLFxyXG4gICAgYXR0YWNrMjogNCxcclxuICAgIGp1bXA6IDVcclxufSk7XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBzcDogc3AuU2tlbGV0b25cclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5zcC5fc2tlbGV0b24uZGF0YTsgLy8gU2tlbGV0b25EYXRhIOmqqOaetuaVsOaNruOAgVxyXG4gICAgICAgIHZhciBvcHRzID0ge31cclxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZGF0YS5hbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLmRhdGEuYW5pbWF0aW9uc1tpXTtcclxuICAgICAgICAgICAgY2MubG9nKGFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGNjLmxvZyhhbmltYXRpb24uZHVyYXRpb24gKiAzMCk7XHJcbiAgICAgICAgICAgIG9wdHNbYW5pbWF0aW9uLm5hbWVdID0gYW5pbWF0aW9uLmR1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRyYWNrSW5kZXggPSB0cmFjay5pZGxlO1xyXG4gICAgICAgIC8vdGhpcy5zcC50aW1lU2NhbGUgPSAwLjU7XHJcbiAgICAgICAgdmFyIHJhMSA9IHRoaXMuYW5pbWF0aW9ucy5ydW4uZHVyYXRpb24gPiB0aGlzLmFuaW1hdGlvbnMuYXR0YWNrMS5kdXJhdGlvbiA/IHRoaXMuYW5pbWF0aW9ucy5hdHRhY2sxLmR1cmF0aW9uIDogdGhpcy5hbmltYXRpb25zLnJ1bi5kdXJhdGlvbjtcclxuICAgICAgICB2YXIgcmEyID0gdGhpcy5hbmltYXRpb25zLnJ1bi5kdXJhdGlvbiA+IHRoaXMuYW5pbWF0aW9ucy5hdHRhY2syLmR1cmF0aW9uID8gdGhpcy5hbmltYXRpb25zLmF0dGFjazIuZHVyYXRpb24gOiB0aGlzLmFuaW1hdGlvbnMucnVuLmR1cmF0aW9uO1xyXG4gICAgICAgIHRoaXMuc2V0TWl4KCdydW4nLCAnYXR0YWNrMicsIHJhMSAtIDAuMSk7XHJcbiAgICAgICAgdGhpcy5zZXRNaXgoJ3J1bicsICdhdHRhY2sxJywgcmEyIC0gMC4xKTtcclxuICAgICAgICB0aGlzLnNwLnNldEFuaW1hdGlvbih0cmFjay5ydW4sIFwicnVuXCIsIHRydWUpO1xyXG4gICAgfSxcclxuICAgIC8vc2V0TWl4IOS4uuaJgOacieWFs+mUruW4p+iuvuWumua3t+WQiOWPiua3t+WQiOaXtumXtO+8iOS7juW9k+WJjeWAvOW8gOWni+W3ruWAvO+8ieOAglxyXG4gICAgc2V0TWl4KGFuaW0xLCBhbmltMiwgbWl4VGltZSkge1xyXG4gICAgICAgIHRoaXMuc3Auc2V0TWl4KGFuaW0xLCBhbmltMiwgbWl4VGltZSk7XHJcbiAgICAgICAgdGhpcy5zcC5zZXRNaXgoYW5pbTIsIGFuaW0xLCBtaXhUaW1lKTtcclxuICAgIH0sXHJcbiAgICAvKioqKioqKipcclxuICAgICAqIOenu+WKqFxyXG4gICAgICogKiovXHJcbiAgICBvbk1vdmUoKSB7XHJcbiAgICAgICAgdGhpcy5zcC5jbGVhclRyYWNrKHRoaXMudHJhY2tJbmRleCk7XHJcbiAgICAgICAgdGhpcy50cmFja0luZGV4ID0gdHJhY2sucnVuO1xyXG4gICAgICAgIHRoaXMuc3AuYWRkQW5pbWF0aW9uKHRyYWNrLnJ1biwgXCJydW5cIiwgdHJ1ZSwgMC4xKTtcclxuICAgIH0sXHJcbiAgICAvKioqKioqKipcclxuICAgICAqIOeehOWHhlxyXG4gICAgICogKioqL1xyXG4gICAgb25BaW0oKSB7XHJcbiAgICB9LFxyXG4gICAgLyoqKioqKioqXHJcbiAgICAgKiDmlLvlh7tcclxuICAgICAqICoqKi9cclxuICAgIG9uQXR0YWNrMSgpIHtcclxuICAgICAgICBjYy5sb2coXCLmlLvlh7sxXCIpO1xyXG4gICAgICAgIC8vIHRoaXMuc3AuY2xlYXJUcmFjayh0aGlzLnRyYWNrSW5kZXgpO1xyXG4gICAgICAgIC8vIHRoaXMudHJhY2tJbmRleCA9IHRyYWNrLmF0dGFjazE7XHJcbiAgICAgICAgdGhpcy5zcC5hZGRBbmltYXRpb24odHJhY2suYXR0YWNrMSwgXCJhdHRhY2sxXCIsIGZhbHNlLCAwKTtcclxuICAgIH0sXHJcbiAgICBvbkF0dGFjazIoKSB7XHJcbiAgICAgICAgY2MubG9nKFwi5pS75Ye7MlwiKTtcclxuICAgICAgICAvLyB0aGlzLnNwLnRpbWVTY2FsZSA9IDE7XHJcbiAgICAgICAgLy8gdGhpcy5zcC5jbGVhclRyYWNrKHRoaXMudHJhY2tJbmRleCk7XHJcbiAgICAgICAgLy8gdGhpcy50cmFja0luZGV4ID0gdHJhY2suYXR0YWNrMjtcclxuICAgICAgICB0aGlzLnNwLmFkZEFuaW1hdGlvbih0cmFjay5hdHRhY2syLCBcImF0dGFjazJcIiwgZmFsc2UsIDApO1xyXG4gICAgfSxcclxuICAgIG9uanVtcCgpIHtcclxuICAgICAgICBjYy5sb2coXCLot7Pot4NcIik7XHJcbiAgICAgICAgdGhpcy5zcC5jbGVhclRyYWNrKHRoaXMudHJhY2tJbmRleCk7XHJcbiAgICAgICAgdGhpcy50cmFja0luZGV4ID0gdHJhY2suanVtcDtcclxuICAgICAgICB0aGlzLnNwLmFkZEFuaW1hdGlvbih0cmFjay5qdW1wLCBcImp1bXBcIiwgZmFsc2UsIDAuMik7XHJcbiAgICB9LFxyXG4gICAgLyoqKlxyXG4gICAgICog5pu05o2i55qu6IKkXHJcbiAgICAgKlxyXG4gICAgICogKioqKi9cclxuICAgIHN3aXRjaFNraW4oKSB7XHJcbiAgICB9LFxyXG4gICAgLyoqKioqXHJcbiAgICAgKlxyXG4gICAgICogKioqKioqL1xyXG4gICAgb25DbGljayhldmVudCkge1xyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/scene/gameGuanka.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'df2ebmX2N5Mw6e6KJNOa/hW', 'gameGuanka');
// Script/scene/gameGuanka.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    scrollView: cc.ScrollView,
    jiaose: cc.Node,
    zhangLabel: cc.Label,
    shangBtn: cc.Button,
    xiaBtn: cc.Button
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    var list = game.localStorage.getItem("guanka-data");

    if (!list) {
      list = [];
      game.localStorage.setItem("guanka-data", list);
    }

    list = [{
      num: 101,
      state: 3
    }, {
      num: 102,
      state: 2
    }, {
      num: 103,
      state: 2
    }, {
      num: 104,
      state: 1
    }];
    game.curNum = game.localStorage.getItem("guanka-curGuan") || 105;
    game.curZhang = parseInt(game.curNum / 100);
    game.curGuan = game.curNum % 100;
    var guankazhangs = this.getComponentsInChildren("guankazhang");
    guankazhangs.sort(function (a, b) {
      return a.num - b.num;
    });
    this.zhangNodeList = guankazhangs;
    this.curIndex = 0;

    for (var i = 0; i < guankazhangs.length; i++) {
      var zhang = guankazhangs[i];

      if (game.curZhang == zhang.num) {
        zhang.node.active = true;
        this.jiaose.parent = zhang.node;
        this.curIndex = i;
        this.scrollView.content = zhang.node;
      } else {
        zhang.node.active = false;
      }
    }

    game.localStorage.setItem("guanka-curNum", game.curNum);
    var items = this.getComponentsInChildren("guanItem");
    items.sort(function (a, b) {
      return a.num - b.num;
    });

    for (var _i = 0; _i < items.length; _i++) {
      var item = items[_i];
      item.setInfo(list[_i]);

      if (item.num == game.curNum) {
        this.jiaose.x = item.node.x;
        this.jiaose.y = item.node.y + 50;
      }
    }

    this.updateBtnState();
  },
  updateBtnState: function updateBtnState() {
    this.zhangLabel.string = "第" + (this.curIndex + 1) + "章";

    if (this.curIndex == 0 || this.zhangNodeList.length < 2) {
      this.shangBtn.interactable = false;
    } else {
      this.shangBtn.interactable = true;
    }

    if (this.curIndex >= this.zhangNodeList.length - 1) {
      this.xiaBtn.interactable = false;
    } else {
      this.xiaBtn.interactable = true;
    }
  },
  updataMap: function updataMap() {
    for (var i = 0; i < this.zhangNodeList.length; i++) {
      var zhang = this.zhangNodeList[i];

      if (i == this.curIndex) {
        zhang.node.active = true;
        this.curIndex = i;
        this.scrollView.content = zhang.node;
      } else {
        zhang.node.active = false;
      }
    }
  },
  onShang: function onShang() {
    var a = this.curIndex - 1;
    if (a < 0) return;
    this.curIndex = a;
    this.updataMap();
    this.updateBtnState();
  },
  onXia: function onXia() {
    var a = this.curIndex + 1;
    if (a >= this.zhangNodeList.length) return;
    this.curIndex = a;
    this.updataMap();
    this.updateBtnState();
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/drag.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '96091gf6RNBI6G7o1U+SQxb', 'drag');
// Script/test/drag.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.on(cc.Node.EventType.TOUCH_START, function (t) {}, this); //监听

    this.node.on(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move, this); //触摸抬起

    this.node.on(cc.Node.EventType.TOUCH_ENDED, function (t) {}, this);
    this.node.on(cc.Node.EventType.TOUCH_CANCEL, function (t) {}, this);
  },
  on_touch_move: function on_touch_move(t) {
    //定义一个n_pos变量存储当前触摸点的位置
    var n_pos = t.getLocation();
    var delta = t.getDelta();
    this.node.x += delta.x;
    this.node.y += delta.y;
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxkcmFnLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwibm9kZSIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlRPVUNIX1NUQVJUIiwidCIsIlRPVUNIX01PVkUiLCJvbl90b3VjaF9tb3ZlIiwiVE9VQ0hfRU5ERUQiLCJUT1VDSF9DQU5DRUwiLCJuX3BvcyIsImdldExvY2F0aW9uIiwiZGVsdGEiLCJnZXREZWx0YSIsIngiLCJ5Iiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR1Q7QUFDSUMsRUFBQUEsTUFKSyxvQkFJSTtBQUNMLFNBQUtDLElBQUwsQ0FBVUMsRUFBVixDQUFhTixFQUFFLENBQUNPLElBQUgsQ0FBUUMsU0FBUixDQUFrQkMsV0FBL0IsRUFBNEMsVUFBVUMsQ0FBVixFQUFhLENBQ3hELENBREQsRUFDRyxJQURILEVBREssQ0FHTDs7QUFDQSxTQUFLTCxJQUFMLENBQVVDLEVBQVYsQ0FBYU4sRUFBRSxDQUFDTyxJQUFILENBQVFDLFNBQVIsQ0FBa0JHLFVBQS9CLEVBQTJDLEtBQUtDLGFBQWhELEVBQStELElBQS9ELEVBSkssQ0FLTDs7QUFDQSxTQUFLUCxJQUFMLENBQVVDLEVBQVYsQ0FBYU4sRUFBRSxDQUFDTyxJQUFILENBQVFDLFNBQVIsQ0FBa0JLLFdBQS9CLEVBQTRDLFVBQVVILENBQVYsRUFBYSxDQUN4RCxDQURELEVBQ0csSUFESDtBQUVBLFNBQUtMLElBQUwsQ0FBVUMsRUFBVixDQUFhTixFQUFFLENBQUNPLElBQUgsQ0FBUUMsU0FBUixDQUFrQk0sWUFBL0IsRUFBNkMsVUFBVUosQ0FBVixFQUFhLENBQ3pELENBREQsRUFDRyxJQURIO0FBRUgsR0FkSTtBQWVMRSxFQUFBQSxhQWZLLHlCQWVTRixDQWZULEVBZVk7QUFDYjtBQUNBLFFBQUlLLEtBQUssR0FBR0wsQ0FBQyxDQUFDTSxXQUFGLEVBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdQLENBQUMsQ0FBQ1EsUUFBRixFQUFaO0FBQ0EsU0FBS2IsSUFBTCxDQUFVYyxDQUFWLElBQWVGLEtBQUssQ0FBQ0UsQ0FBckI7QUFDQSxTQUFLZCxJQUFMLENBQVVlLENBQVYsSUFBZUgsS0FBSyxDQUFDRyxDQUFyQjtBQUNILEdBckJJO0FBc0JMQyxFQUFBQSxLQXRCSyxtQkFzQkcsQ0FDUDtBQXZCSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIH0sIHRoaXMpXHJcbiAgICAgICAgLy/nm5HlkKxcclxuICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRSwgdGhpcy5vbl90b3VjaF9tb3ZlLCB0aGlzKTtcclxuICAgICAgICAvL+inpuaRuOaKrOi1t1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkRFRCwgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfQ0FOQ0VMLCBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIG9uX3RvdWNoX21vdmUodCkge1xyXG4gICAgICAgIC8v5a6a5LmJ5LiA5Liqbl9wb3Plj5jph4/lrZjlgqjlvZPliY3op6bmkbjngrnnmoTkvY3nva5cclxuICAgICAgICB2YXIgbl9wb3MgPSB0LmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgdmFyIGRlbHRhID0gdC5nZXREZWx0YSgpO1xyXG4gICAgICAgIHRoaXMubm9kZS54ICs9IGRlbHRhLng7XHJcbiAgICAgICAgdGhpcy5ub2RlLnkgKz0gZGVsdGEueTtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/itemTest.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8f881Qu6BJPlbmzFQBLCwub', 'itemTest');
// Script/test/itemTest.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    label: cc.Label
  },
  setInfo: function setInfo(vale) {
    this.label.string = vale.toString();
  },
  onLoad: function onLoad() {},
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxpdGVtVGVzdC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImxhYmVsIiwiTGFiZWwiLCJzZXRJbmZvIiwidmFsZSIsInN0cmluZyIsInRvU3RyaW5nIiwib25Mb2FkIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxLQUFLLEVBQUNKLEVBQUUsQ0FBQ0s7QUFEQyxHQUhQO0FBTUxDLEVBQUFBLE9BTkssbUJBTUdDLElBTkgsRUFNUTtBQUNYLFNBQUtILEtBQUwsQ0FBV0ksTUFBWCxHQUFrQkQsSUFBSSxDQUFDRSxRQUFMLEVBQWxCO0FBQ0QsR0FSSTtBQVVMQyxFQUFBQSxNQVZLLG9CQVVLLENBRVQsQ0FaSTtBQWNMQyxFQUFBQSxLQWRLLG1CQWNJLENBRVIsQ0FoQkk7QUFrQkxDLEVBQUFBLFNBbEJLLHVCQWtCTyxDQUVYLENBcEJJLENBc0JMOztBQXRCSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICBsYWJlbDpjYy5MYWJlbFxyXG4gICAgfSxcclxuICAgIHNldEluZm8odmFsZSl7XHJcbiAgICAgIHRoaXMubGFiZWwuc3RyaW5nPXZhbGUudG9TdHJpbmcoKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25Mb2FkICgpIHtcclxuICAgICAgICBcclxuICAgIH0sXHJcblxyXG4gICAgc3RhcnQgKCkge1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgb25EZXN0cm95KCkge1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/ui/gamePausePanel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c12adAeKNJFaaGOS9v0je9s', 'gamePausePanel');
// Script/ui/gamePausePanel.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {},
  onComplete: function onComplete() {//cc.director.pause();
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  start: function start() {},
  onClosed: function onClosed() {
    //cc.director.resume();
    game.emit(game.gameEvent.closed_prefab, this.node);
  },
  //返回大厅
  onBackHome: function onBackHome() {
    //cc.director.resume();
    game.emit(game.gameEvent.closed_prefab, this.node);
    game.emit(game.gameEvent.load_scene, game.gameScene.hall);
  },
  //重新开始
  onReStart: function onReStart() {
    //cc.director.resume();
    game.emit(game.gameEvent.closed_prefab, this.node);
    game.emit(game.gameEvent.load_scene, game.gameScene.gameGuanka);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx1aVxcZ2FtZVBhdXNlUGFuZWwuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInVudXNlIiwicmV1c2UiLCJkYXRhIiwib25Db21wbGV0ZSIsIm9uRGVzdHJveSIsIm9uTG9hZCIsInN0YXJ0Iiwib25DbG9zZWQiLCJnYW1lIiwiZW1pdCIsImdhbWVFdmVudCIsImNsb3NlZF9wcmVmYWIiLCJub2RlIiwib25CYWNrSG9tZSIsImxvYWRfc2NlbmUiLCJnYW1lU2NlbmUiLCJoYWxsIiwib25SZVN0YXJ0IiwiZ2FtZUd1YW5rYSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTNCLEVBQThDOzs7QUFDOUNDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0gsYUFESjtBQUVMSSxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxpQkFBWSxDQUNsQixDQUxJO0FBTUw7QUFDQUMsRUFBQUEsS0FBSyxFQUFFLGVBQVVDLElBQVYsRUFBZ0IsQ0FDdEIsQ0FSSTtBQVNMQyxFQUFBQSxVQVRLLHdCQVNRLENBQ1Q7QUFDSCxHQVhJO0FBWUxDLEVBQUFBLFNBWkssdUJBWU8sQ0FDWCxDQWJJO0FBY0xDLEVBQUFBLE1BZEssb0JBY0ksQ0FDUixDQWZJO0FBZ0JMQyxFQUFBQSxLQWhCSyxtQkFnQkcsQ0FDUCxDQWpCSTtBQWtCTEMsRUFBQUEsUUFsQkssc0JBa0JNO0FBQ1A7QUFDQUMsSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVVELElBQUksQ0FBQ0UsU0FBTCxDQUFlQyxhQUF6QixFQUF3QyxLQUFLQyxJQUE3QztBQUNILEdBckJJO0FBc0JMO0FBQ0FDLEVBQUFBLFVBdkJLLHdCQXVCUTtBQUNUO0FBQ0FMLElBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVRCxJQUFJLENBQUNFLFNBQUwsQ0FBZUMsYUFBekIsRUFBd0MsS0FBS0MsSUFBN0M7QUFDQUosSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVVELElBQUksQ0FBQ0UsU0FBTCxDQUFlSSxVQUF6QixFQUFxQ04sSUFBSSxDQUFDTyxTQUFMLENBQWVDLElBQXBEO0FBQ0gsR0EzQkk7QUE0Qkw7QUFDQUMsRUFBQUEsU0E3QkssdUJBNkJPO0FBQ1I7QUFDQVQsSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVVELElBQUksQ0FBQ0UsU0FBTCxDQUFlQyxhQUF6QixFQUF3QyxLQUFLQyxJQUE3QztBQUNBSixJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVUQsSUFBSSxDQUFDRSxTQUFMLENBQWVJLFVBQXpCLEVBQXFDTixJQUFJLENBQUNPLFNBQUwsQ0FBZUcsVUFBcEQ7QUFDSDtBQWpDSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICAvL+WbnuaUtlxyXG4gICAgdW51c2U6IGZ1bmN0aW9uICgpIHtcclxuICAgIH0sXHJcbiAgICAvL+mHjeeUqFxyXG4gICAgcmV1c2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB9LFxyXG4gICAgb25Db21wbGV0ZSgpIHtcclxuICAgICAgICAvL2NjLmRpcmVjdG9yLnBhdXNlKCk7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkNsb3NlZCgpIHtcclxuICAgICAgICAvL2NjLmRpcmVjdG9yLnJlc3VtZSgpO1xyXG4gICAgICAgIGdhbWUuZW1pdChnYW1lLmdhbWVFdmVudC5jbG9zZWRfcHJlZmFiLCB0aGlzLm5vZGUpO1xyXG4gICAgfSxcclxuICAgIC8v6L+U5Zue5aSn5Y6FXHJcbiAgICBvbkJhY2tIb21lKCkge1xyXG4gICAgICAgIC8vY2MuZGlyZWN0b3IucmVzdW1lKCk7XHJcbiAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmNsb3NlZF9wcmVmYWIsIHRoaXMubm9kZSk7XHJcbiAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmxvYWRfc2NlbmUsIGdhbWUuZ2FtZVNjZW5lLmhhbGwpO1xyXG4gICAgfSxcclxuICAgIC8v6YeN5paw5byA5aeLXHJcbiAgICBvblJlU3RhcnQoKSB7XHJcbiAgICAgICAgLy9jYy5kaXJlY3Rvci5yZXN1bWUoKTtcclxuICAgICAgICBnYW1lLmVtaXQoZ2FtZS5nYW1lRXZlbnQuY2xvc2VkX3ByZWZhYiwgdGhpcy5ub2RlKTtcclxuICAgICAgICBnYW1lLmVtaXQoZ2FtZS5nYW1lRXZlbnQubG9hZF9zY2VuZSwgZ2FtZS5nYW1lU2NlbmUuZ2FtZUd1YW5rYSk7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/jdTest.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9f77f2TzmxGNZiFfoKiJVQF', 'jdTest');
// Script/test/jdTest.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    label: cc.Node
  },
  onLoad: function onLoad() {
    this.node.emit("drawClear");
    this.node.removeAllChildren();
    var self = this;

    for (var i = 0; i < 8; i++) {
      var r = 360 * i / 8;
      var a = Math.PI / 180 * r;
      var v1 = cc.v2();
      var v2 = this.getNextPos(cc.v2(), 100, r);
      this.node.emit("lineTo", v1, v2, "#fff000");
      var label = cc.instantiate(this.label);
      this.node.addChild(label);
      label.x = v2.x;
      label.y = v2.y;
      label.getComponent(cc.Label).string = r;
    }

    this.node.emit("drawNow");
  },
  getNextPos: function getNextPos(pos, len, rotation) {
    var angle = rotation * Math.PI / 180;
    var x = pos.x + Math.cos(angle) * len;
    var y = pos.x + Math.sin(angle) * len;
    return cc.v2(x, y);
  },
  start: function start() {},
  onDestroy: function onDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxqZFRlc3QuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJsYWJlbCIsIk5vZGUiLCJvbkxvYWQiLCJub2RlIiwiZW1pdCIsInJlbW92ZUFsbENoaWxkcmVuIiwic2VsZiIsImkiLCJyIiwiYSIsIk1hdGgiLCJQSSIsInYxIiwidjIiLCJnZXROZXh0UG9zIiwiaW5zdGFudGlhdGUiLCJhZGRDaGlsZCIsIngiLCJ5IiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJwb3MiLCJsZW4iLCJyb3RhdGlvbiIsImFuZ2xlIiwiY29zIiwic2luIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxLQUFLLEVBQUVKLEVBQUUsQ0FBQ0s7QUFERixHQUZQO0FBS0xDLEVBQUFBLE1BTEssb0JBS0k7QUFDTCxTQUFLQyxJQUFMLENBQVVDLElBQVYsQ0FBZSxXQUFmO0FBQ0EsU0FBS0QsSUFBTCxDQUFVRSxpQkFBVjtBQUNBLFFBQUlDLElBQUksR0FBRyxJQUFYOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxFQUF4QixFQUE0QjtBQUN4QixVQUFJQyxDQUFDLEdBQUcsTUFBTUQsQ0FBTixHQUFVLENBQWxCO0FBQ0EsVUFBSUUsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEVBQUwsR0FBVSxHQUFWLEdBQWdCSCxDQUF4QjtBQUNBLFVBQUlJLEVBQUUsR0FBR2hCLEVBQUUsQ0FBQ2lCLEVBQUgsRUFBVDtBQUNBLFVBQUlBLEVBQUUsR0FBRyxLQUFLQyxVQUFMLENBQWdCbEIsRUFBRSxDQUFDaUIsRUFBSCxFQUFoQixFQUF5QixHQUF6QixFQUE4QkwsQ0FBOUIsQ0FBVDtBQUNBLFdBQUtMLElBQUwsQ0FBVUMsSUFBVixDQUFlLFFBQWYsRUFBeUJRLEVBQXpCLEVBQTZCQyxFQUE3QixFQUFpQyxTQUFqQztBQUNBLFVBQUliLEtBQUssR0FBR0osRUFBRSxDQUFDbUIsV0FBSCxDQUFlLEtBQUtmLEtBQXBCLENBQVo7QUFDQSxXQUFLRyxJQUFMLENBQVVhLFFBQVYsQ0FBbUJoQixLQUFuQjtBQUNBQSxNQUFBQSxLQUFLLENBQUNpQixDQUFOLEdBQVVKLEVBQUUsQ0FBQ0ksQ0FBYjtBQUNBakIsTUFBQUEsS0FBSyxDQUFDa0IsQ0FBTixHQUFVTCxFQUFFLENBQUNLLENBQWI7QUFDQWxCLE1BQUFBLEtBQUssQ0FBQ21CLFlBQU4sQ0FBbUJ2QixFQUFFLENBQUN3QixLQUF0QixFQUE2QkMsTUFBN0IsR0FBc0NiLENBQXRDO0FBQ0g7O0FBQ0QsU0FBS0wsSUFBTCxDQUFVQyxJQUFWLENBQWUsU0FBZjtBQUNILEdBdEJJO0FBdUJMVSxFQUFBQSxVQUFVLEVBQUUsb0JBQVVRLEdBQVYsRUFBZUMsR0FBZixFQUFvQkMsUUFBcEIsRUFBOEI7QUFDdEMsUUFBSUMsS0FBSyxHQUFHRCxRQUFRLEdBQUdkLElBQUksQ0FBQ0MsRUFBaEIsR0FBcUIsR0FBakM7QUFDQSxRQUFJTSxDQUFDLEdBQUdLLEdBQUcsQ0FBQ0wsQ0FBSixHQUFRUCxJQUFJLENBQUNnQixHQUFMLENBQVNELEtBQVQsSUFBa0JGLEdBQWxDO0FBQ0EsUUFBSUwsQ0FBQyxHQUFHSSxHQUFHLENBQUNMLENBQUosR0FBUVAsSUFBSSxDQUFDaUIsR0FBTCxDQUFTRixLQUFULElBQWtCRixHQUFsQztBQUNBLFdBQU8zQixFQUFFLENBQUNpQixFQUFILENBQU1JLENBQU4sRUFBU0MsQ0FBVCxDQUFQO0FBQ0gsR0E1Qkk7QUE2QkxVLEVBQUFBLEtBN0JLLG1CQTZCRyxDQUNQLENBOUJJO0FBK0JMQyxFQUFBQSxTQS9CSyx1QkErQk8sQ0FDWCxDQWhDSSxDQWlDTDs7QUFqQ0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGxhYmVsOiBjYy5Ob2RlXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5lbWl0KFwiZHJhd0NsZWFyXCIpO1xyXG4gICAgICAgIHRoaXMubm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgciA9IDM2MCAqIGkgLyA4O1xyXG4gICAgICAgICAgICB2YXIgYSA9IE1hdGguUEkgLyAxODAgKiByO1xyXG4gICAgICAgICAgICB2YXIgdjEgPSBjYy52MigpO1xyXG4gICAgICAgICAgICB2YXIgdjIgPSB0aGlzLmdldE5leHRQb3MoY2MudjIoKSwgMTAwLCByKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmVtaXQoXCJsaW5lVG9cIiwgdjEsIHYyLCBcIiNmZmYwMDBcIik7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGNjLmluc3RhbnRpYXRlKHRoaXMubGFiZWwpO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQobGFiZWwpO1xyXG4gICAgICAgICAgICBsYWJlbC54ID0gdjIueDtcclxuICAgICAgICAgICAgbGFiZWwueSA9IHYyLnk7XHJcbiAgICAgICAgICAgIGxhYmVsLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ub2RlLmVtaXQoXCJkcmF3Tm93XCIpO1xyXG4gICAgfSxcclxuICAgIGdldE5leHRQb3M6IGZ1bmN0aW9uIChwb3MsIGxlbiwgcm90YXRpb24pIHtcclxuICAgICAgICB2YXIgYW5nbGUgPSByb3RhdGlvbiAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgdmFyIHggPSBwb3MueCArIE1hdGguY29zKGFuZ2xlKSAqIGxlbjtcclxuICAgICAgICB2YXIgeSA9IHBvcy54ICsgTWF0aC5zaW4oYW5nbGUpICogbGVuO1xyXG4gICAgICAgIHJldHVybiBjYy52Mih4LCB5KTtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/ui/gameOverLossPanel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2abb3C8eB1NVLGym/qVnJv3', 'gameOverLossPanel');
// Script/ui/gameOverLossPanel.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    this.data = data;
  },
  onClosed: function onClosed(e) {
    game.emit(game.gameEvent.load_scene, game.gameScene.hall);
    game.emit(game.gameEvent.closed_prefab, this.node);
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx1aVxcZ2FtZU92ZXJMb3NzUGFuZWwuanMiXSwibmFtZXMiOlsiUG9vbENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInVudXNlIiwicmV1c2UiLCJkYXRhIiwib25DbG9zZWQiLCJlIiwiZ2FtZSIsImVtaXQiLCJnYW1lRXZlbnQiLCJsb2FkX3NjZW5lIiwiZ2FtZVNjZW5lIiwiaGFsbCIsImNsb3NlZF9wcmVmYWIiLCJub2RlIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVksQ0FDbEIsQ0FMSTtBQU1MO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CLFNBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNILEdBVEk7QUFVTEMsRUFBQUEsUUFWSyxvQkFVSUMsQ0FWSixFQVVPO0FBQ1JDLElBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVRCxJQUFJLENBQUNFLFNBQUwsQ0FBZUMsVUFBekIsRUFBcUNILElBQUksQ0FBQ0ksU0FBTCxDQUFlQyxJQUFwRDtBQUNBTCxJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVUQsSUFBSSxDQUFDRSxTQUFMLENBQWVJLGFBQXpCLEVBQXdDLEtBQUtDLElBQTdDO0FBQ0gsR0FiSTtBQWNMQyxFQUFBQSxLQWRLLG1CQWNHLENBQ1A7QUFmSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICAvL+WbnuaUtlxyXG4gICAgdW51c2U6IGZ1bmN0aW9uICgpIHtcclxuICAgIH0sXHJcbiAgICAvL+mHjeeUqFxyXG4gICAgcmV1c2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH0sXHJcbiAgICBvbkNsb3NlZChlKSB7XHJcbiAgICAgICAgZ2FtZS5lbWl0KGdhbWUuZ2FtZUV2ZW50LmxvYWRfc2NlbmUsIGdhbWUuZ2FtZVNjZW5lLmhhbGwpO1xyXG4gICAgICAgIGdhbWUuZW1pdChnYW1lLmdhbWVFdmVudC5jbG9zZWRfcHJlZmFiLCB0aGlzLm5vZGUpO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/draw.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b919eFObpRA1bvtwbXrw5sr', 'draw');
// Script/test/draw.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onLoad: function onLoad() {
    this.node.on("draw", this.draw, this);
    this.node.on("drawClear", this.clear, this);
    this.node.on("lineTo", this.lineTo, this);
    this.node.on("drawNow", this.drawNow, this);
    this.colors = [cc.Color.YELLOW, cc.Color.BLUE, cc.Color.GREEN, cc.Color.RED];
    this.colorIndex = 0;
    game.root = this.node;
  },
  draw: function draw(p, c) {
    var g = this.getComponent(cc.Graphics);

    if (!c) {
      this.colorIndex++;
      this.colorIndex = this.colorIndex % this.colors.length;
      c = this.colors[this.colorIndex];
    } // g.lineWidth = 10;
    //  cc.log("绘制", p, c)


    g.strokeColor = c;
    g.moveTo(p.x - 100, p.y);
    g.lineTo(p.x + 100, p.y);
    g.moveTo(p.x, p.y - 100);
    g.lineTo(p.x, p.y + 100);
    g.close();
    g.stroke();
    g.fill();
  },
  lineTo: function lineTo(p1, p2, c) {
    var g = this.getComponent(cc.Graphics);
    c = c || '#222bff'; // g.lineWidth = 10;

    g.strokeColor = cc.Color.RED;
    g.moveTo(p1.x, p1.y);
    g.lineTo(p2.x, p2.y);
  },
  drawNow: function drawNow() {
    var g = this.getComponent(cc.Graphics);
    g.close();
    g.stroke();
    g.fill();
  },
  clear: function clear() {
    var g = this.getComponent(cc.Graphics); // g.lineWidth = 10;

    g.clear();
  },
  start: function start() {},
  onDestroy: function onDestroy() {
    this.node.off("draw", this.draw, this);
    this.node.off("drawClear", this.clear, this);
    this.node.off("lineTo", this.lineTo, this);
    this.node.off("drawNow", this.drawNow, this);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxkcmF3LmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwibm9kZSIsIm9uIiwiZHJhdyIsImNsZWFyIiwibGluZVRvIiwiZHJhd05vdyIsImNvbG9ycyIsIkNvbG9yIiwiWUVMTE9XIiwiQkxVRSIsIkdSRUVOIiwiUkVEIiwiY29sb3JJbmRleCIsImdhbWUiLCJyb290IiwicCIsImMiLCJnIiwiZ2V0Q29tcG9uZW50IiwiR3JhcGhpY3MiLCJsZW5ndGgiLCJzdHJva2VDb2xvciIsIm1vdmVUbyIsIngiLCJ5IiwiY2xvc2UiLCJzdHJva2UiLCJmaWxsIiwicDEiLCJwMiIsInN0YXJ0Iiwib25EZXN0cm95Iiwib2ZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxNQUhLLG9CQUdJO0FBQ0wsU0FBS0MsSUFBTCxDQUFVQyxFQUFWLENBQWEsTUFBYixFQUFxQixLQUFLQyxJQUExQixFQUFnQyxJQUFoQztBQUNBLFNBQUtGLElBQUwsQ0FBVUMsRUFBVixDQUFhLFdBQWIsRUFBMEIsS0FBS0UsS0FBL0IsRUFBc0MsSUFBdEM7QUFDQSxTQUFLSCxJQUFMLENBQVVDLEVBQVYsQ0FBYSxRQUFiLEVBQXVCLEtBQUtHLE1BQTVCLEVBQW9DLElBQXBDO0FBQ0EsU0FBS0osSUFBTCxDQUFVQyxFQUFWLENBQWEsU0FBYixFQUF3QixLQUFLSSxPQUE3QixFQUFzQyxJQUF0QztBQUNBLFNBQUtDLE1BQUwsR0FBYyxDQUNWWCxFQUFFLENBQUNZLEtBQUgsQ0FBU0MsTUFEQyxFQUVWYixFQUFFLENBQUNZLEtBQUgsQ0FBU0UsSUFGQyxFQUdWZCxFQUFFLENBQUNZLEtBQUgsQ0FBU0csS0FIQyxFQUlWZixFQUFFLENBQUNZLEtBQUgsQ0FBU0ksR0FKQyxDQUFkO0FBTUEsU0FBS0MsVUFBTCxHQUFrQixDQUFsQjtBQUNBQyxJQUFBQSxJQUFJLENBQUNDLElBQUwsR0FBWSxLQUFLZCxJQUFqQjtBQUNILEdBaEJJO0FBaUJMRSxFQUFBQSxJQWpCSyxnQkFpQkFhLENBakJBLEVBaUJHQyxDQWpCSCxFQWlCTTtBQUNQLFFBQUlDLENBQUMsR0FBRyxLQUFLQyxZQUFMLENBQWtCdkIsRUFBRSxDQUFDd0IsUUFBckIsQ0FBUjs7QUFDQSxRQUFJLENBQUNILENBQUwsRUFBUTtBQUNKLFdBQUtKLFVBQUw7QUFDQSxXQUFLQSxVQUFMLEdBQWtCLEtBQUtBLFVBQUwsR0FBa0IsS0FBS04sTUFBTCxDQUFZYyxNQUFoRDtBQUNBSixNQUFBQSxDQUFDLEdBQUcsS0FBS1YsTUFBTCxDQUFZLEtBQUtNLFVBQWpCLENBQUo7QUFDSCxLQU5NLENBT1A7QUFDQTs7O0FBQ0FLLElBQUFBLENBQUMsQ0FBQ0ksV0FBRixHQUFnQkwsQ0FBaEI7QUFDQUMsSUFBQUEsQ0FBQyxDQUFDSyxNQUFGLENBQVNQLENBQUMsQ0FBQ1EsQ0FBRixHQUFNLEdBQWYsRUFBb0JSLENBQUMsQ0FBQ1MsQ0FBdEI7QUFDQVAsSUFBQUEsQ0FBQyxDQUFDYixNQUFGLENBQVNXLENBQUMsQ0FBQ1EsQ0FBRixHQUFNLEdBQWYsRUFBb0JSLENBQUMsQ0FBQ1MsQ0FBdEI7QUFDQVAsSUFBQUEsQ0FBQyxDQUFDSyxNQUFGLENBQVNQLENBQUMsQ0FBQ1EsQ0FBWCxFQUFjUixDQUFDLENBQUNTLENBQUYsR0FBTSxHQUFwQjtBQUNBUCxJQUFBQSxDQUFDLENBQUNiLE1BQUYsQ0FBU1csQ0FBQyxDQUFDUSxDQUFYLEVBQWNSLENBQUMsQ0FBQ1MsQ0FBRixHQUFNLEdBQXBCO0FBQ0FQLElBQUFBLENBQUMsQ0FBQ1EsS0FBRjtBQUNBUixJQUFBQSxDQUFDLENBQUNTLE1BQUY7QUFDQVQsSUFBQUEsQ0FBQyxDQUFDVSxJQUFGO0FBQ0gsR0FsQ0k7QUFtQ0x2QixFQUFBQSxNQW5DSyxrQkFtQ0V3QixFQW5DRixFQW1DTUMsRUFuQ04sRUFtQ1ViLENBbkNWLEVBbUNhO0FBQ2QsUUFBSUMsQ0FBQyxHQUFHLEtBQUtDLFlBQUwsQ0FBa0J2QixFQUFFLENBQUN3QixRQUFyQixDQUFSO0FBQ0FILElBQUFBLENBQUMsR0FBR0EsQ0FBQyxJQUFJLFNBQVQsQ0FGYyxDQUdkOztBQUNBQyxJQUFBQSxDQUFDLENBQUNJLFdBQUYsR0FBZ0IxQixFQUFFLENBQUNZLEtBQUgsQ0FBU0ksR0FBekI7QUFDQU0sSUFBQUEsQ0FBQyxDQUFDSyxNQUFGLENBQVNNLEVBQUUsQ0FBQ0wsQ0FBWixFQUFlSyxFQUFFLENBQUNKLENBQWxCO0FBQ0FQLElBQUFBLENBQUMsQ0FBQ2IsTUFBRixDQUFTeUIsRUFBRSxDQUFDTixDQUFaLEVBQWVNLEVBQUUsQ0FBQ0wsQ0FBbEI7QUFDSCxHQTFDSTtBQTJDTG5CLEVBQUFBLE9BM0NLLHFCQTJDSztBQUNOLFFBQUlZLENBQUMsR0FBRyxLQUFLQyxZQUFMLENBQWtCdkIsRUFBRSxDQUFDd0IsUUFBckIsQ0FBUjtBQUNBRixJQUFBQSxDQUFDLENBQUNRLEtBQUY7QUFDQVIsSUFBQUEsQ0FBQyxDQUFDUyxNQUFGO0FBQ0FULElBQUFBLENBQUMsQ0FBQ1UsSUFBRjtBQUNILEdBaERJO0FBaURMeEIsRUFBQUEsS0FqREssbUJBaURHO0FBQ0osUUFBSWMsQ0FBQyxHQUFHLEtBQUtDLFlBQUwsQ0FBa0J2QixFQUFFLENBQUN3QixRQUFyQixDQUFSLENBREksQ0FFSjs7QUFDQUYsSUFBQUEsQ0FBQyxDQUFDZCxLQUFGO0FBQ0gsR0FyREk7QUFzREwyQixFQUFBQSxLQXRESyxtQkFzREcsQ0FDUCxDQXZESTtBQXdETEMsRUFBQUEsU0F4REssdUJBd0RPO0FBQ1IsU0FBSy9CLElBQUwsQ0FBVWdDLEdBQVYsQ0FBYyxNQUFkLEVBQXNCLEtBQUs5QixJQUEzQixFQUFpQyxJQUFqQztBQUNBLFNBQUtGLElBQUwsQ0FBVWdDLEdBQVYsQ0FBYyxXQUFkLEVBQTJCLEtBQUs3QixLQUFoQyxFQUF1QyxJQUF2QztBQUNBLFNBQUtILElBQUwsQ0FBVWdDLEdBQVYsQ0FBYyxRQUFkLEVBQXdCLEtBQUs1QixNQUE3QixFQUFxQyxJQUFyQztBQUNBLFNBQUtKLElBQUwsQ0FBVWdDLEdBQVYsQ0FBYyxTQUFkLEVBQXlCLEtBQUszQixPQUE5QixFQUF1QyxJQUF2QztBQUNILEdBN0RJLENBOERMOztBQTlESyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLm5vZGUub24oXCJkcmF3XCIsIHRoaXMuZHJhdywgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKFwiZHJhd0NsZWFyXCIsIHRoaXMuY2xlYXIsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihcImxpbmVUb1wiLCB0aGlzLmxpbmVUbywgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKFwiZHJhd05vd1wiLCB0aGlzLmRyYXdOb3csIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29sb3JzID0gW1xyXG4gICAgICAgICAgICBjYy5Db2xvci5ZRUxMT1csXHJcbiAgICAgICAgICAgIGNjLkNvbG9yLkJMVUUsXHJcbiAgICAgICAgICAgIGNjLkNvbG9yLkdSRUVOLFxyXG4gICAgICAgICAgICBjYy5Db2xvci5SRURcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMuY29sb3JJbmRleCA9IDA7XHJcbiAgICAgICAgZ2FtZS5yb290ID0gdGhpcy5ub2RlO1xyXG4gICAgfSxcclxuICAgIGRyYXcocCwgYykge1xyXG4gICAgICAgIHZhciBnID0gdGhpcy5nZXRDb21wb25lbnQoY2MuR3JhcGhpY3MpO1xyXG4gICAgICAgIGlmICghYykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9ySW5kZXgrKztcclxuICAgICAgICAgICAgdGhpcy5jb2xvckluZGV4ID0gdGhpcy5jb2xvckluZGV4ICUgdGhpcy5jb2xvcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjID0gdGhpcy5jb2xvcnNbdGhpcy5jb2xvckluZGV4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZy5saW5lV2lkdGggPSAxMDtcclxuICAgICAgICAvLyAgY2MubG9nKFwi57uY5Yi2XCIsIHAsIGMpXHJcbiAgICAgICAgZy5zdHJva2VDb2xvciA9IGM7XHJcbiAgICAgICAgZy5tb3ZlVG8ocC54IC0gMTAwLCBwLnkpO1xyXG4gICAgICAgIGcubGluZVRvKHAueCArIDEwMCwgcC55KTtcclxuICAgICAgICBnLm1vdmVUbyhwLngsIHAueSAtIDEwMCk7XHJcbiAgICAgICAgZy5saW5lVG8ocC54LCBwLnkgKyAxMDApO1xyXG4gICAgICAgIGcuY2xvc2UoKTtcclxuICAgICAgICBnLnN0cm9rZSgpO1xyXG4gICAgICAgIGcuZmlsbCgpO1xyXG4gICAgfSxcclxuICAgIGxpbmVUbyhwMSwgcDIsIGMpIHtcclxuICAgICAgICB2YXIgZyA9IHRoaXMuZ2V0Q29tcG9uZW50KGNjLkdyYXBoaWNzKTtcclxuICAgICAgICBjID0gYyB8fCAnIzIyMmJmZic7XHJcbiAgICAgICAgLy8gZy5saW5lV2lkdGggPSAxMDtcclxuICAgICAgICBnLnN0cm9rZUNvbG9yID0gY2MuQ29sb3IuUkVEO1xyXG4gICAgICAgIGcubW92ZVRvKHAxLngsIHAxLnkpO1xyXG4gICAgICAgIGcubGluZVRvKHAyLngsIHAyLnkpO1xyXG4gICAgfSxcclxuICAgIGRyYXdOb3coKSB7XHJcbiAgICAgICAgdmFyIGcgPSB0aGlzLmdldENvbXBvbmVudChjYy5HcmFwaGljcyk7XHJcbiAgICAgICAgZy5jbG9zZSgpO1xyXG4gICAgICAgIGcuc3Ryb2tlKCk7XHJcbiAgICAgICAgZy5maWxsKCk7XHJcbiAgICB9LFxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdmFyIGcgPSB0aGlzLmdldENvbXBvbmVudChjYy5HcmFwaGljcyk7XHJcbiAgICAgICAgLy8gZy5saW5lV2lkdGggPSAxMDtcclxuICAgICAgICBnLmNsZWFyKClcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihcImRyYXdcIiwgdGhpcy5kcmF3LCB0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub2ZmKFwiZHJhd0NsZWFyXCIsIHRoaXMuY2xlYXIsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vZmYoXCJsaW5lVG9cIiwgdGhpcy5saW5lVG8sIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vZmYoXCJkcmF3Tm93XCIsIHRoaXMuZHJhd05vdywgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/HeroHit.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fc4472Bhw9BSozf92nu/Fhx', 'HeroHit');
// Script/test/HeroHit.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    gravity: -1000 //重力

  },
  onLoad: function onLoad() {
    this.speed = cc.v2(0, 0); //速度

    this.prePosition = cc.v2();
    this.preStep = cc.v2();
    this._lastSpeedY = 0;
  },
  onEnable: function onEnable() {
    cc.director.getCollisionManager().enabled = true;
    cc.director.getCollisionManager().enabledDebugDraw = true;
  },
  onDisable: function onDisable() {
    cc.director.getCollisionManager().enabled = false;
    cc.director.getCollisionManager().enabledDebugDraw = false;
  },
  start: function start() {},

  /**
   * 当碰撞产生的时候调用
   * @param  {Collider} other 产生碰撞的另一个碰撞组件
   * @param  {Collider} self  产生碰撞的自身的碰撞组件
   */
  onCollisionEnter: function onCollisionEnter(other, self) {
    this.node.color = cc.Color.RED;
    this.touchingNumber++;
    console.log('on collision enter'); // // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面
    // var world = self.world;
    // // 碰撞组件的 aabb 碰撞框
    // var aabb = world.aabb;
    // // 节点碰撞前上一帧 aabb 碰撞框的位置
    // var preAabb = world.preAabb;
    // // 碰撞框的世界矩阵
    // var t = world.transform;
    // // 以下属性为圆形碰撞组件特有属性
    // var r = world.radius;
    // var p = world.position;
    // // 以下属性为 矩形 和 多边形 碰
    // 1st step
    // get pre aabb, go back before collision

    var otherAabb = other.world.aabb;
    var otherPreAabb = other.world.preAabb.clone();
    var selfAabb = self.world.aabb;
    var selfPreAabb = self.world.preAabb.clone(); //cc.log(otherAabb,otherPreAabb);
    // // 2nd step
    // //向前x轴，检查x轴是否碰撞
    // selfPreAabb.x = selfAabb.x;
    // otherPreAabb.x = otherAabb.x;
    // if (cc.Intersection.rectRect(selfPreAabb, otherPreAabb)) {
    //     if (this.speed.x < 0 && (selfPreAabb.xMax > otherPreAabb.xMax)) {
    //         this.node.x = otherPreAabb.xMax - this.node.parent.x;
    //         this.collisionX = -1;
    //     }
    //     else if (this.speed.x > 0 && (selfPreAabb.xMin < otherPreAabb.xMin)) {
    //         this.node.x = otherPreAabb.xMin - selfPreAabb.width - this.node.parent.x;
    //         this.collisionX = 1;
    //     }
    //
    //     this.speed.x = 0;
    //     other.touchingX = true;
    //     return;s
    // }
  },

  /**
   * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用
   * @param  {Collider} other 产生碰撞的另一个碰撞组件
   * @param  {Collider} self  产生碰撞的自身的碰撞组件
   */
  onCollisionStay: function onCollisionStay(other, self) {
    console.log('on collision stay');
  },

  /**
   * 当碰撞结束后调用
   * @param  {Collider} other 产生碰撞的另一个碰撞组件
   * @param  {Collider} self  产生碰撞的自身的碰撞组件
   */
  onCollisionExit: function onCollisionExit(other, self) {
    console.log('on collision exit');
    this.touchingNumber--;

    if (this.touchingNumber === 0) {
      this.node.color = cc.Color.WHITE;
    }
  },
  onDestroy: function onDestroy() {},
  update: function update(dt) {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/test/move.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '604b8kuPUZHsZxGPZzSnsbk', 'move');
// Script/test/move.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    target: cc.Node,
    speedX: 10,
    speedY: 10
  },
  onLoad: function onLoad() {
    this.targetRect = cc.rect(0, 0, 100, 100);
  },
  start: function start() {},
  onDestroy: function onDestroy() {},
  update: function update(dt) {
    this.node.x--; //cc.log(this.node.width, this.node.height)
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx0ZXN0XFxtb3ZlLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwidGFyZ2V0IiwiTm9kZSIsInNwZWVkWCIsInNwZWVkWSIsIm9uTG9hZCIsInRhcmdldFJlY3QiLCJyZWN0Iiwic3RhcnQiLCJvbkRlc3Ryb3kiLCJ1cGRhdGUiLCJkdCIsIm5vZGUiLCJ4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsTUFBTSxFQUFFSixFQUFFLENBQUNLLElBREg7QUFFUkMsSUFBQUEsTUFBTSxFQUFFLEVBRkE7QUFHUkMsSUFBQUEsTUFBTSxFQUFFO0FBSEEsR0FGUDtBQU9MQyxFQUFBQSxNQVBLLG9CQU9JO0FBQ0wsU0FBS0MsVUFBTCxHQUFrQlQsRUFBRSxDQUFDVSxJQUFILENBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxHQUFkLEVBQW1CLEdBQW5CLENBQWxCO0FBQ0gsR0FUSTtBQVVMQyxFQUFBQSxLQVZLLG1CQVVHLENBQ1AsQ0FYSTtBQVlMQyxFQUFBQSxTQVpLLHVCQVlPLENBQ1gsQ0FiSTtBQWNMQyxFQUFBQSxNQWRLLGtCQWNFQyxFQWRGLEVBY007QUFDUCxTQUFLQyxJQUFMLENBQVVDLENBQVYsR0FETyxDQUVQO0FBQ0g7QUFqQkksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHRhcmdldDogY2MuTm9kZSxcclxuICAgICAgICBzcGVlZFg6IDEwLFxyXG4gICAgICAgIHNwZWVkWTogMTBcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRSZWN0ID0gY2MucmVjdCgwLCAwLCAxMDAsIDEwMCk7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZShkdCkge1xyXG4gICAgICAgIHRoaXMubm9kZS54LS07XHJcbiAgICAgICAgLy9jYy5sb2codGhpcy5ub2RlLndpZHRoLCB0aGlzLm5vZGUuaGVpZ2h0KVxyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youMove.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0c05dYfAxNHo5LBj6+5Y6AY', 'youMove');
// Script/you/youMove.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdU1vdmUuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQlEsR0FGUDtBQW9CTEMsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkk7QUFzQkxDLEVBQUFBLE1BdEJLLG9CQXNCSSxDQUNSLENBdkJJO0FBd0JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsS0FoQ0ssbUJBZ0NHLENBQ1AsQ0FqQ0ksQ0FrQ0w7O0FBbENLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcclxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgIHRvb2x0aXA6IFwi5o+P6L+wdGlwc1wiXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBiYXI6IHtcclxuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XHJcbiAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy/lvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgIJcclxuICAgIC8vIG9uRW5hYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8vIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICAvLyBvbkRpc2FibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youSend.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0a875CT+dRLhIBDhx+q1WhJ', 'youSend');
// Script/you/youSend.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdVNlbmQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQlEsR0FGUDtBQW9CTEMsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkk7QUFzQkxDLEVBQUFBLE1BdEJLLG9CQXNCSSxDQUNSLENBdkJJO0FBd0JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsS0FoQ0ssbUJBZ0NHLENBQ1AsQ0FqQ0ksQ0FrQ0w7O0FBbENLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcclxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgIHRvb2x0aXA6IFwi5o+P6L+wdGlwc1wiXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBiYXI6IHtcclxuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XHJcbiAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy/lvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgIJcclxuICAgIC8vIG9uRW5hYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8vIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICAvLyBvbkRpc2FibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youSetting.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '64f2c/qTZJGKZYt8yzF5BCO', 'youSetting');
// Script/you/youSetting.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdVNldHRpbmcuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQlEsR0FGUDtBQW9CTEMsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkk7QUFzQkxDLEVBQUFBLE1BdEJLLG9CQXNCSSxDQUNSLENBdkJJO0FBd0JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsS0FoQ0ssbUJBZ0NHLENBQ1AsQ0FqQ0ksQ0FrQ0w7O0FBbENLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcclxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgIHRvb2x0aXA6IFwi5o+P6L+wdGlwc1wiXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBiYXI6IHtcclxuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XHJcbiAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy/lvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgIJcclxuICAgIC8vIG9uRW5hYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8vIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICAvLyBvbkRpc2FibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youFind.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'cd0afIrsF5DWYcyQJ5icYUu', 'youFind');
// Script/you/youFind.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdUZpbmQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQlEsR0FGUDtBQW9CTEMsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkk7QUFzQkxDLEVBQUFBLE1BdEJLLG9CQXNCSSxDQUNSLENBdkJJO0FBd0JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsS0FoQ0ssbUJBZ0NHLENBQ1AsQ0FqQ0ksQ0FrQ0w7O0FBbENLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcclxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgIHRvb2x0aXA6IFwi5o+P6L+wdGlwc1wiXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBiYXI6IHtcclxuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XHJcbiAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy/lvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgIJcclxuICAgIC8vIG9uRW5hYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8vIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICAvLyBvbkRpc2FibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/roleHp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b33dfeL3RtOPbJAJ9XMFEdQ', 'roleHp');
// Script/zhujie/roleHp.js

"use strict";

var HpComponent = require("hpComponent"); //池子组件


cc.Class({
  "extends": HpComponent,
  properties: {
    progressBar: cc.ProgressBar,
    totalHp: 1000
  },
  //受到的伤害
  onHurt: function onHurt(value) {
    this.curHp -= value;
    this.isShow = true;
    this.progressBar.node.opacity = 255;
    this.showTime = 0;
    this.updateBar();

    if (this.curHp <= 0) {
      this.node.emit("death");
      this.parent.emit("death");
    }
  },
  onDestroy: function onDestroy() {},
  updateBar: function updateBar() {
    var progress = (this.curHp / this.totalHp).format();
    this.progressBar.progress = progress;
    game.emit("zhujiaoXue", this.curHp, this.totalHp);
  },
  //碰撞检测到
  onCollisionEnter: function onCollisionEnter(other, self) {
    var hurt = other.node.getComponent("hurt");
    if (!hurt || hurt.hurtValue == 0) return;
    this.curHp -= hurt.hurtValue;
    hurt.end();
    this.isShow = true;
    this.progressBar.node.opacity = 255;
    this.showTime = 0;
    this.updateBar();

    if (this.curHp <= 0) {
      this.node.emit("death");
      this.parent.emit("death");
    }
  },
  onCollisionStay: function onCollisionStay(other, self) {},
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {// cc.log("碰撞退出")
  },
  onLoad: function onLoad() {
    var weaponData = require("zhujueConfig");

    this.totalHp = weaponData.hp;
    this.curHp = this.totalHp;
    this.parent = this.node.parent;
    this.updateBar();
    this.showTime = 0;
    this.isShow = false;
    this.progressBar.node.opacity = 0;
  },
  start: function start() {},
  update: function update(dt) {
    this.showTime += dt;

    if (this.isShow && this.showTime > 2) {
      this.isShow = false;
      this.progressBar.node.opacity = 0;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx6aHVqaWVcXHJvbGVIcC5qcyJdLCJuYW1lcyI6WyJIcENvbXBvbmVudCIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwicHJvcGVydGllcyIsInByb2dyZXNzQmFyIiwiUHJvZ3Jlc3NCYXIiLCJ0b3RhbEhwIiwib25IdXJ0IiwidmFsdWUiLCJjdXJIcCIsImlzU2hvdyIsIm5vZGUiLCJvcGFjaXR5Iiwic2hvd1RpbWUiLCJ1cGRhdGVCYXIiLCJlbWl0IiwicGFyZW50Iiwib25EZXN0cm95IiwicHJvZ3Jlc3MiLCJmb3JtYXQiLCJnYW1lIiwib25Db2xsaXNpb25FbnRlciIsIm90aGVyIiwic2VsZiIsImh1cnQiLCJnZXRDb21wb25lbnQiLCJodXJ0VmFsdWUiLCJlbmQiLCJvbkNvbGxpc2lvblN0YXkiLCJvbkNvbGxpc2lvbkV4aXQiLCJvbkxvYWQiLCJ3ZWFwb25EYXRhIiwiaHAiLCJzdGFydCIsInVwZGF0ZSIsImR0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBekIsRUFBMEM7OztBQUMxQ0MsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTSCxXQURKO0FBRUxJLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxXQUFXLEVBQUVILEVBQUUsQ0FBQ0ksV0FEUjtBQUVSQyxJQUFBQSxPQUFPLEVBQUU7QUFGRCxHQUZQO0FBTUw7QUFDQUMsRUFBQUEsTUFQSyxrQkFPRUMsS0FQRixFQU9TO0FBQ1YsU0FBS0MsS0FBTCxJQUFjRCxLQUFkO0FBQ0EsU0FBS0UsTUFBTCxHQUFjLElBQWQ7QUFDQSxTQUFLTixXQUFMLENBQWlCTyxJQUFqQixDQUFzQkMsT0FBdEIsR0FBZ0MsR0FBaEM7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS0MsU0FBTDs7QUFDQSxRQUFJLEtBQUtMLEtBQUwsSUFBYyxDQUFsQixFQUFxQjtBQUNqQixXQUFLRSxJQUFMLENBQVVJLElBQVYsQ0FBZSxPQUFmO0FBQ0EsV0FBS0MsTUFBTCxDQUFZRCxJQUFaLENBQWlCLE9BQWpCO0FBQ0g7QUFDSixHQWpCSTtBQWtCTEUsRUFBQUEsU0FsQkssdUJBa0JPLENBQ1gsQ0FuQkk7QUFvQkxILEVBQUFBLFNBcEJLLHVCQW9CTztBQUNSLFFBQUlJLFFBQVEsR0FBRyxDQUFDLEtBQUtULEtBQUwsR0FBYSxLQUFLSCxPQUFuQixFQUE0QmEsTUFBNUIsRUFBZjtBQUNBLFNBQUtmLFdBQUwsQ0FBaUJjLFFBQWpCLEdBQTRCQSxRQUE1QjtBQUNBRSxJQUFBQSxJQUFJLENBQUNMLElBQUwsQ0FBVSxZQUFWLEVBQXdCLEtBQUtOLEtBQTdCLEVBQW9DLEtBQUtILE9BQXpDO0FBQ0gsR0F4Qkk7QUF5Qkw7QUFDQWUsRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3JDLFFBQUlDLElBQUksR0FBR0YsS0FBSyxDQUFDWCxJQUFOLENBQVdjLFlBQVgsQ0FBd0IsTUFBeEIsQ0FBWDtBQUNBLFFBQUksQ0FBQ0QsSUFBRCxJQUFTQSxJQUFJLENBQUNFLFNBQUwsSUFBa0IsQ0FBL0IsRUFBa0M7QUFDbEMsU0FBS2pCLEtBQUwsSUFBY2UsSUFBSSxDQUFDRSxTQUFuQjtBQUNBRixJQUFBQSxJQUFJLENBQUNHLEdBQUw7QUFDQSxTQUFLakIsTUFBTCxHQUFjLElBQWQ7QUFDQSxTQUFLTixXQUFMLENBQWlCTyxJQUFqQixDQUFzQkMsT0FBdEIsR0FBZ0MsR0FBaEM7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS0MsU0FBTDs7QUFDQSxRQUFJLEtBQUtMLEtBQUwsSUFBYyxDQUFsQixFQUFxQjtBQUNqQixXQUFLRSxJQUFMLENBQVVJLElBQVYsQ0FBZSxPQUFmO0FBQ0EsV0FBS0MsTUFBTCxDQUFZRCxJQUFaLENBQWlCLE9BQWpCO0FBQ0g7QUFDSixHQXZDSTtBQXdDTGEsRUFBQUEsZUFBZSxFQUFFLHlCQUFVTixLQUFWLEVBQWlCQyxJQUFqQixFQUF1QixDQUN2QyxDQXpDSTtBQTBDTDtBQUNBTSxFQUFBQSxlQUFlLEVBQUUseUJBQVVQLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCLENBQ3BDO0FBQ0gsR0E3Q0k7QUE4Q0xPLEVBQUFBLE1BOUNLLG9CQThDSTtBQUNMLFFBQUlDLFVBQVUsR0FBRy9CLE9BQU8sQ0FBQyxjQUFELENBQXhCOztBQUNBLFNBQUtNLE9BQUwsR0FBZXlCLFVBQVUsQ0FBQ0MsRUFBMUI7QUFDQSxTQUFLdkIsS0FBTCxHQUFhLEtBQUtILE9BQWxCO0FBQ0EsU0FBS1UsTUFBTCxHQUFjLEtBQUtMLElBQUwsQ0FBVUssTUFBeEI7QUFDQSxTQUFLRixTQUFMO0FBQ0EsU0FBS0QsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtILE1BQUwsR0FBYyxLQUFkO0FBQ0EsU0FBS04sV0FBTCxDQUFpQk8sSUFBakIsQ0FBc0JDLE9BQXRCLEdBQWdDLENBQWhDO0FBQ0gsR0F2REk7QUF3RExxQixFQUFBQSxLQXhESyxtQkF3REcsQ0FDUCxDQXpESTtBQTBETEMsRUFBQUEsTUExREssa0JBMERFQyxFQTFERixFQTBETTtBQUNQLFNBQUt0QixRQUFMLElBQWlCc0IsRUFBakI7O0FBQ0EsUUFBSSxLQUFLekIsTUFBTCxJQUFlLEtBQUtHLFFBQUwsR0FBZ0IsQ0FBbkMsRUFBc0M7QUFDbEMsV0FBS0gsTUFBTCxHQUFjLEtBQWQ7QUFDQSxXQUFLTixXQUFMLENBQWlCTyxJQUFqQixDQUFzQkMsT0FBdEIsR0FBZ0MsQ0FBaEM7QUFDSDtBQUNKO0FBaEVJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBIcENvbXBvbmVudCA9IHJlcXVpcmUoXCJocENvbXBvbmVudFwiKTsgLy/msaDlrZDnu4Tku7ZcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogSHBDb21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgcHJvZ3Jlc3NCYXI6IGNjLlByb2dyZXNzQmFyLFxyXG4gICAgICAgIHRvdGFsSHA6IDEwMDBcclxuICAgIH0sXHJcbiAgICAvL+WPl+WIsOeahOS8pOWus1xyXG4gICAgb25IdXJ0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jdXJIcCAtPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmlzU2hvdyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCYXIoKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJIcCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFwiZGVhdGhcIik7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmVtaXQoXCJkZWF0aFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZUJhcigpIHtcclxuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAodGhpcy5jdXJIcCAvIHRoaXMudG90YWxIcCkuZm9ybWF0KCk7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgICAgIGdhbWUuZW1pdChcInpodWppYW9YdWVcIiwgdGhpcy5jdXJIcCwgdGhpcy50b3RhbEhwKTtcclxuICAgIH0sXHJcbiAgICAvL+eisOaSnuajgOa1i+WIsFxyXG4gICAgb25Db2xsaXNpb25FbnRlcjogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICAgICAgdmFyIGh1cnQgPSBvdGhlci5ub2RlLmdldENvbXBvbmVudChcImh1cnRcIik7XHJcbiAgICAgICAgaWYgKCFodXJ0IHx8IGh1cnQuaHVydFZhbHVlID09IDApIHJldHVybjtcclxuICAgICAgICB0aGlzLmN1ckhwIC09IGh1cnQuaHVydFZhbHVlO1xyXG4gICAgICAgIGh1cnQuZW5kKCk7XHJcbiAgICAgICAgdGhpcy5pc1Nob3cgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIubm9kZS5vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgIHRoaXMuc2hvd1RpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQmFyKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VySHAgPD0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuZW1pdChcImRlYXRoXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5lbWl0KFwiZGVhdGhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uQ29sbGlzaW9uU3RheTogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICB9LFxyXG4gICAgLy/norDmkp7pgIDlh7pcclxuICAgIG9uQ29sbGlzaW9uRXhpdDogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICAgICAgLy8gY2MubG9nKFwi56Kw5pKe6YCA5Ye6XCIpXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHZhciB3ZWFwb25EYXRhID0gcmVxdWlyZShcInpodWp1ZUNvbmZpZ1wiKTtcclxuICAgICAgICB0aGlzLnRvdGFsSHAgPSB3ZWFwb25EYXRhLmhwO1xyXG4gICAgICAgIHRoaXMuY3VySHAgPSB0aGlzLnRvdGFsSHA7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLm5vZGUucGFyZW50O1xyXG4gICAgICAgIHRoaXMudXBkYXRlQmFyKCk7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLm5vZGUub3BhY2l0eSA9IDA7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlKGR0KSB7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSArPSBkdDtcclxuICAgICAgICBpZiAodGhpcy5pc1Nob3cgJiYgdGhpcy5zaG93VGltZSA+IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5ub2RlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youControl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '451baXA8vNPnrj2WORFfXWD', 'youControl');
// Script/you/youControl.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdUNvbnRyb2wuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQlEsR0FGUDtBQW9CTEMsRUFBQUEsU0FwQkssdUJBb0JPLENBQ1gsQ0FyQkk7QUFzQkxDLEVBQUFBLE1BdEJLLG9CQXNCSSxDQUNSLENBdkJJO0FBd0JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsS0FoQ0ssbUJBZ0NHLENBQ1AsQ0FqQ0ksQ0FrQ0w7O0FBbENLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcclxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgIHRvb2x0aXA6IFwi5o+P6L+wdGlwc1wiXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBiYXI6IHtcclxuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XHJcbiAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgfSxcclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG4gICAgLy/lvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgIJcclxuICAgIC8vIG9uRW5hYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8vIC8v5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCXHJcbiAgICAvLyBvbkRpc2FibGUoKSB7XHJcbiAgICAvLyB9LFxyXG4gICAgLy/or6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgIJcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/roleFind.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '00e85gV5ClN0rl+w+GCQY6l', 'roleFind');
// Script/zhujie/roleFind.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": cc.Component,
  properties: {
    hero: cc.Node
  },
  unuse: function unuse() {
    game.off("aim", this.aim, this);
  },
  reuse: function reuse(data) {
    this.targets = []; //game.off("aim", this.aim, this);
  },
  onLoad: function onLoad() {
    this.targets = [];
    game.on("aim", this.aim, this);
  },
  aim: function aim(flg) {
    this.aimFlg = flg;
  },
  //碰撞进入
  onCollisionEnter: function onCollisionEnter(other, self) {
    if (game.isOver) return;
    if (this.node.isDeath) return;
    var node = other.node;

    if (this.targets.indexOf(node) < 0) {
      this.targets.push(node);
    }

    this.aimPos();
  },
  aimPos: function aimPos() {
    if (!this.hero || !this.aimFlg || !this.targets || this.targets.length == 0) return;
    var pos = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
    this.targets.sort(function (a, b) {
      var pos1 = a.convertToWorldSpaceAR(cc.v2(0, 0));
      var pos2 = b.convertToWorldSpaceAR(cc.v2(0, 0));
      var len1 = game.gameUtils.getLength(pos1, pos);
      var len2 = game.gameUtils.getLength(pos2, pos);
      return len1 - len2;
    });
    var target = this.targets[0];
    pos = target.convertToWorldSpaceAR(cc.v2(0, 50));
    this.hero.emit("aimPos", pos);
  },
  //碰撞停留
  onCollisionStay: function onCollisionStay(other, self) {
    this.aimPos();
  },
  //碰撞退出
  onCollisionExit: function onCollisionExit(other, self) {
    if (game.isOver) return;
    if (this.node.isDeath) return;
    var node = other.node;
    var idx = this.targets.indexOf(node);

    if (idx >= 0) {
      this.targets.splice(idx, 1);
    }

    this.aimPos();
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx6aHVqaWVcXHJvbGVGaW5kLmpzIl0sIm5hbWVzIjpbIlBvb2xDb21wb25lbnQiLCJyZXF1aXJlIiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJoZXJvIiwiTm9kZSIsInVudXNlIiwiZ2FtZSIsIm9mZiIsImFpbSIsInJldXNlIiwiZGF0YSIsInRhcmdldHMiLCJvbkxvYWQiLCJvbiIsImZsZyIsImFpbUZsZyIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvdGhlciIsInNlbGYiLCJpc092ZXIiLCJub2RlIiwiaXNEZWF0aCIsImluZGV4T2YiLCJwdXNoIiwiYWltUG9zIiwibGVuZ3RoIiwicG9zIiwiY29udmVydFRvV29ybGRTcGFjZUFSIiwidjIiLCJzb3J0IiwiYSIsImIiLCJwb3MxIiwicG9zMiIsImxlbjEiLCJnYW1lVXRpbHMiLCJnZXRMZW5ndGgiLCJsZW4yIiwidGFyZ2V0IiwiZW1pdCIsIm9uQ29sbGlzaW9uU3RheSIsIm9uQ29sbGlzaW9uRXhpdCIsImlkeCIsInNwbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTNCLEVBQThDOzs7QUFDOUNDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUVKLEVBQUUsQ0FBQ0s7QUFERCxHQUZQO0FBS0xDLEVBQUFBLEtBQUssRUFBRSxpQkFBWTtBQUNmQyxJQUFBQSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxLQUFULEVBQWdCLEtBQUtDLEdBQXJCLEVBQTBCLElBQTFCO0FBQ0gsR0FQSTtBQVFMQyxFQUFBQSxLQUFLLEVBQUUsZUFBVUMsSUFBVixFQUFnQjtBQUNuQixTQUFLQyxPQUFMLEdBQWUsRUFBZixDQURtQixDQUVuQjtBQUNILEdBWEk7QUFZTEMsRUFBQUEsTUFaSyxvQkFZSTtBQUNMLFNBQUtELE9BQUwsR0FBZSxFQUFmO0FBQ0FMLElBQUFBLElBQUksQ0FBQ08sRUFBTCxDQUFRLEtBQVIsRUFBZSxLQUFLTCxHQUFwQixFQUF5QixJQUF6QjtBQUNILEdBZkk7QUFnQkxBLEVBQUFBLEdBaEJLLGVBZ0JETSxHQWhCQyxFQWdCSTtBQUNMLFNBQUtDLE1BQUwsR0FBY0QsR0FBZDtBQUNILEdBbEJJO0FBbUJMO0FBQ0FFLEVBQUFBLGdCQUFnQixFQUFFLDBCQUFVQyxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUNyQyxRQUFJWixJQUFJLENBQUNhLE1BQVQsRUFBaUI7QUFDakIsUUFBSSxLQUFLQyxJQUFMLENBQVVDLE9BQWQsRUFBdUI7QUFDdkIsUUFBSUQsSUFBSSxHQUFHSCxLQUFLLENBQUNHLElBQWpCOztBQUNBLFFBQUksS0FBS1QsT0FBTCxDQUFhVyxPQUFiLENBQXFCRixJQUFyQixJQUE2QixDQUFqQyxFQUFvQztBQUNoQyxXQUFLVCxPQUFMLENBQWFZLElBQWIsQ0FBa0JILElBQWxCO0FBQ0g7O0FBQ0QsU0FBS0ksTUFBTDtBQUNILEdBNUJJO0FBNkJMQSxFQUFBQSxNQTdCSyxvQkE2Qkk7QUFDTCxRQUFJLENBQUMsS0FBS3JCLElBQU4sSUFBYyxDQUFDLEtBQUtZLE1BQXBCLElBQThCLENBQUMsS0FBS0osT0FBcEMsSUFBK0MsS0FBS0EsT0FBTCxDQUFhYyxNQUFiLElBQXVCLENBQTFFLEVBQTZFO0FBQzdFLFFBQUlDLEdBQUcsR0FBRyxLQUFLTixJQUFMLENBQVVPLHFCQUFWLENBQWdDNUIsRUFBRSxDQUFDNkIsRUFBSCxDQUFNLENBQU4sRUFBUyxDQUFULENBQWhDLENBQVY7QUFDQSxTQUFLakIsT0FBTCxDQUFha0IsSUFBYixDQUFrQixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDOUIsVUFBSUMsSUFBSSxHQUFHRixDQUFDLENBQUNILHFCQUFGLENBQXdCNUIsRUFBRSxDQUFDNkIsRUFBSCxDQUFNLENBQU4sRUFBUyxDQUFULENBQXhCLENBQVg7QUFDQSxVQUFJSyxJQUFJLEdBQUdGLENBQUMsQ0FBQ0oscUJBQUYsQ0FBd0I1QixFQUFFLENBQUM2QixFQUFILENBQU0sQ0FBTixFQUFTLENBQVQsQ0FBeEIsQ0FBWDtBQUNBLFVBQUlNLElBQUksR0FBRzVCLElBQUksQ0FBQzZCLFNBQUwsQ0FBZUMsU0FBZixDQUF5QkosSUFBekIsRUFBK0JOLEdBQS9CLENBQVg7QUFDQSxVQUFJVyxJQUFJLEdBQUcvQixJQUFJLENBQUM2QixTQUFMLENBQWVDLFNBQWYsQ0FBeUJILElBQXpCLEVBQStCUCxHQUEvQixDQUFYO0FBQ0EsYUFBT1EsSUFBSSxHQUFHRyxJQUFkO0FBQ0gsS0FORDtBQU9BLFFBQUlDLE1BQU0sR0FBRyxLQUFLM0IsT0FBTCxDQUFhLENBQWIsQ0FBYjtBQUNBZSxJQUFBQSxHQUFHLEdBQUdZLE1BQU0sQ0FBQ1gscUJBQVAsQ0FBNkI1QixFQUFFLENBQUM2QixFQUFILENBQU0sQ0FBTixFQUFTLEVBQVQsQ0FBN0IsQ0FBTjtBQUNBLFNBQUt6QixJQUFMLENBQVVvQyxJQUFWLENBQWUsUUFBZixFQUF5QmIsR0FBekI7QUFDSCxHQTFDSTtBQTJDTDtBQUNBYyxFQUFBQSxlQUFlLEVBQUUseUJBQVV2QixLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUNwQyxTQUFLTSxNQUFMO0FBQ0gsR0E5Q0k7QUErQ0w7QUFDQWlCLEVBQUFBLGVBQWUsRUFBRSx5QkFBVXhCLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQ3BDLFFBQUlaLElBQUksQ0FBQ2EsTUFBVCxFQUFpQjtBQUNqQixRQUFJLEtBQUtDLElBQUwsQ0FBVUMsT0FBZCxFQUF1QjtBQUN2QixRQUFJRCxJQUFJLEdBQUdILEtBQUssQ0FBQ0csSUFBakI7QUFDQSxRQUFJc0IsR0FBRyxHQUFHLEtBQUsvQixPQUFMLENBQWFXLE9BQWIsQ0FBcUJGLElBQXJCLENBQVY7O0FBQ0EsUUFBSXNCLEdBQUcsSUFBSSxDQUFYLEVBQWM7QUFDVixXQUFLL0IsT0FBTCxDQUFhZ0MsTUFBYixDQUFvQkQsR0FBcEIsRUFBeUIsQ0FBekI7QUFDSDs7QUFDRCxTQUFLbEIsTUFBTDtBQUNIO0FBekRJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQb29sQ29tcG9uZW50ID0gcmVxdWlyZShcIlBvb2xDb21wb25lbnRcIik7IC8v5rGg5a2Q57uE5Lu2XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBoZXJvOiBjYy5Ob2RlXHJcbiAgICB9LFxyXG4gICAgdW51c2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBnYW1lLm9mZihcImFpbVwiLCB0aGlzLmFpbSwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgcmV1c2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRzID0gW107XHJcbiAgICAgICAgLy9nYW1lLm9mZihcImFpbVwiLCB0aGlzLmFpbSwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xyXG4gICAgICAgIGdhbWUub24oXCJhaW1cIiwgdGhpcy5haW0sIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGFpbShmbGcpIHtcclxuICAgICAgICB0aGlzLmFpbUZsZyA9IGZsZztcclxuICAgIH0sXHJcbiAgICAvL+eisOaSnui/m+WFpVxyXG4gICAgb25Db2xsaXNpb25FbnRlcjogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICAgICAgaWYgKGdhbWUuaXNPdmVyKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZS5pc0RlYXRoKSByZXR1cm47XHJcbiAgICAgICAgbGV0IG5vZGUgPSBvdGhlci5ub2RlO1xyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldHMuaW5kZXhPZihub2RlKSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWltUG9zKCk7XHJcbiAgICB9LFxyXG4gICAgYWltUG9zKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oZXJvIHx8ICF0aGlzLmFpbUZsZyB8fCAhdGhpcy50YXJnZXRzIHx8IHRoaXMudGFyZ2V0cy5sZW5ndGggPT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIGxldCBwb3MgPSB0aGlzLm5vZGUuY29udmVydFRvV29ybGRTcGFjZUFSKGNjLnYyKDAsIDApKTtcclxuICAgICAgICB0aGlzLnRhcmdldHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICBsZXQgcG9zMSA9IGEuY29udmVydFRvV29ybGRTcGFjZUFSKGNjLnYyKDAsIDApKTtcclxuICAgICAgICAgICAgbGV0IHBvczIgPSBiLmNvbnZlcnRUb1dvcmxkU3BhY2VBUihjYy52MigwLCAwKSk7XHJcbiAgICAgICAgICAgIGxldCBsZW4xID0gZ2FtZS5nYW1lVXRpbHMuZ2V0TGVuZ3RoKHBvczEsIHBvcyk7XHJcbiAgICAgICAgICAgIGxldCBsZW4yID0gZ2FtZS5nYW1lVXRpbHMuZ2V0TGVuZ3RoKHBvczIsIHBvcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBsZW4xIC0gbGVuMjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy50YXJnZXRzWzBdO1xyXG4gICAgICAgIHBvcyA9IHRhcmdldC5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIoY2MudjIoMCwgNTApKTtcclxuICAgICAgICB0aGlzLmhlcm8uZW1pdChcImFpbVBvc1wiLCBwb3MpO1xyXG4gICAgfSxcclxuICAgIC8v56Kw5pKe5YGc55WZXHJcbiAgICBvbkNvbGxpc2lvblN0YXk6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIHRoaXMuYWltUG9zKCk7XHJcbiAgICB9LFxyXG4gICAgLy/norDmkp7pgIDlh7pcclxuICAgIG9uQ29sbGlzaW9uRXhpdDogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XHJcbiAgICAgICAgaWYgKGdhbWUuaXNPdmVyKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZS5pc0RlYXRoKSByZXR1cm47XHJcbiAgICAgICAgbGV0IG5vZGUgPSBvdGhlci5ub2RlO1xyXG4gICAgICAgIGxldCBpZHggPSB0aGlzLnRhcmdldHMuaW5kZXhPZihub2RlKTtcclxuICAgICAgICBpZiAoaWR4ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFpbVBvcygpO1xyXG4gICAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/roleMove.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6fc86RgnPlPjLOL8x/OVTmI', 'roleMove');
// Script/zhujie/roleMove.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    maxSpeed: 300,
    //最大速度
    jumps: 2,
    //跳跃次数
    //acceleration: 1500,//加速度
    jumpSpeed: 500,
    //跳跃速度
    drag: 600 //拖拽速度

  },
  onLoad: function onLoad() {
    this._moveFlags = 0;
    this.node.roleState = this.roleState = 0; //角色状态  0=静止 1=移动 2=跳跃

    this._up = false;
    this.body = this.getComponent(cc.RigidBody);
    this.jumping = false;
    this.node.on("key_down", this.onKeyDown, this);
    this.node.on("key_up", this.onKeyUp, this);
    this.node.zIndex = 10;
    this._lastX = 0;
  },
  onDestroy: function onDestroy() {
    this.node.off("key_down", this.onKeyDown, this);
    this.node.off("key_up", this.onKeyUp, this);
  },
  onKeyDown: function onKeyDown(data) {
    if (game.isOver) return;

    switch (data) {
      case game.gameControl.left:
        this._moveFlags |= game.gameAction.MOVE_LEFT;
        break;

      case game.gameControl.right:
        this._moveFlags |= game.gameAction.MOVE_RIGHT;
        break;

      case game.gameControl.up:
        if (!this._upPressed) {
          this._up = true;
        }

        this._upPressed = true;
        break;

      case game.gameControl.down:
        //this.node.emit("switchSkin");//更改方向
        break;

      case game.gameControl.weapons:
        this.node.emit("switchSkin"); //更改方向

        break;
    }
  },
  onKeyUp: function onKeyUp(data) {
    if (game.isOver) return;

    switch (data) {
      case game.gameControl.left:
        this._moveFlags &= ~game.gameAction.MOVE_LEFT;
        break;

      case game.gameControl.right:
        this._moveFlags &= ~game.gameAction.MOVE_RIGHT;
        break;

      case game.gameControl.down:
      case game.gameControl.up:
        this._upPressed = false;
        break;
    }
  },
  // 只在两个碰撞体开始接触时被调用一次
  onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
    this.jumping = false;
  },
  // 只在两个碰撞体结束接触时被调用一次
  onEndContact: function onEndContact(contact, selfCollider, otherCollider) {},
  // 每次将要处理碰撞体接触逻辑时被调用
  onPreSolve: function onPreSolve(contact, selfCollider, otherCollider) {},
  // 每次处理完碰撞体接触逻辑时被调用
  onPostSolve: function onPostSolve(contact, selfCollider, otherCollider) {},
  update: function update(dt) {
    if (game.isOver) return;
    var speed = this.body.linearVelocity;

    if (this._moveFlags === game.gameAction.MOVE_LEFT) {
      // speed.x -= this.acceleration * dt;
      // if (speed.x < -this.maxSpeed) {
      //     speed.x = -this.maxSpeed;
      // }
      speed.x = -this.maxSpeed;
      this.node.emit("changeDirection", -1); //更改方向
    } else if (this._moveFlags === game.gameAction.MOVE_RIGHT) {
      // speed.x += this.acceleration * dt;
      // if (speed.x > this.maxSpeed) {
      //     speed.x = this.maxSpeed;
      // }
      speed.x = this.maxSpeed;
      this.node.emit("changeDirection", 1); //更改方向
    } else {
      // if (speed.x != 0) {
      //     var d = this.drag * dt;
      //     if (Math.abs(speed.x) <= d) {
      //         speed.x = 0;
      //     } else {
      //         speed.x -= speed.x > 0 ? d : -d;
      //     }
      // }
      speed.x = 0;
    } //  cc.log(speed.x,speed.y);


    if (Math.abs(speed.y) < 1) {
      this.jumps = 2;
    }

    if (this.jumps > 0 && this._up) {
      speed.y = this.jumpSpeed;
      this.jumps--;
      this.setState(2);
      this.jumping = true;
    }

    this._up = false;

    if (this.jumping == false) {
      if (speed.x > 0 || speed.x < 0) {
        this.setState(1);
      } else {
        this.setState(0);
      }
    }

    if (speed.x != 0) {
      if (speed.x < 0) {
        if (this.node.x < game.mapRect.x + 150) {
          speed.x = 0;
        }
      } else {
        if (this.node.x > game.mapRect.x + game.mapRect.width - 300) {
          speed.x = 0;
        }
      }

      if (speed.y == 0) {
        speed.y = 10;
      }
    }

    this._lastX = this.node.x;
    this.body.linearVelocity = speed;
  },
  //设置角色状态
  setState: function setState(value) {
    if (this.roleState == value) return;
    this.node.roleState = this.roleState = value;
    this.node.emit("roleState", this.roleState); //更改动作
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/you/youSpine.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b4a749gMFBLF4PauxkGV309', 'youSpine');
// Script/you/youSpine.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    //     tooltip: "描述tips"
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {},
  // LIFE-CYCLE CALLBACKS:
  //当该组件被启用，并且它的节点也激活时。
  // onEnable() {
  // },
  // //当该组件被禁用或节点变为无效时调用。
  // onDisable() {
  // },
  //该方法为生命周期方法，父类未必会有实现。
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx5b3VcXHlvdVNwaW5lLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25EZXN0cm95Iiwib25Mb2FkIiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBRUxDLEVBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaEJRLEdBRlA7QUFvQkxDLEVBQUFBLFNBcEJLLHVCQW9CTyxDQUNYLENBckJJO0FBc0JMQyxFQUFBQSxNQXRCSyxvQkFzQkksQ0FDUixDQXZCSTtBQXdCTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLEVBQUFBLEtBaENLLG1CQWdDRyxDQUNQLENBakNJLENBa0NMOztBQWxDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgLy8gZm9vOiB7XHJcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XHJcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxyXG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICAgIC8vICAgICB0b29sdGlwOiBcIuaPj+i/sHRpcHNcIlxyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gYmFyOiB7XHJcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xyXG4gICAgICAgIC8vICAgICB9LFxyXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH0sXHJcbiAgICB9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuICAgIC8v5b2T6K+l57uE5Lu26KKr5ZCv55So77yM5bm25LiU5a6D55qE6IqC54K55Lmf5r+A5rS75pe244CCXHJcbiAgICAvLyBvbkVuYWJsZSgpIHtcclxuICAgIC8vIH0sXHJcbiAgICAvLyAvL+W9k+ivpee7hOS7tuiiq+emgeeUqOaIluiKgueCueWPmOS4uuaXoOaViOaXtuiwg+eUqOOAglxyXG4gICAgLy8gb25EaXNhYmxlKCkge1xyXG4gICAgLy8gfSxcclxuICAgIC8v6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CCXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/spine.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '39590xoSFZGY5TRcc9v8z4g', 'spine');
// Script/zhujie/spine.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {},
  onLoad: function onLoad() {
    cc.log(new sp.spine.Vector2(1, 2));
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx6aHVqaWVcXHNwaW5lLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25EZXN0cm95Iiwib25Mb2FkIiwibG9nIiwic3AiLCJzcGluZSIsIlZlY3RvcjIiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFFTEMsRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsU0FISyx1QkFHTyxDQUNYLENBSkk7QUFLTEMsRUFBQUEsTUFMSyxvQkFLSTtBQUNMTCxJQUFBQSxFQUFFLENBQUNNLEdBQUgsQ0FBTyxJQUFJQyxFQUFFLENBQUNDLEtBQUgsQ0FBU0MsT0FBYixDQUFxQixDQUFyQixFQUF3QixDQUF4QixDQUFQO0FBQ0gsR0FQSTtBQVFMQyxFQUFBQSxLQVJLLG1CQVFHLENBQ1AsQ0FUSSxDQVVMOztBQVZLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBjYy5sb2cobmV3IHNwLnNwaW5lLlZlY3RvcjIoMSwgMikpO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/blow/bomb3.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'db6b74DbmZBSIRNOxkQmNf2', 'bomb3');
// Script/blow/bomb3.js

"use strict";

var PoolComponent = require("PoolComponent"); //池子组件


cc.Class({
  "extends": PoolComponent,
  properties: {},
  onLoad: function onLoad() {},
  //回收
  unuse: function unuse() {},
  //重用
  reuse: function reuse(data) {
    game.soundManager.playEffect(game.gameSound.dao_dan_bao_zha, false);
    this.init(data);
  },
  init: function init(data) {
    if (data.group) this.node.group = data.group;
    this.node.angle = data.angle;
    this.node.x = data.v.x;
    this.node.y = data.v.y; //结束动画

    var animation = this.node.getComponent(cc.Animation); //动画组件

    if (!this._isinit) {
      var spriteFrames = game.gameUtils.getSpriteFrames(game.bomb_atlas, data.aniName);
      var flashClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);
      flashClip.name = 'end';
      flashClip.wrapMode = cc.WrapMode.Normal;
      animation.addClip(flashClip);
      animation.play('end');
    } else {
      animation.playAdditive('end', 0);
    }

    animation.once("finished", function () {
      var pool = this.node.pool;

      if (pool) {
        pool.put(this.node);
      } else {
        this.node.removeFromParent(true);
        this.node.destroy();
      }
    }.bind(this));
  },
  start: function start() {},
  onDestroy: function onDestroy() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxibG93XFxib21iMy5qcyJdLCJuYW1lcyI6WyJQb29sQ29tcG9uZW50IiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwidW51c2UiLCJyZXVzZSIsImRhdGEiLCJnYW1lIiwic291bmRNYW5hZ2VyIiwicGxheUVmZmVjdCIsImdhbWVTb3VuZCIsImRhb19kYW5fYmFvX3poYSIsImluaXQiLCJncm91cCIsIm5vZGUiLCJhbmdsZSIsIngiLCJ2IiwieSIsImFuaW1hdGlvbiIsImdldENvbXBvbmVudCIsIkFuaW1hdGlvbiIsIl9pc2luaXQiLCJzcHJpdGVGcmFtZXMiLCJnYW1lVXRpbHMiLCJnZXRTcHJpdGVGcmFtZXMiLCJib21iX2F0bGFzIiwiYW5pTmFtZSIsImZsYXNoQ2xpcCIsIkFuaW1hdGlvbkNsaXAiLCJjcmVhdGVXaXRoU3ByaXRlRnJhbWVzIiwibmFtZSIsIndyYXBNb2RlIiwiV3JhcE1vZGUiLCJOb3JtYWwiLCJhZGRDbGlwIiwicGxheSIsInBsYXlBZGRpdGl2ZSIsIm9uY2UiLCJwb29sIiwicHV0IiwicmVtb3ZlRnJvbVBhcmVudCIsImRlc3Ryb3kiLCJiaW5kIiwic3RhcnQiLCJvbkRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUEzQixFQUE4Qzs7O0FBQzlDQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNILGFBREo7QUFFTEksRUFBQUEsVUFBVSxFQUFFLEVBRlA7QUFHTEMsRUFBQUEsTUFISyxvQkFHSSxDQUNSLENBSkk7QUFLTDtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVksQ0FDbEIsQ0FQSTtBQVFMO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxlQUFVQyxJQUFWLEVBQWdCO0FBQ25CQyxJQUFBQSxJQUFJLENBQUNDLFlBQUwsQ0FBa0JDLFVBQWxCLENBQTZCRixJQUFJLENBQUNHLFNBQUwsQ0FBZUMsZUFBNUMsRUFBNEQsS0FBNUQ7QUFDQSxTQUFLQyxJQUFMLENBQVVOLElBQVY7QUFDSCxHQVpJO0FBYUxNLEVBQUFBLElBYkssZ0JBYUFOLElBYkEsRUFhTTtBQUNQLFFBQUlBLElBQUksQ0FBQ08sS0FBVCxFQUFnQixLQUFLQyxJQUFMLENBQVVELEtBQVYsR0FBa0JQLElBQUksQ0FBQ08sS0FBdkI7QUFDaEIsU0FBS0MsSUFBTCxDQUFVQyxLQUFWLEdBQWtCVCxJQUFJLENBQUNTLEtBQXZCO0FBQ0EsU0FBS0QsSUFBTCxDQUFVRSxDQUFWLEdBQWNWLElBQUksQ0FBQ1csQ0FBTCxDQUFPRCxDQUFyQjtBQUNBLFNBQUtGLElBQUwsQ0FBVUksQ0FBVixHQUFjWixJQUFJLENBQUNXLENBQUwsQ0FBT0MsQ0FBckIsQ0FKTyxDQUtQOztBQUNBLFFBQUlDLFNBQVMsR0FBRyxLQUFLTCxJQUFMLENBQVVNLFlBQVYsQ0FBdUJwQixFQUFFLENBQUNxQixTQUExQixDQUFoQixDQU5PLENBTThDOztBQUNyRCxRQUFJLENBQUMsS0FBS0MsT0FBVixFQUFtQjtBQUNmLFVBQUlDLFlBQVksR0FBR2hCLElBQUksQ0FBQ2lCLFNBQUwsQ0FBZUMsZUFBZixDQUErQmxCLElBQUksQ0FBQ21CLFVBQXBDLEVBQWdEcEIsSUFBSSxDQUFDcUIsT0FBckQsQ0FBbkI7QUFDQSxVQUFJQyxTQUFTLEdBQUc1QixFQUFFLENBQUM2QixhQUFILENBQWlCQyxzQkFBakIsQ0FBd0NQLFlBQXhDLEVBQXNELEVBQXRELENBQWhCO0FBQ0FLLE1BQUFBLFNBQVMsQ0FBQ0csSUFBVixHQUFpQixLQUFqQjtBQUNBSCxNQUFBQSxTQUFTLENBQUNJLFFBQVYsR0FBcUJoQyxFQUFFLENBQUNpQyxRQUFILENBQVlDLE1BQWpDO0FBQ0FmLE1BQUFBLFNBQVMsQ0FBQ2dCLE9BQVYsQ0FBa0JQLFNBQWxCO0FBQ0FULE1BQUFBLFNBQVMsQ0FBQ2lCLElBQVYsQ0FBZSxLQUFmO0FBQ0gsS0FQRCxNQVFLO0FBQ0RqQixNQUFBQSxTQUFTLENBQUNrQixZQUFWLENBQXVCLEtBQXZCLEVBQThCLENBQTlCO0FBQ0g7O0FBQ0RsQixJQUFBQSxTQUFTLENBQUNtQixJQUFWLENBQWUsVUFBZixFQUEyQixZQUFZO0FBQ25DLFVBQUlDLElBQUksR0FBRyxLQUFLekIsSUFBTCxDQUFVeUIsSUFBckI7O0FBQ0EsVUFBSUEsSUFBSixFQUFVO0FBQ05BLFFBQUFBLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUsxQixJQUFkO0FBQ0gsT0FGRCxNQUdLO0FBQ0QsYUFBS0EsSUFBTCxDQUFVMkIsZ0JBQVYsQ0FBMkIsSUFBM0I7QUFDQSxhQUFLM0IsSUFBTCxDQUFVNEIsT0FBVjtBQUNIO0FBQ0osS0FUMEIsQ0FTekJDLElBVHlCLENBU3BCLElBVG9CLENBQTNCO0FBVUgsR0F6Q0k7QUEwQ0xDLEVBQUFBLEtBMUNLLG1CQTBDRyxDQUNQLENBM0NJO0FBNENMQyxFQUFBQSxTQTVDSyx1QkE0Q08sQ0FDWDtBQTdDSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUG9vbENvbXBvbmVudCA9IHJlcXVpcmUoXCJQb29sQ29tcG9uZW50XCIpOyAvL+axoOWtkOe7hOS7tlxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBQb29sQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge30sXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICB9LFxyXG4gICAgLy/lm57mlLZcclxuICAgIHVudXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB9LFxyXG4gICAgLy/ph43nlKhcclxuICAgIHJldXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGdhbWUuc291bmRNYW5hZ2VyLnBsYXlFZmZlY3QoZ2FtZS5nYW1lU291bmQuZGFvX2Rhbl9iYW9femhhLGZhbHNlKTtcclxuICAgICAgICB0aGlzLmluaXQoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaW5pdChkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuZ3JvdXApIHRoaXMubm9kZS5ncm91cCA9IGRhdGEuZ3JvdXA7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFuZ2xlID0gZGF0YS5hbmdsZTtcclxuICAgICAgICB0aGlzLm5vZGUueCA9IGRhdGEudi54O1xyXG4gICAgICAgIHRoaXMubm9kZS55ID0gZGF0YS52Lnk7XHJcbiAgICAgICAgLy/nu5PmnZ/liqjnlLtcclxuICAgICAgICBsZXQgYW5pbWF0aW9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pOy8v5Yqo55S757uE5Lu2XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc2luaXQpIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZUZyYW1lcyA9IGdhbWUuZ2FtZVV0aWxzLmdldFNwcml0ZUZyYW1lcyhnYW1lLmJvbWJfYXRsYXMsIGRhdGEuYW5pTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBmbGFzaENsaXAgPSBjYy5BbmltYXRpb25DbGlwLmNyZWF0ZVdpdGhTcHJpdGVGcmFtZXMoc3ByaXRlRnJhbWVzLCAyMCk7XHJcbiAgICAgICAgICAgIGZsYXNoQ2xpcC5uYW1lID0gJ2VuZCc7XHJcbiAgICAgICAgICAgIGZsYXNoQ2xpcC53cmFwTW9kZSA9IGNjLldyYXBNb2RlLk5vcm1hbDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLmFkZENsaXAoZmxhc2hDbGlwKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXkoJ2VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXlBZGRpdGl2ZSgnZW5kJywgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuaW1hdGlvbi5vbmNlKFwiZmluaXNoZWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgcG9vbCA9IHRoaXMubm9kZS5wb29sO1xyXG4gICAgICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICAgICAgcG9vbC5wdXQodGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5yZW1vdmVGcm9tUGFyZW50KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSlcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/roleSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dab16X/XyhK4ry5cx4QTZEG', 'roleSprite');
// Script/zhujie/roleSprite.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onDestroy: function onDestroy() {
    this.node.off("death", this.death, this);
  },
  addEvent: function addEvent() {
    this.node.on("death", this.death, this);
  },
  death: function death() {
    if (this.isDeath) return;
    this.node.isDeath = this.isDeath = true;
    this.node.getComponent(cc.BoxCollider).enabled = false;
  },
  onLoad: function onLoad() {
    this.node.isDeath = this.isDeath = false;
    this.addEvent();
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx6aHVqaWVcXHJvbGVTcHJpdGUuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkRlc3Ryb3kiLCJub2RlIiwib2ZmIiwiZGVhdGgiLCJhZGRFdmVudCIsIm9uIiwiaXNEZWF0aCIsImdldENvbXBvbmVudCIsIkJveENvbGxpZGVyIiwiZW5hYmxlZCIsIm9uTG9hZCIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxTQUhLLHVCQUdPO0FBQ1IsU0FBS0MsSUFBTCxDQUFVQyxHQUFWLENBQWMsT0FBZCxFQUF1QixLQUFLQyxLQUE1QixFQUFtQyxJQUFuQztBQUNILEdBTEk7QUFNTEMsRUFBQUEsUUFOSyxzQkFNTTtBQUNQLFNBQUtILElBQUwsQ0FBVUksRUFBVixDQUFhLE9BQWIsRUFBc0IsS0FBS0YsS0FBM0IsRUFBa0MsSUFBbEM7QUFDSCxHQVJJO0FBU0xBLEVBQUFBLEtBVEssbUJBU0c7QUFDSixRQUFJLEtBQUtHLE9BQVQsRUFBa0I7QUFDbEIsU0FBS0wsSUFBTCxDQUFVSyxPQUFWLEdBQW9CLEtBQUtBLE9BQUwsR0FBZSxJQUFuQztBQUNBLFNBQUtMLElBQUwsQ0FBVU0sWUFBVixDQUF1QlgsRUFBRSxDQUFDWSxXQUExQixFQUF1Q0MsT0FBdkMsR0FBaUQsS0FBakQ7QUFDSCxHQWJJO0FBY0xDLEVBQUFBLE1BZEssb0JBY0k7QUFDTCxTQUFLVCxJQUFMLENBQVVLLE9BQVYsR0FBb0IsS0FBS0EsT0FBTCxHQUFlLEtBQW5DO0FBQ0EsU0FBS0YsUUFBTDtBQUNILEdBakJJO0FBa0JMTyxFQUFBQSxLQWxCSyxtQkFrQkcsQ0FDUDtBQW5CSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLm5vZGUub2ZmKFwiZGVhdGhcIiwgdGhpcy5kZWF0aCwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgYWRkRXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKFwiZGVhdGhcIiwgdGhpcy5kZWF0aCwgdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgZGVhdGgoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWF0aCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMubm9kZS5pc0RlYXRoID0gdGhpcy5pc0RlYXRoID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLkJveENvbGxpZGVyKS5lbmFibGVkID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5pc0RlYXRoID0gdGhpcy5pc0RlYXRoID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudCgpO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/spineAction.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '52925FT5Z5J7J7AyDvE14Jp', 'spineAction');
// Script/zhujie/spineAction.js

"use strict";

cc.Class({
  //动画播放类
  "extends": cc.Component,
  properties: {},
  onLoad: function onLoad() {
    this.sp = this.node.getComponent(sp.Skeleton); //获取骨骼动画组件

    this.data = this.sp._skeleton.data; // SkeletonData 骨架数据

    this.animations = {};

    for (var i in this.data.animations) {
      this.animations[animation.name] = {
        trackIndex: parseInt(i),
        name: animation.name,
        duration: animation.duration
      };
    }

    this.weaponData = require("zhujueConfig"); //武器数据

    this.sp.setStartListener(function (trackEntry) {
      self.animationName = trackEntry.animation ? trackEntry.animation.name : "";

      if (self.animationName === 'attack1') {
        this.sp.timeScale = self.attackTimeScale1;
      } else if (self.animationName === 'attack2') {
        this.sp.timeScale = self.attackTimeScale2;
      } else {
        this.sp.timeScale = 1;
      }
    }.bind(this));
    this.sp.setCompleteListener(function (trackEntry) {
      var animationName = trackEntry.animation ? trackEntry.animation.name : "";

      if (animationName === 'attack1' || animationName === 'attack2') {}
    }.bind(this));
  },
  onDestroy: function onDestroy() {
    if (!this.parent) return; // this.parent.off("roleState", this.setRoleState, this);
    // this.parent.off("changeDirection", this.changeDirection, this);

    this.parent.off("switchSkin", this.switchSkin, this); // game.off("stage.touch", this.stageTouch, this);
    // game.off("gameOver", this.gameOver, this);
  },
  addEvent: function addEvent() {
    // this.parent.on("roleState", this.setRoleState, this);
    // this.parent.on("changeDirection", this.changeDirection, this);
    this.parent.on("switchSkin", this.switchSkin, this); // game.on("stage.touch", this.stageTouch, this);
    // game.on("gameOver", this.gameOver, this);
  },
  //切换皮肤 武器
  switchSkin: function switchSkin(idx) {
    if (game.isOver) return;

    if (!idx) {
      this.weaponIndex += 1;
      if (this.weaponIndex > 4) this.weaponIndex = 1;
      idx = this.weaponIndex;
    }

    this.weaponIndex = idx;
    game.emit("weaponIndex", this.weaponIndex);
    var weapon = this.weaponData[this.weaponIndex];
    this.sp.setSkin(weapon.name);
    this.weapon = this.sp.findBone("root_weapons" + idx);
    this.weaponPos = cc.v2(this.weapon.worldX, this.weapon.worldY);
    this.attackTimeScale1 = 230 / (weapon.sendTime * 1000);
    this.attackTimeScale2 = 450 / (weapon.sendTime * 1000);
  },

  /**
   !#en
   Mix applies all keyframe values,
   interpolated for the specified time and mixed with the current values.
   !#zh 为所有关键帧设定混合及混合时间（从当前值开始差值）。
   @param fromAnimation fromAnimation
   @param toAnimation toAnimation
   @param duration duration
   */
  setMix: function setMix(anim1, anim2, mixTime) {
    this.sp.setMix(anim1, anim2, mixTime);
    this.sp.setMix(anim2, anim1, mixTime);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/zhujie/roleControl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bd6591XIiBHmo/z8fwSzvrO', 'roleControl');
// Script/zhujie/roleControl.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {},
  onLoad: function onLoad() {
    game.on("key_down", this.onKeyDown, this);
    game.on("key_up", this.onKeyUp, this);
  },
  onDestroy: function onDestroy() {
    game.off("key_down", this.onKeyDown, this);
    game.off("key_up", this.onKeyUp, this);
  },
  onKeyDown: function onKeyDown(data) {
    this.node.emit("key_down", data);
  },
  onKeyUp: function onKeyUp(data) {
    this.node.emit("key_up", data);
  },
  start: function start() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFx6aHVqaWVcXHJvbGVDb250cm9sLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwib25Mb2FkIiwiZ2FtZSIsIm9uIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uRGVzdHJveSIsIm9mZiIsImRhdGEiLCJub2RlIiwiZW1pdCIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUVMQyxFQUFBQSxVQUFVLEVBQUUsRUFGUDtBQUdMQyxFQUFBQSxNQUFNLEVBQUUsa0JBQVk7QUFDaEJDLElBQUFBLElBQUksQ0FBQ0MsRUFBTCxDQUFRLFVBQVIsRUFBb0IsS0FBS0MsU0FBekIsRUFBb0MsSUFBcEM7QUFDQUYsSUFBQUEsSUFBSSxDQUFDQyxFQUFMLENBQVEsUUFBUixFQUFrQixLQUFLRSxPQUF2QixFQUFnQyxJQUFoQztBQUNILEdBTkk7QUFPTEMsRUFBQUEsU0FQSyx1QkFPTztBQUNSSixJQUFBQSxJQUFJLENBQUNLLEdBQUwsQ0FBUyxVQUFULEVBQXFCLEtBQUtILFNBQTFCLEVBQXFDLElBQXJDO0FBQ0FGLElBQUFBLElBQUksQ0FBQ0ssR0FBTCxDQUFTLFFBQVQsRUFBbUIsS0FBS0YsT0FBeEIsRUFBaUMsSUFBakM7QUFDSCxHQVZJO0FBV0xELEVBQUFBLFNBWEsscUJBV0tJLElBWEwsRUFXVztBQUNaLFNBQUtDLElBQUwsQ0FBVUMsSUFBVixDQUFlLFVBQWYsRUFBMkJGLElBQTNCO0FBQ0gsR0FiSTtBQWNMSCxFQUFBQSxPQWRLLG1CQWNHRyxJQWRILEVBY1M7QUFDVixTQUFLQyxJQUFMLENBQVVDLElBQVYsQ0FBZSxRQUFmLEVBQXlCRixJQUF6QjtBQUNILEdBaEJJO0FBaUJMRyxFQUFBQSxLQWpCSyxtQkFpQkcsQ0FDUDtBQWxCSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcbiAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGdhbWUub24oXCJrZXlfZG93blwiLCB0aGlzLm9uS2V5RG93biwgdGhpcyk7XHJcbiAgICAgICAgZ2FtZS5vbihcImtleV91cFwiLCB0aGlzLm9uS2V5VXAsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICBnYW1lLm9mZihcImtleV9kb3duXCIsIHRoaXMub25LZXlEb3duLCB0aGlzKTtcclxuICAgICAgICBnYW1lLm9mZihcImtleV91cFwiLCB0aGlzLm9uS2V5VXAsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIG9uS2V5RG93bihkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLmVtaXQoXCJrZXlfZG93blwiLCBkYXRhKTtcclxuICAgIH0sXHJcbiAgICBvbktleVVwKGRhdGEpIHtcclxuICAgICAgICB0aGlzLm5vZGUuZW1pdChcImtleV91cFwiLCBkYXRhKTtcclxuICAgIH0sXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH0sXHJcblxyXG5cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/min/async.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (process,global){
"use strict";
cc._RF.push(module, 'dde7cV8iSNKL7iBD+8OZ6dM', 'async');
// Script/core/min/async.js

"use strict";

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = global.async || {});
})(void 0, function (exports) {
  'use strict';
  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }
  /* Built-in method references for those with the same name as other `lodash` methods. */


  var nativeMax = Math.max;
  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */

  function overRest$1(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }
  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */


  function identity(value) {
    return value;
  } // Lodash rest function without function.toString()
  // remappings


  function rest(func, start) {
    return overRest$1(func, start, identity);
  }

  var initialParams = function initialParams(fn) {
    return rest(function (args
    /*..., callback*/
    ) {
      var callback = args.pop();
      fn.call(this, args, callback);
    });
  };

  function applyEach$1(eachfn) {
    return rest(function (fns, args) {
      var go = initialParams(function (args, callback) {
        var that = this;
        return eachfn(fns, function (fn, cb) {
          fn.apply(that, args.concat(cb));
        }, callback);
      });

      if (args.length) {
        return go.apply(this, args);
      } else {
        return go;
      }
    });
  }
  /** Detect free variable `global` from Node.js. */


  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  /** Detect free variable `self`. */

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root = freeGlobal || freeSelf || Function('return this')();
  /** Built-in value references. */

  var Symbol$1 = root.Symbol;
  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto.toString;
  /** Built-in value references. */

  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }

    return result;
  }
  /** Used for built-in method references. */


  var objectProto$1 = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$1.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }
  /** `Object#toString` result references. */


  var nullTag = '[object Null]';
  var undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */


  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }
  /** `Object#toString` result references. */


  var asyncTag = '[object AsyncFunction]';
  var funcTag = '[object Function]';
  var genTag = '[object GeneratorFunction]';
  var proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  /** Used as references for various `Number` constants. */


  var MAX_SAFE_INTEGER = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */


  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  } // A temporary value used to identify if the loop should be broken.
  // See #1064, #1293


  var breakLoop = {};
  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */

  function noop() {// No operation performed.
  }

  function once(fn) {
    return function () {
      if (fn === null) return;
      var callFn = fn;
      fn = null;
      callFn.apply(this, arguments);
    };
  }

  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

  var getIterator = function getIterator(coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
  };
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */


  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */


  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }
  /** `Object#toString` result references. */


  var argsTag = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  /** Used for built-in method references. */


  var objectProto$3 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  };
  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */

  var isArray = Array.isArray;
  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false;
  }
  /** Detect free variable `exports`. */


  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  /** Detect free variable `module`. */

  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  /** Detect the popular CommonJS extension `module.exports`. */

  var moduleExports = freeModule && freeModule.exports === freeExports;
  /** Built-in value references. */

  var Buffer = moduleExports ? root.Buffer : undefined;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */

  var isBuffer = nativeIsBuffer || stubFalse;
  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }
  /** `Object#toString` result references. */


  var argsTag$1 = '[object Arguments]';
  var arrayTag = '[object Array]';
  var boolTag = '[object Boolean]';
  var dateTag = '[object Date]';
  var errorTag = '[object Error]';
  var funcTag$1 = '[object Function]';
  var mapTag = '[object Map]';
  var numberTag = '[object Number]';
  var objectTag = '[object Object]';
  var regexpTag = '[object RegExp]';
  var setTag = '[object Set]';
  var stringTag = '[object String]';
  var weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]';
  var dataViewTag = '[object DataView]';
  var float32Tag = '[object Float32Array]';
  var float64Tag = '[object Float64Array]';
  var int8Tag = '[object Int8Array]';
  var int16Tag = '[object Int16Array]';
  var int32Tag = '[object Int32Array]';
  var uint8Tag = '[object Uint8Array]';
  var uint8ClampedTag = '[object Uint8ClampedArray]';
  var uint16Tag = '[object Uint16Array]';
  var uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */


  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }
  /** Detect free variable `exports`. */


  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
  /** Detect free variable `module`. */

  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
  /** Detect the popular CommonJS extension `module.exports`. */

  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
  /** Detect free variable `process` from Node.js. */

  var freeProcess = moduleExports$1 && freeGlobal.process;
  /** Used to access faster Node.js helpers. */

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();
  /* Node.js helper references. */


  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  /** Used for built-in method references. */

  var objectProto$2 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }
  /** Used for built-in method references. */


  var objectProto$5 = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;
    return value === proto;
  }
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */


  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }
  /* Built-in method references for those with the same name as other `lodash` methods. */


  var nativeKeys = overArg(Object.keys, Object);
  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */


  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
      return ++i < len ? {
        value: coll[i],
        key: i
      } : null;
    };
  }

  function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
      var item = iterator.next();
      if (item.done) return null;
      i++;
      return {
        value: item.value,
        key: i
      };
    };
  }

  function createObjectIterator(obj) {
    var okeys = keys(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
      var key = okeys[++i];
      return i < len ? {
        value: obj[key],
        key: key
      } : null;
    };
  }

  function iterator(coll) {
    if (isArrayLike(coll)) {
      return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
  }

  function onlyOnce(fn) {
    return function () {
      if (fn === null) throw new Error("Callback was already called.");
      var callFn = fn;
      fn = null;
      callFn.apply(this, arguments);
    };
  }

  function _eachOfLimit(limit) {
    return function (obj, iteratee, callback) {
      callback = once(callback || noop);

      if (limit <= 0 || !obj) {
        return callback(null);
      }

      var nextElem = iterator(obj);
      var done = false;
      var running = 0;

      function iterateeCallback(err, value) {
        running -= 1;

        if (err) {
          done = true;
          callback(err);
        } else if (value === breakLoop || done && running <= 0) {
          done = true;
          return callback(null);
        } else {
          replenish();
        }
      }

      function replenish() {
        while (running < limit && !done) {
          var elem = nextElem();

          if (elem === null) {
            done = true;

            if (running <= 0) {
              callback(null);
            }

            return;
          }

          running += 1;
          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
        }
      }

      replenish();
    };
  }
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name eachOfLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A function to apply to each
   * item in `coll`. The `key` is the item's key, or index in the case of an
   * array. The iteratee is passed a `callback(err)` which must be called once it
   * has completed. If no error has occurred, the callback should be run without
   * arguments or with an explicit `null` argument. Invoked with
   * (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */


  function eachOfLimit(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, iteratee, callback);
  }

  function doLimit(fn, limit) {
    return function (iterable, iteratee, callback) {
      return fn(iterable, limit, iteratee, callback);
    };
  } // eachOf implementation optimized for array-likes


  function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback || noop);
    var index = 0,
        completed = 0,
        length = coll.length;

    if (length === 0) {
      callback(null);
    }

    function iteratorCallback(err, value) {
      if (err) {
        callback(err);
      } else if (++completed === length || value === breakLoop) {
        callback(null);
      }
    }

    for (; index < length; index++) {
      iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
  } // a generic version of eachOf which can handle array, object, and iterator cases.


  var eachOfGeneric = doLimit(eachOfLimit, Infinity);
  /**
   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
   * to the iteratee.
   *
   * @name eachOf
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEachOf
   * @category Collection
   * @see [async.each]{@link module:Collections.each}
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each
   * item in `coll`. The `key` is the item's key, or index in the case of an
   * array. The iteratee is passed a `callback(err)` which must be called once it
   * has completed. If no error has occurred, the callback should be run without
   * arguments or with an explicit `null` argument. Invoked with
   * (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
   * var configs = {};
   *
   * async.forEachOf(obj, function (value, key, callback) {
   *     fs.readFile(__dirname + value, "utf8", function (err, data) {
   *         if (err) return callback(err);
   *         try {
   *             configs[key] = JSON.parse(data);
   *         } catch (e) {
   *             return callback(e);
   *         }
   *         callback();
   *     });
   * }, function (err) {
   *     if (err) console.error(err.message);
   *     // configs is now a map of JSON data
   *     doSomethingWith(configs);
   * });
   */

  var eachOf = function eachOf(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, iteratee, callback);
  };

  function doParallel(fn) {
    return function (obj, iteratee, callback) {
      return fn(eachOf, obj, iteratee, callback);
    };
  }

  function _asyncMap(eachfn, arr, iteratee, callback) {
    callback = callback || noop;
    arr = arr || [];
    var results = [];
    var counter = 0;
    eachfn(arr, function (value, _, callback) {
      var index = counter++;
      iteratee(value, function (err, v) {
        results[index] = v;
        callback(err);
      });
    }, function (err) {
      callback(err, results);
    });
  }
  /**
   * Produces a new collection of values by mapping each value in `coll` through
   * the `iteratee` function. The `iteratee` is called with an item from `coll`
   * and a callback for when it has finished processing. Each of these callback
   * takes 2 arguments: an `error`, and the transformed item from `coll`. If
   * `iteratee` passes an error to its callback, the main `callback` (for the
   * `map` function) is immediately called with the error.
   *
   * Note, that since this function applies the `iteratee` to each item in
   * parallel, there is no guarantee that the `iteratee` functions will complete
   * in order. However, the results array will be in the same order as the
   * original `coll`.
   *
   * If `map` is passed an Object, the results will be an Array.  The results
   * will roughly be in the order of the original Objects' keys (but this can
   * vary across JavaScript engines)
   *
   * @name map
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, transformed)` which must be called
   * once it has completed with an error (which can be `null`) and a
   * transformed item. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an Array of the
   * transformed items from the `coll`. Invoked with (err, results).
   * @example
   *
   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
   *     // results is now an array of stats for each file
   * });
   */


  var map = doParallel(_asyncMap);
  /**
   * Applies the provided arguments to each function in the array, calling
   * `callback` after all functions have completed. If you only provide the first
   * argument, `fns`, then it will return a function which lets you pass in the
   * arguments as if it were a single function call. If more arguments are
   * provided, `callback` is required while `args` is still optional.
   *
   * @name applyEach
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} fns - A collection of asynchronous functions
   * to all call with the same arguments
   * @param {...*} [args] - any number of separate arguments to pass to the
   * function.
   * @param {Function} [callback] - the final argument should be the callback,
   * called when all functions have completed processing.
   * @returns {Function} - If only the first argument, `fns`, is provided, it will
   * return a function which lets you pass in the arguments as if it were a single
   * function call. The signature is `(..args, callback)`. If invoked with any
   * arguments, `callback` is required.
   * @example
   *
   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
   *
   * // partial application example:
   * async.each(
   *     buckets,
   *     async.applyEach([enableSearch, updateSchema]),
   *     callback
   * );
   */

  var applyEach = applyEach$1(map);

  function doParallelLimit(fn) {
    return function (obj, limit, iteratee, callback) {
      return fn(_eachOfLimit(limit), obj, iteratee, callback);
    };
  }
  /**
   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
   *
   * @name mapLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A function to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, transformed)` which must be called
   * once it has completed with an error (which can be `null`) and a transformed
   * item. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an array of the
   * transformed items from the `coll`. Invoked with (err, results).
   */


  var mapLimit = doParallelLimit(_asyncMap);
  /**
   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
   *
   * @name mapSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, transformed)` which must be called
   * once it has completed with an error (which can be `null`) and a
   * transformed item. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an array of the
   * transformed items from the `coll`. Invoked with (err, results).
   */

  var mapSeries = doLimit(mapLimit, 1);
  /**
   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
   *
   * @name applyEachSeries
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.applyEach]{@link module:ControlFlow.applyEach}
   * @category Control Flow
   * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
   * call with the same arguments
   * @param {...*} [args] - any number of separate arguments to pass to the
   * function.
   * @param {Function} [callback] - the final argument should be the callback,
   * called when all functions have completed processing.
   * @returns {Function} - If only the first argument is provided, it will return
   * a function which lets you pass in the arguments as if it were a single
   * function call.
   */

  var applyEachSeries = applyEach$1(mapSeries);
  /**
   * Creates a continuation function with some arguments already applied.
   *
   * Useful as a shorthand when combined with other control flow functions. Any
   * arguments passed to the returned function are added to the arguments
   * originally passed to apply.
   *
   * @name apply
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} function - The function you want to eventually apply all
   * arguments to. Invokes with (arguments...).
   * @param {...*} arguments... - Any number of arguments to automatically apply
   * when the continuation is called.
   * @example
   *
   * // using apply
   * async.parallel([
   *     async.apply(fs.writeFile, 'testfile1', 'test1'),
   *     async.apply(fs.writeFile, 'testfile2', 'test2')
   * ]);
   *
   *
   * // the same process without using apply
   * async.parallel([
   *     function(callback) {
   *         fs.writeFile('testfile1', 'test1', callback);
   *     },
   *     function(callback) {
   *         fs.writeFile('testfile2', 'test2', callback);
   *     }
   * ]);
   *
   * // It's possible to pass any number of additional arguments when calling the
   * // continuation:
   *
   * node> var fn = async.apply(sys.puts, 'one');
   * node> fn('two', 'three');
   * one
   * two
   * three
   */

  var apply$2 = rest(function (fn, args) {
    return rest(function (callArgs) {
      return fn.apply(null, args.concat(callArgs));
    });
  });
  /**
   * Take a sync function and make it async, passing its return value to a
   * callback. This is useful for plugging sync functions into a waterfall,
   * series, or other async functions. Any arguments passed to the generated
   * function will be passed to the wrapped function (except for the final
   * callback argument). Errors thrown will be passed to the callback.
   *
   * If the function passed to `asyncify` returns a Promise, that promises's
   * resolved/rejected state will be used to call the callback, rather than simply
   * the synchronous return value.
   *
   * This also means you can asyncify ES2016 `async` functions.
   *
   * @name asyncify
   * @static
   * @memberOf module:Utils
   * @method
   * @alias wrapSync
   * @category Util
   * @param {Function} func - The synchronous function to convert to an
   * asynchronous function.
   * @returns {Function} An asynchronous wrapper of the `func`. To be invoked with
   * (callback).
   * @example
   *
   * // passing a regular synchronous function
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(JSON.parse),
   *     function (data, next) {
   *         // data is the result of parsing the text.
   *         // If there was a parsing error, it would have been caught.
   *     }
   * ], callback);
   *
   * // passing a function returning a promise
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(function (contents) {
   *         return db.model.create(contents);
   *     }),
   *     function (model, next) {
   *         // `model` is the instantiated model object.
   *         // If there was an error, this function would be skipped.
   *     }
   * ], callback);
   *
   * // es6 example
   * var q = async.queue(async.asyncify(async function(file) {
   *     var intermediateStep = await processFile(file);
   *     return await somePromise(intermediateStep)
   * }));
   *
   * q.push(files);
   */

  function asyncify(func) {
    return initialParams(function (args, callback) {
      var result;

      try {
        result = func.apply(this, args);
      } catch (e) {
        return callback(e);
      } // if result is Promise object


      if (isObject(result) && typeof result.then === 'function') {
        result.then(function (value) {
          callback(null, value);
        }, function (err) {
          callback(err.message ? err : new Error(err));
        });
      } else {
        callback(null, result);
      }
    });
  }
  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */


  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }
  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */


  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }
  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */


  var baseFor = createBaseFor();
  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */

  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }
  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */


  function baseIsNaN(value) {
    return value !== value;
  }
  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  /**
   * Determines the best order for running the functions in `tasks`, based on
   * their requirements. Each function can optionally depend on other functions
   * being completed first, and each function is run as soon as its requirements
   * are satisfied.
   *
   * If any of the functions pass an error to their callback, the `auto` sequence
   * will stop. Further tasks will not execute (so any other functions depending
   * on it will not run), and the main `callback` is immediately called with the
   * error.
   *
   * Functions also receive an object containing the results of functions which
   * have completed so far as the first argument, if they have dependencies. If a
   * task function has no dependencies, it will only be passed a callback.
   *
   * @name auto
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Object} tasks - An object. Each of its properties is either a
   * function or an array of requirements, with the function itself the last item
   * in the array. The object's key of a property serves as the name of the task
   * defined by that property, i.e. can be used when specifying requirements for
   * other tasks. The function receives one or two arguments:
   * * a `results` object, containing the results of the previously executed
   *   functions, only passed if the task has any dependencies,
   * * a `callback(err, result)` function, which must be called when finished,
   *   passing an `error` (which can be `null`) and the result of the function's
   *   execution.
   * @param {number} [concurrency=Infinity] - An optional `integer` for
   * determining the maximum number of tasks that can be run in parallel. By
   * default, as many as possible.
   * @param {Function} [callback] - An optional callback which is called when all
   * the tasks have been completed. It receives the `err` argument if any `tasks`
   * pass an error to their callback. Results are always returned; however, if an
   * error occurs, no further `tasks` will be performed, and the results object
   * will only contain partial results. Invoked with (err, results).
   * @returns undefined
   * @example
   *
   * async.auto({
   *     // this function will just be passed a callback
   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
   *     showData: ['readData', function(results, cb) {
   *         // results.readData is the file's contents
   *         // ...
   *     }]
   * }, callback);
   *
   * async.auto({
   *     get_data: function(callback) {
   *         console.log('in get_data');
   *         // async code to get some data
   *         callback(null, 'data', 'converted to array');
   *     },
   *     make_folder: function(callback) {
   *         console.log('in make_folder');
   *         // async code to create a directory to store a file in
   *         // this is run at the same time as getting the data
   *         callback(null, 'folder');
   *     },
   *     write_file: ['get_data', 'make_folder', function(results, callback) {
   *         console.log('in write_file', JSON.stringify(results));
   *         // once there is some data and the directory exists,
   *         // write the data to a file in the directory
   *         callback(null, 'filename');
   *     }],
   *     email_link: ['write_file', function(results, callback) {
   *         console.log('in email_link', JSON.stringify(results));
   *         // once the file is written let's email a link to it...
   *         // results.write_file contains the filename returned by write_file.
   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
   *     }]
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('results = ', results);
   * });
   */


  var auto = function auto(tasks, concurrency, callback) {
    if (typeof concurrency === 'function') {
      // concurrency is optional, shift the args.
      callback = concurrency;
      concurrency = null;
    }

    callback = once(callback || noop);
    var keys$$1 = keys(tasks);
    var numTasks = keys$$1.length;

    if (!numTasks) {
      return callback(null);
    }

    if (!concurrency) {
      concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var hasError = false;
    var listeners = Object.create(null);
    var readyTasks = []; // for cycle detection:

    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task

    var uncheckedDependencies = {};
    baseForOwn(tasks, function (task, key) {
      if (!isArray(task)) {
        // no dependencies
        enqueueTask(key, [task]);
        readyToCheck.push(key);
        return;
      }

      var dependencies = task.slice(0, task.length - 1);
      var remainingDependencies = dependencies.length;

      if (remainingDependencies === 0) {
        enqueueTask(key, task);
        readyToCheck.push(key);
        return;
      }

      uncheckedDependencies[key] = remainingDependencies;
      arrayEach(dependencies, function (dependencyName) {
        if (!tasks[dependencyName]) {
          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));
        }

        addListener(dependencyName, function () {
          remainingDependencies--;

          if (remainingDependencies === 0) {
            enqueueTask(key, task);
          }
        });
      });
    });
    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
      readyTasks.push(function () {
        runTask(key, task);
      });
    }

    function processQueue() {
      if (readyTasks.length === 0 && runningTasks === 0) {
        return callback(null, results);
      }

      while (readyTasks.length && runningTasks < concurrency) {
        var run = readyTasks.shift();
        run();
      }
    }

    function addListener(taskName, fn) {
      var taskListeners = listeners[taskName];

      if (!taskListeners) {
        taskListeners = listeners[taskName] = [];
      }

      taskListeners.push(fn);
    }

    function taskComplete(taskName) {
      var taskListeners = listeners[taskName] || [];
      arrayEach(taskListeners, function (fn) {
        fn();
      });
      processQueue();
    }

    function runTask(key, task) {
      if (hasError) return;
      var taskCallback = onlyOnce(rest(function (err, args) {
        runningTasks--;

        if (args.length <= 1) {
          args = args[0];
        }

        if (err) {
          var safeResults = {};
          baseForOwn(results, function (val, rkey) {
            safeResults[rkey] = val;
          });
          safeResults[key] = args;
          hasError = true;
          listeners = Object.create(null);
          callback(err, safeResults);
        } else {
          results[key] = args;
          taskComplete(key);
        }
      }));
      runningTasks++;
      var taskFn = task[task.length - 1];

      if (task.length > 1) {
        taskFn(results, taskCallback);
      } else {
        taskFn(taskCallback);
      }
    }

    function checkForDeadlocks() {
      // Kahn's algorithm
      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
      var currentTask;
      var counter = 0;

      while (readyToCheck.length) {
        currentTask = readyToCheck.pop();
        counter++;
        arrayEach(getDependents(currentTask), function (dependent) {
          if (--uncheckedDependencies[dependent] === 0) {
            readyToCheck.push(dependent);
          }
        });
      }

      if (counter !== numTasks) {
        throw new Error('async.auto cannot execute tasks due to a recursive dependency');
      }
    }

    function getDependents(taskName) {
      var result = [];
      baseForOwn(tasks, function (task, key) {
        if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
          result.push(key);
        }
      });
      return result;
    }
  };
  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */


  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }
  /** `Object#toString` result references. */


  var symbolTag = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }
  /** Used as references for various `Number` constants. */


  var INFINITY = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
  var symbolToString = symbolProto ? symbolProto.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }
  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */


  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }
  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */


  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
  }
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */


  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

    return index;
  }
  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */


  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

    return index;
  }
  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */


  function asciiToArray(string) {
    return string.split('');
  }
  /** Used to compose unicode character classes. */


  var rsAstralRange = "\\ud800-\\udfff";
  var rsComboMarksRange = "\\u0300-\\u036f";
  var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
  var rsComboSymbolsRange = "\\u20d0-\\u20ff";
  var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
  var rsVarRange = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsZWJ = "\\u200d";
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }
  /** Used to compose unicode character classes. */


  var rsAstralRange$1 = "\\ud800-\\udfff";
  var rsComboMarksRange$1 = "\\u0300-\\u036f";
  var reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f";
  var rsComboSymbolsRange$1 = "\\u20d0-\\u20ff";
  var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
  var rsVarRange$1 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral = '[' + rsAstralRange$1 + ']';
  var rsCombo = '[' + rsComboRange$1 + ']';
  var rsFitz = "\\ud83c[\\udffb-\\udfff]";
  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
  var rsNonAstral = '[^' + rsAstralRange$1 + ']';
  var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
  var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
  var rsZWJ$1 = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod = rsModifier + '?';
  var rsOptVar = '[' + rsVarRange$1 + ']?';
  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
  var rsSeq = rsOptVar + reOptMod + rsOptJoin;
  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */


  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */


  function toString(value) {
    return value == null ? '' : baseToString(value);
  }
  /** Used to match leading and trailing whitespace. */


  var reTrim = /^\s+|\s+$/g;
  /**
   * Removes leading and trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trim('  abc  ');
   * // => 'abc'
   *
   * _.trim('-_-abc-_-', '_-');
   * // => 'abc'
   *
   * _.map(['  foo  ', '  bar  '], _.trim);
   * // => ['foo', 'bar']
   */

  function trim(string, chars, guard) {
    string = toString(string);

    if (string && (guard || chars === undefined)) {
      return string.replace(reTrim, '');
    }

    if (!string || !(chars = baseToString(chars))) {
      return string;
    }

    var strSymbols = stringToArray(string),
        chrSymbols = stringToArray(chars),
        start = charsStartIndex(strSymbols, chrSymbols),
        end = charsEndIndex(strSymbols, chrSymbols) + 1;
    return castSlice(strSymbols, start, end).join('');
  }

  var FN_ARGS = /^(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /(=.+)?(\s*)$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

  function parseParams(func) {
    func = func.toString().replace(STRIP_COMMENTS, '');
    func = func.match(FN_ARGS)[2].replace(' ', '');
    func = func ? func.split(FN_ARG_SPLIT) : [];
    func = func.map(function (arg) {
      return trim(arg.replace(FN_ARG, ''));
    });
    return func;
  }
  /**
   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
   * tasks are specified as parameters to the function, after the usual callback
   * parameter, with the parameter names matching the names of the tasks it
   * depends on. This can provide even more readable task graphs which can be
   * easier to maintain.
   *
   * If a final callback is specified, the task results are similarly injected,
   * specified as named parameters after the initial error parameter.
   *
   * The autoInject function is purely syntactic sugar and its semantics are
   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
   *
   * @name autoInject
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.auto]{@link module:ControlFlow.auto}
   * @category Control Flow
   * @param {Object} tasks - An object, each of whose properties is a function of
   * the form 'func([dependencies...], callback). The object's key of a property
   * serves as the name of the task defined by that property, i.e. can be used
   * when specifying requirements for other tasks.
   * * The `callback` parameter is a `callback(err, result)` which must be called
   *   when finished, passing an `error` (which can be `null`) and the result of
   *   the function's execution. The remaining parameters name other tasks on
   *   which the task is dependent, and the results from those tasks are the
   *   arguments of those parameters.
   * @param {Function} [callback] - An optional callback which is called when all
   * the tasks have been completed. It receives the `err` argument if any `tasks`
   * pass an error to their callback, and a `results` object with any completed
   * task results, similar to `auto`.
   * @example
   *
   * //  The example from `auto` can be rewritten as follows:
   * async.autoInject({
   *     get_data: function(callback) {
   *         // async code to get some data
   *         callback(null, 'data', 'converted to array');
   *     },
   *     make_folder: function(callback) {
   *         // async code to create a directory to store a file in
   *         // this is run at the same time as getting the data
   *         callback(null, 'folder');
   *     },
   *     write_file: function(get_data, make_folder, callback) {
   *         // once there is some data and the directory exists,
   *         // write the data to a file in the directory
   *         callback(null, 'filename');
   *     },
   *     email_link: function(write_file, callback) {
   *         // once the file is written let's email a link to it...
   *         // write_file contains the filename returned by write_file.
   *         callback(null, {'file':write_file, 'email':'user@example.com'});
   *     }
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('email_link = ', results.email_link);
   * });
   *
   * // If you are using a JS minifier that mangles parameter names, `autoInject`
   * // will not work with plain functions, since the parameter names will be
   * // collapsed to a single letter identifier.  To work around this, you can
   * // explicitly specify the names of the parameters your task function needs
   * // in an array, similar to Angular.js dependency injection.
   *
   * // This still has an advantage over plain `auto`, since the results a task
   * // depends on are still spread into arguments.
   * async.autoInject({
   *     //...
   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
   *         callback(null, 'filename');
   *     }],
   *     email_link: ['write_file', function(write_file, callback) {
   *         callback(null, {'file':write_file, 'email':'user@example.com'});
   *     }]
   *     //...
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('email_link = ', results.email_link);
   * });
   */


  function autoInject(tasks, callback) {
    var newTasks = {};
    baseForOwn(tasks, function (taskFn, key) {
      var params;

      if (isArray(taskFn)) {
        params = taskFn.slice(0, -1);
        taskFn = taskFn[taskFn.length - 1];
        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
      } else if (taskFn.length === 1) {
        // no dependencies, use the function as-is
        newTasks[key] = taskFn;
      } else {
        params = parseParams(taskFn);

        if (taskFn.length === 0 && params.length === 0) {
          throw new Error("autoInject task functions require explicit parameters.");
        }

        params.pop();
        newTasks[key] = params.concat(newTask);
      }

      function newTask(results, taskCb) {
        var newArgs = arrayMap(params, function (name) {
          return results[name];
        });
        newArgs.push(taskCb);
        taskFn.apply(null, newArgs);
      }
    });
    auto(newTasks, callback);
  }

  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

  function fallback(fn) {
    setTimeout(fn, 0);
  }

  function wrap(defer) {
    return rest(function (fn, args) {
      defer(function () {
        fn.apply(null, args);
      });
    });
  }

  var _defer;

  if (hasSetImmediate) {
    _defer = setImmediate;
  } else if (hasNextTick) {
    _defer = process.nextTick;
  } else {
    _defer = fallback;
  }

  var setImmediate$1 = wrap(_defer); // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
  // used for queues. This implementation assumes that the node provided by the user can be modified
  // to adjust the next and last properties. We implement only the minimal functionality
  // for queue support.

  function DLL() {
    this.head = this.tail = null;
    this.length = 0;
  }

  function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
  }

  DLL.prototype.removeLink = function (node) {
    if (node.prev) node.prev.next = node.next;else this.head = node.next;
    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;
    node.prev = node.next = null;
    this.length -= 1;
    return node;
  };

  DLL.prototype.empty = DLL;

  DLL.prototype.insertAfter = function (node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
  };

  DLL.prototype.insertBefore = function (node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
  };

  DLL.prototype.unshift = function (node) {
    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);
  };

  DLL.prototype.push = function (node) {
    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);
  };

  DLL.prototype.shift = function () {
    return this.head && this.removeLink(this.head);
  };

  DLL.prototype.pop = function () {
    return this.tail && this.removeLink(this.tail);
  };

  function queue(worker, concurrency, payload) {
    if (concurrency == null) {
      concurrency = 1;
    } else if (concurrency === 0) {
      throw new Error('Concurrency must not be zero');
    }

    function _insert(data, insertAtFront, callback) {
      if (callback != null && typeof callback !== 'function') {
        throw new Error('task callback must be a function');
      }

      q.started = true;

      if (!isArray(data)) {
        data = [data];
      }

      if (data.length === 0 && q.idle()) {
        // call drain immediately if there are no tasks
        return setImmediate$1(function () {
          q.drain();
        });
      }

      for (var i = 0, l = data.length; i < l; i++) {
        var item = {
          data: data[i],
          callback: callback || noop
        };

        if (insertAtFront) {
          q._tasks.unshift(item);
        } else {
          q._tasks.push(item);
        }
      }

      setImmediate$1(q.process);
    }

    function _next(tasks) {
      return rest(function (args) {
        workers -= 1;

        for (var i = 0, l = tasks.length; i < l; i++) {
          var task = tasks[i];
          var index = baseIndexOf(_workersList, task, 0);

          if (index >= 0) {
            _workersList.splice(index);
          }

          task.callback.apply(task, args);

          if (args[0] != null) {
            q.error(args[0], task.data);
          }
        }

        if (workers <= q.concurrency - q.buffer) {
          q.unsaturated();
        }

        if (q.idle()) {
          q.drain();
        }

        q.process();
      });
    }

    var workers = 0;
    var _workersList = [];
    var isProcessing = false;
    var q = {
      _tasks: new DLL(),
      concurrency: concurrency,
      payload: payload,
      saturated: noop,
      unsaturated: noop,
      buffer: concurrency / 4,
      empty: noop,
      drain: noop,
      error: noop,
      started: false,
      paused: false,
      push: function push(data, callback) {
        _insert(data, false, callback);
      },
      kill: function kill() {
        q.drain = noop;

        q._tasks.empty();
      },
      unshift: function unshift(data, callback) {
        _insert(data, true, callback);
      },
      process: function process() {
        // Avoid trying to start too many processing operations. This can occur
        // when callbacks resolve synchronously (#1267).
        if (isProcessing) {
          return;
        }

        isProcessing = true;

        while (!q.paused && workers < q.concurrency && q._tasks.length) {
          var tasks = [],
              data = [];
          var l = q._tasks.length;
          if (q.payload) l = Math.min(l, q.payload);

          for (var i = 0; i < l; i++) {
            var node = q._tasks.shift();

            tasks.push(node);
            data.push(node.data);
          }

          if (q._tasks.length === 0) {
            q.empty();
          }

          workers += 1;

          _workersList.push(tasks[0]);

          if (workers === q.concurrency) {
            q.saturated();
          }

          var cb = onlyOnce(_next(tasks));
          worker(data, cb);
        }

        isProcessing = false;
      },
      length: function length() {
        return q._tasks.length;
      },
      running: function running() {
        return workers;
      },
      workersList: function workersList() {
        return _workersList;
      },
      idle: function idle() {
        return q._tasks.length + workers === 0;
      },
      pause: function pause() {
        q.paused = true;
      },
      resume: function resume() {
        if (q.paused === false) {
          return;
        }

        q.paused = false;
        setImmediate$1(q.process);
      }
    };
    return q;
  }
  /**
   * A cargo of tasks for the worker function to complete. Cargo inherits all of
   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
   * @typedef {Object} CargoObject
   * @memberOf module:ControlFlow
   * @property {Function} length - A function returning the number of items
   * waiting to be processed. Invoke like `cargo.length()`.
   * @property {number} payload - An `integer` for determining how many tasks
   * should be process per round. This property can be changed after a `cargo` is
   * created to alter the payload on-the-fly.
   * @property {Function} push - Adds `task` to the `queue`. The callback is
   * called once the `worker` has finished processing the task. Instead of a
   * single task, an array of `tasks` can be submitted. The respective callback is
   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
   * @property {Function} saturated - A callback that is called when the
   * `queue.length()` hits the concurrency and further tasks will be queued.
   * @property {Function} empty - A callback that is called when the last item
   * from the `queue` is given to a `worker`.
   * @property {Function} drain - A callback that is called when the last item
   * from the `queue` has returned from the `worker`.
   * @property {Function} idle - a function returning false if there are items
   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
   * @property {Function} pause - a function that pauses the processing of tasks
   * until `resume()` is called. Invoke like `cargo.pause()`.
   * @property {Function} resume - a function that resumes the processing of
   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
   * @property {Function} kill - a function that removes the `drain` callback and
   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
   */

  /**
   * Creates a `cargo` object with the specified payload. Tasks added to the
   * cargo will be processed altogether (up to the `payload` limit). If the
   * `worker` is in progress, the task is queued until it becomes available. Once
   * the `worker` has completed some tasks, each callback of those tasks is
   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
   * for how `cargo` and `queue` work.
   *
   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
   * at a time, cargo passes an array of tasks to a single worker, repeating
   * when the worker is finished.
   *
   * @name cargo
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.queue]{@link module:ControlFlow.queue}
   * @category Control Flow
   * @param {Function} worker - An asynchronous function for processing an array
   * of queued tasks, which must call its `callback(err)` argument when finished,
   * with an optional `err` argument. Invoked with `(tasks, callback)`.
   * @param {number} [payload=Infinity] - An optional `integer` for determining
   * how many tasks should be processed per round; if omitted, the default is
   * unlimited.
   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
   * attached as certain properties to listen for specific events during the
   * lifecycle of the cargo and inner queue.
   * @example
   *
   * // create a cargo object with payload 2
   * var cargo = async.cargo(function(tasks, callback) {
   *     for (var i=0; i<tasks.length; i++) {
   *         console.log('hello ' + tasks[i].name);
   *     }
   *     callback();
   * }, 2);
   *
   * // add some items
   * cargo.push({name: 'foo'}, function(err) {
   *     console.log('finished processing foo');
   * });
   * cargo.push({name: 'bar'}, function(err) {
   *     console.log('finished processing bar');
   * });
   * cargo.push({name: 'baz'}, function(err) {
   *     console.log('finished processing baz');
   * });
   */


  function cargo(worker, payload) {
    return queue(worker, 1, payload);
  }
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
   *
   * @name eachOfSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item in `coll`. The
   * `key` is the item's key, or index in the case of an array. The iteratee is
   * passed a `callback(err)` which must be called once it has completed. If no
   * error has occurred, the callback should be run without arguments or with an
   * explicit `null` argument. Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Invoked with (err).
   */


  var eachOfSeries = doLimit(eachOfLimit, 1);
  /**
   * Reduces `coll` into a single value using an async `iteratee` to return each
   * successive step. `memo` is the initial state of the reduction. This function
   * only operates in series.
   *
   * For performance reasons, it may make sense to split a call to this function
   * into a parallel map, and then use the normal `Array.prototype.reduce` on the
   * results. This function is for situations where each step in the reduction
   * needs to be async; if you can get the data before reducing it, then it's
   * probably a good idea to do so.
   *
   * @name reduce
   * @static
   * @memberOf module:Collections
   * @method
   * @alias inject
   * @alias foldl
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {*} memo - The initial state of the reduction.
   * @param {Function} iteratee - A function applied to each item in the
   * array to produce the next step in the reduction. The `iteratee` is passed a
   * `callback(err, reduction)` which accepts an optional error as its first
   * argument, and the state of the reduction as the second. If an error is
   * passed to the callback, the reduction is stopped and the main `callback` is
   * immediately called with the error. Invoked with (memo, item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the reduced value. Invoked with
   * (err, result).
   * @example
   *
   * async.reduce([1,2,3], 0, function(memo, item, callback) {
   *     // pointless async:
   *     process.nextTick(function() {
   *         callback(null, memo + item)
   *     });
   * }, function(err, result) {
   *     // result is now equal to the last value of memo, which is 6
   * });
   */

  function reduce(coll, memo, iteratee, callback) {
    callback = once(callback || noop);
    eachOfSeries(coll, function (x, i, callback) {
      iteratee(memo, x, function (err, v) {
        memo = v;
        callback(err);
      });
    }, function (err) {
      callback(err, memo);
    });
  }
  /**
   * Version of the compose function that is more natural to read. Each function
   * consumes the return value of the previous function. It is the equivalent of
   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
   *
   * Each function is executed with the `this` binding of the composed function.
   *
   * @name seq
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.compose]{@link module:ControlFlow.compose}
   * @category Control Flow
   * @param {...Function} functions - the asynchronous functions to compose
   * @returns {Function} a function that composes the `functions` in order
   * @example
   *
   * // Requires lodash (or underscore), express3 and dresende's orm2.
   * // Part of an app, that fetches cats of the logged user.
   * // This example uses `seq` function to avoid overnesting and error
   * // handling clutter.
   * app.get('/cats', function(request, response) {
   *     var User = request.models.User;
   *     async.seq(
   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
   *         function(user, fn) {
   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
   *         }
   *     )(req.session.user_id, function (err, cats) {
   *         if (err) {
   *             console.error(err);
   *             response.json({ status: 'error', message: err.message });
   *         } else {
   *             response.json({ status: 'ok', message: 'Cats found', data: cats });
   *         }
   *     });
   * });
   */


  var seq$1 = rest(function seq(functions) {
    return rest(function (args) {
      var that = this;
      var cb = args[args.length - 1];

      if (typeof cb == 'function') {
        args.pop();
      } else {
        cb = noop;
      }

      reduce(functions, args, function (newargs, fn, cb) {
        fn.apply(that, newargs.concat(rest(function (err, nextargs) {
          cb(err, nextargs);
        })));
      }, function (err, results) {
        cb.apply(that, [err].concat(results));
      });
    });
  });
  /**
   * Creates a function which is a composition of the passed asynchronous
   * functions. Each function consumes the return value of the function that
   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
   *
   * Each function is executed with the `this` binding of the composed function.
   *
   * @name compose
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {...Function} functions - the asynchronous functions to compose
   * @returns {Function} an asynchronous function that is the composed
   * asynchronous `functions`
   * @example
   *
   * function add1(n, callback) {
   *     setTimeout(function () {
   *         callback(null, n + 1);
   *     }, 10);
   * }
   *
   * function mul3(n, callback) {
   *     setTimeout(function () {
   *         callback(null, n * 3);
   *     }, 10);
   * }
   *
   * var add1mul3 = async.compose(mul3, add1);
   * add1mul3(4, function (err, result) {
   *     // result now equals 15
   * });
   */

  var compose = rest(function (args) {
    return seq$1.apply(null, args.reverse());
  });

  function concat$1(eachfn, arr, fn, callback) {
    var result = [];
    eachfn(arr, function (x, index, cb) {
      fn(x, function (err, y) {
        result = result.concat(y || []);
        cb(err);
      });
    }, function (err) {
      callback(err, result);
    });
  }
  /**
   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
   * the concatenated list. The `iteratee`s are called in parallel, and the
   * results are concatenated as they return. There is no guarantee that the
   * results array will be returned in the original order of `coll` passed to the
   * `iteratee` function.
   *
   * @name concat
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, results)` which must be called once
   * it has completed with an error (which can be `null`) and an array of results.
   * Invoked with (item, callback).
   * @param {Function} [callback(err)] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   * @example
   *
   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
   *     // files is now a list of filenames that exist in the 3 directories
   * });
   */


  var concat = doParallel(concat$1);

  function doSeries(fn) {
    return function (obj, iteratee, callback) {
      return fn(eachOfSeries, obj, iteratee, callback);
    };
  }
  /**
   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
   *
   * @name concatSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.concat]{@link module:Collections.concat}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, results)` which must be called once
   * it has completed with an error (which can be `null`) and an array of results.
   * Invoked with (item, callback).
   * @param {Function} [callback(err)] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   */


  var concatSeries = doSeries(concat$1);
  /**
   * Returns a function that when called, calls-back with the values provided.
   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
   * [`auto`]{@link module:ControlFlow.auto}.
   *
   * @name constant
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {...*} arguments... - Any number of arguments to automatically invoke
   * callback with.
   * @returns {Function} Returns a function that when invoked, automatically
   * invokes the callback with the previous given arguments.
   * @example
   *
   * async.waterfall([
   *     async.constant(42),
   *     function (value, next) {
   *         // value === 42
   *     },
   *     //...
   * ], callback);
   *
   * async.waterfall([
   *     async.constant(filename, "utf8"),
   *     fs.readFile,
   *     function (fileData, next) {
   *         //...
   *     }
   *     //...
   * ], callback);
   *
   * async.auto({
   *     hostname: async.constant("https://server.net/"),
   *     port: findFreePort,
   *     launchServer: ["hostname", "port", function (options, cb) {
   *         startServer(options, cb);
   *     }],
   *     //...
   * }, callback);
   */

  var constant = rest(function (values) {
    var args = [null].concat(values);
    return initialParams(function (ignoredArgs, callback) {
      return callback.apply(this, args);
    });
  });

  function _createTester(check, getResult) {
    return function (eachfn, arr, iteratee, cb) {
      cb = cb || noop;
      var testPassed = false;
      var testResult;
      eachfn(arr, function (value, _, callback) {
        iteratee(value, function (err, result) {
          if (err) {
            callback(err);
          } else if (check(result) && !testResult) {
            testPassed = true;
            testResult = getResult(true, value);
            callback(null, breakLoop);
          } else {
            callback();
          }
        });
      }, function (err) {
        if (err) {
          cb(err);
        } else {
          cb(null, testPassed ? testResult : getResult(false));
        }
      });
    };
  }

  function _findGetResult(v, x) {
    return x;
  }
  /**
   * Returns the first value in `coll` that passes an async truth test. The
   * `iteratee` is applied in parallel, meaning the first iteratee to return
   * `true` will fire the detect `callback` with that result. That means the
   * result might not be the first item in the original `coll` (in terms of order)
   * that passes the test.
  
   * If order within the original `coll` is important, then look at
   * [`detectSeries`]{@link module:Collections.detectSeries}.
   *
   * @name detect
   * @static
   * @memberOf module:Collections
   * @method
   * @alias find
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, truthValue)` which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   * @example
   *
   * async.detect(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // result now equals the first file in the list that exists
   * });
   */


  var detect = doParallel(_createTester(identity, _findGetResult));
  /**
   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name detectLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.detect]{@link module:Collections.detect}
   * @alias findLimit
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, truthValue)` which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   */

  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));
  /**
   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
   *
   * @name detectSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.detect]{@link module:Collections.detect}
   * @alias findSeries
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, truthValue)` which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   */

  var detectSeries = doLimit(detectLimit, 1);

  function consoleFunc(name) {
    return rest(function (fn, args) {
      fn.apply(null, args.concat(rest(function (err, args) {
        if (typeof console === 'object') {
          if (err) {
            if (console.error) {
              console.error(err);
            }
          } else if (console[name]) {
            arrayEach(args, function (x) {
              console[name](x);
            });
          }
        }
      })));
    });
  }
  /**
   * Logs the result of an `async` function to the `console` using `console.dir`
   * to display the properties of the resulting object. Only works in Node.js or
   * in browsers that support `console.dir` and `console.error` (such as FF and
   * Chrome). If multiple arguments are returned from the async function,
   * `console.dir` is called on each argument in order.
   *
   * @name dir
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} function - The function you want to eventually apply all
   * arguments to.
   * @param {...*} arguments... - Any number of arguments to apply to the function.
   * @example
   *
   * // in a module
   * var hello = function(name, callback) {
   *     setTimeout(function() {
   *         callback(null, {hello: name});
   *     }, 1000);
   * };
   *
   * // in the node repl
   * node> async.dir(hello, 'world');
   * {hello: 'world'}
   */


  var dir = consoleFunc('dir');
  /**
   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
   * the order of operations, the arguments `test` and `fn` are switched.
   *
   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
   * @name doDuring
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.during]{@link module:ControlFlow.during}
   * @category Control Flow
   * @param {Function} fn - A function which is called each time `test` passes.
   * The function is passed a `callback(err)`, which must be called once it has
   * completed with an optional `err` argument. Invoked with (callback).
   * @param {Function} test - asynchronous truth test to perform before each
   * execution of `fn`. Invoked with (...args, callback), where `...args` are the
   * non-error args from the previous callback of `fn`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error if one occured, otherwise `null`.
   */

  function doDuring(fn, test, callback) {
    callback = onlyOnce(callback || noop);
    var next = rest(function (err, args) {
      if (err) return callback(err);
      args.push(check);
      test.apply(this, args);
    });

    function check(err, truth) {
      if (err) return callback(err);
      if (!truth) return callback(null);
      fn(next);
    }

    check(null, true);
  }
  /**
   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
   * the order of operations, the arguments `test` and `iteratee` are switched.
   *
   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
   *
   * @name doWhilst
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {Function} iteratee - A function which is called each time `test`
   * passes. The function is passed a `callback(err)`, which must be called once
   * it has completed with an optional `err` argument. Invoked with (callback).
   * @param {Function} test - synchronous truth test to perform after each
   * execution of `iteratee`. Invoked with the non-error callback results of 
   * `iteratee`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `iteratee` has stopped.
   * `callback` will be passed an error and any arguments passed to the final
   * `iteratee`'s callback. Invoked with (err, [results]);
   */


  function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback || noop);
    var next = rest(function (err, args) {
      if (err) return callback(err);
      if (test.apply(this, args)) return iteratee(next);
      callback.apply(null, [null].concat(args));
    });
    iteratee(next);
  }
  /**
   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
   * argument ordering differs from `until`.
   *
   * @name doUntil
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
   * @category Control Flow
   * @param {Function} fn - A function which is called each time `test` fails.
   * The function is passed a `callback(err)`, which must be called once it has
   * completed with an optional `err` argument. Invoked with (callback).
   * @param {Function} test - synchronous truth test to perform after each
   * execution of `fn`. Invoked with the non-error callback results of `fn`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has passed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `fn`'s
   * callback. Invoked with (err, [results]);
   */


  function doUntil(fn, test, callback) {
    doWhilst(fn, function () {
      return !test.apply(this, arguments);
    }, callback);
  }
  /**
   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
   * is passed a callback in the form of `function (err, truth)`. If error is
   * passed to `test` or `fn`, the main callback is immediately called with the
   * value of the error.
   *
   * @name during
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {Function} test - asynchronous truth test to perform before each
   * execution of `fn`. Invoked with (callback).
   * @param {Function} fn - A function which is called each time `test` passes.
   * The function is passed a `callback(err)`, which must be called once it has
   * completed with an optional `err` argument. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error, if one occured, otherwise `null`.
   * @example
   *
   * var count = 0;
   *
   * async.during(
   *     function (callback) {
   *         return callback(null, count < 5);
   *     },
   *     function (callback) {
   *         count++;
   *         setTimeout(callback, 1000);
   *     },
   *     function (err) {
   *         // 5 seconds have passed
   *     }
   * );
   */


  function during(test, fn, callback) {
    callback = onlyOnce(callback || noop);

    function next(err) {
      if (err) return callback(err);
      test(check);
    }

    function check(err, truth) {
      if (err) return callback(err);
      if (!truth) return callback(null);
      fn(next);
    }

    test(check);
  }

  function _withoutIndex(iteratee) {
    return function (value, index, callback) {
      return iteratee(value, callback);
    };
  }
  /**
   * Applies the function `iteratee` to each item in `coll`, in parallel.
   * The `iteratee` is called with an item from the list, and a callback for when
   * it has finished. If the `iteratee` passes an error to its `callback`, the
   * main `callback` (for the `each` function) is immediately called with the
   * error.
   *
   * Note, that since this function applies `iteratee` to each item in parallel,
   * there is no guarantee that the iteratee functions will complete in order.
   *
   * @name each
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEach
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item
   * in `coll`. The iteratee is passed a `callback(err)` which must be called once
   * it has completed. If no error has occurred, the `callback` should be run
   * without arguments or with an explicit `null` argument. The array index is not
   * passed to the iteratee. Invoked with (item, callback). If you need the index,
   * use `eachOf`.
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * // assuming openFiles is an array of file names and saveFile is a function
   * // to save the modified contents of that file:
   *
   * async.each(openFiles, saveFile, function(err){
   *   // if any of the saves produced an error, err would equal that error
   * });
   *
   * // assuming openFiles is an array of file names
   * async.each(openFiles, function(file, callback) {
   *
   *     // Perform operation on file here.
   *     console.log('Processing file ' + file);
   *
   *     if( file.length > 32 ) {
   *       console.log('This file name is too long');
   *       callback('File name too long');
   *     } else {
   *       // Do work to process file here
   *       console.log('File processed');
   *       callback();
   *     }
   * }, function(err) {
   *     // if any of the file processing produced an error, err would equal that error
   *     if( err ) {
   *       // One of the iterations produced an error.
   *       // All processing will now stop.
   *       console.log('A file failed to process');
   *     } else {
   *       console.log('All files have been processed successfully');
   *     }
   * });
   */


  function eachLimit(coll, iteratee, callback) {
    eachOf(coll, _withoutIndex(iteratee), callback);
  }
  /**
   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
   *
   * @name eachLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A function to apply to each item in `coll`. The
   * iteratee is passed a `callback(err)` which must be called once it has
   * completed. If no error has occurred, the `callback` should be run without
   * arguments or with an explicit `null` argument. The array index is not passed
   * to the iteratee. Invoked with (item, callback). If you need the index, use
   * `eachOfLimit`.
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */


  function eachLimit$1(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, _withoutIndex(iteratee), callback);
  }
  /**
   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
   *
   * @name eachSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each
   * item in `coll`. The iteratee is passed a `callback(err)` which must be called
   * once it has completed. If no error has occurred, the `callback` should be run
   * without arguments or with an explicit `null` argument. The array index is
   * not passed to the iteratee. Invoked with (item, callback). If you need the
   * index, use `eachOfSeries`.
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */


  var eachSeries = doLimit(eachLimit$1, 1);
  /**
   * Wrap an async function and ensure it calls its callback on a later tick of
   * the event loop.  If the function already calls its callback on a next tick,
   * no extra deferral is added. This is useful for preventing stack overflows
   * (`RangeError: Maximum call stack size exceeded`) and generally keeping
   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
   * contained.
   *
   * @name ensureAsync
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} fn - an async function, one that expects a node-style
   * callback as its last argument.
   * @returns {Function} Returns a wrapped function with the exact same call
   * signature as the function passed in.
   * @example
   *
   * function sometimesAsync(arg, callback) {
   *     if (cache[arg]) {
   *         return callback(null, cache[arg]); // this would be synchronous!!
   *     } else {
   *         doSomeIO(arg, callback); // this IO would be asynchronous
   *     }
   * }
   *
   * // this has a risk of stack overflows if many results are cached in a row
   * async.mapSeries(args, sometimesAsync, done);
   *
   * // this will defer sometimesAsync's callback if necessary,
   * // preventing stack overflows
   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
   */

  function ensureAsync(fn) {
    return initialParams(function (args, callback) {
      var sync = true;
      args.push(function () {
        var innerArgs = arguments;

        if (sync) {
          setImmediate$1(function () {
            callback.apply(null, innerArgs);
          });
        } else {
          callback.apply(null, innerArgs);
        }
      });
      fn.apply(this, args);
      sync = false;
    });
  }

  function notId(v) {
    return !v;
  }
  /**
   * Returns `true` if every element in `coll` satisfies an async test. If any
   * iteratee call returns `false`, the main `callback` is immediately called.
   *
   * @name every
   * @static
   * @memberOf module:Collections
   * @method
   * @alias all
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in the
   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
   * which must be called with a  boolean argument once it has completed. Invoked
   * with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   * @example
   *
   * async.every(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // if result is true then every file exists
   * });
   */


  var every = doParallel(_createTester(notId, notId));
  /**
   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
   *
   * @name everyLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.every]{@link module:Collections.every}
   * @alias allLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in the
   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
   * which must be called with a  boolean argument once it has completed. Invoked
   * with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   */

  var everyLimit = doParallelLimit(_createTester(notId, notId));
  /**
   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
   *
   * @name everySeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.every]{@link module:Collections.every}
   * @alias allSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in the
   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
   * which must be called with a  boolean argument once it has completed. Invoked
   * with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   */

  var everySeries = doLimit(everyLimit, 1);
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, function (x, index, callback) {
      iteratee(x, function (err, v) {
        truthValues[index] = !!v;
        callback(err);
      });
    }, function (err) {
      if (err) return callback(err);
      var results = [];

      for (var i = 0; i < arr.length; i++) {
        if (truthValues[i]) results.push(arr[i]);
      }

      callback(null, results);
    });
  }

  function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, function (x, index, callback) {
      iteratee(x, function (err, v) {
        if (err) {
          callback(err);
        } else {
          if (v) {
            results.push({
              index: index,
              value: x
            });
          }

          callback();
        }
      });
    }, function (err) {
      if (err) {
        callback(err);
      } else {
        callback(null, arrayMap(results.sort(function (a, b) {
          return a.index - b.index;
        }), baseProperty('value')));
      }
    });
  }

  function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    filter(eachfn, coll, iteratee, callback || noop);
  }
  /**
   * Returns a new array of all the values in `coll` which pass an async truth
   * test. This operation is performed in parallel, but the results array will be
   * in the same order as the original.
   *
   * @name filter
   * @static
   * @memberOf module:Collections
   * @method
   * @alias select
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   * @example
   *
   * async.filter(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, results) {
   *     // results now equals an array of the existing files
   * });
   */


  var filter = doParallel(_filter);
  /**
   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name filterLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @alias selectLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */

  var filterLimit = doParallelLimit(_filter);
  /**
   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
   *
   * @name filterSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @alias selectSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results)
   */

  var filterSeries = doLimit(filterLimit, 1);
  /**
   * Calls the asynchronous function `fn` with a callback parameter that allows it
   * to call itself again, in series, indefinitely.
  
   * If an error is passed to the
   * callback then `errback` is called with the error, and execution stops,
   * otherwise it will never be called.
   *
   * @name forever
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Function} fn - a function to call repeatedly. Invoked with (next).
   * @param {Function} [errback] - when `fn` passes an error to it's callback,
   * this function will be called, and execution stops. Invoked with (err).
   * @example
   *
   * async.forever(
   *     function(next) {
   *         // next is suitable for passing to things that need a callback(err [, whatever]);
   *         // it will result in this function being called again.
   *     },
   *     function(err) {
   *         // if next is called with a value in its first parameter, it will appear
   *         // in here as 'err', and execution will stop.
   *     }
   * );
   */

  function forever(fn, errback) {
    var done = onlyOnce(errback || noop);
    var task = ensureAsync(fn);

    function next(err) {
      if (err) return done(err);
      task(next);
    }

    next();
  }
  /**
   * Logs the result of an `async` function to the `console`. Only works in
   * Node.js or in browsers that support `console.log` and `console.error` (such
   * as FF and Chrome). If multiple arguments are returned from the async
   * function, `console.log` is called on each argument in order.
   *
   * @name log
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} function - The function you want to eventually apply all
   * arguments to.
   * @param {...*} arguments... - Any number of arguments to apply to the function.
   * @example
   *
   * // in a module
   * var hello = function(name, callback) {
   *     setTimeout(function() {
   *         callback(null, 'hello ' + name);
   *     }, 1000);
   * };
   *
   * // in the node repl
   * node> async.log(hello, 'world');
   * 'hello world'
   */


  var log = consoleFunc('log');
  /**
   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name mapValuesLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.mapValues]{@link module:Collections.mapValues}
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A function to apply to each value in `obj`.
   * The iteratee is passed a `callback(err, transformed)` which must be called
   * once it has completed with an error (which can be `null`) and a
   * transformed value. Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   */

  function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback || noop);
    var newObj = {};
    eachOfLimit(obj, limit, function (val, key, next) {
      iteratee(val, key, function (err, result) {
        if (err) return next(err);
        newObj[key] = result;
        next();
      });
    }, function (err) {
      callback(err, newObj);
    });
  }
  /**
   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
   *
   * Produces a new Object by mapping each value of `obj` through the `iteratee`
   * function. The `iteratee` is called each `value` and `key` from `obj` and a
   * callback for when it has finished processing. Each of these callbacks takes
   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
   * passes an error to its callback, the main `callback` (for the `mapValues`
   * function) is immediately called with the error.
   *
   * Note, the order of the keys in the result is not guaranteed.  The keys will
   * be roughly in the order they complete, (but this is very engine-specific)
   *
   * @name mapValues
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each value and key in
   * `coll`. The iteratee is passed a `callback(err, transformed)` which must be
   * called once it has completed with an error (which can be `null`) and a
   * transformed value. Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   * @example
   *
   * async.mapValues({
   *     f1: 'file1',
   *     f2: 'file2',
   *     f3: 'file3'
   * }, function (file, key, callback) {
   *   fs.stat(file, callback);
   * }, function(err, result) {
   *     // result is now a map of stats for each file, e.g.
   *     // {
   *     //     f1: [stats for file1],
   *     //     f2: [stats for file2],
   *     //     f3: [stats for file3]
   *     // }
   * });
   */


  var mapValues = doLimit(mapValuesLimit, Infinity);
  /**
   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
   *
   * @name mapValuesSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.mapValues]{@link module:Collections.mapValues}
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each value in `obj`.
   * The iteratee is passed a `callback(err, transformed)` which must be called
   * once it has completed with an error (which can be `null`) and a
   * transformed value. Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   */

  var mapValuesSeries = doLimit(mapValuesLimit, 1);

  function has(obj, key) {
    return key in obj;
  }
  /**
   * Caches the results of an `async` function. When creating a hash to store
   * function results against, the callback is omitted from the hash and an
   * optional hash function can be used.
   *
   * If no hash function is specified, the first argument is used as a hash key,
   * which may work reasonably if it is a string or a data type that converts to a
   * distinct string. Note that objects and arrays will not behave reasonably.
   * Neither will cases where the other arguments are significant. In such cases,
   * specify your own hash function.
   *
   * The cache of results is exposed as the `memo` property of the function
   * returned by `memoize`.
   *
   * @name memoize
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} fn - The function to proxy and cache results from.
   * @param {Function} hasher - An optional function for generating a custom hash
   * for storing results. It has all the arguments applied to it apart from the
   * callback, and must be synchronous.
   * @returns {Function} a memoized version of `fn`
   * @example
   *
   * var slow_fn = function(name, callback) {
   *     // do something
   *     callback(null, result);
   * };
   * var fn = async.memoize(slow_fn);
   *
   * // fn can now be used as if it were slow_fn
   * fn('some name', function() {
   *     // callback
   * });
   */


  function memoize(fn, hasher) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    hasher = hasher || identity;
    var memoized = initialParams(function memoized(args, callback) {
      var key = hasher.apply(null, args);

      if (has(memo, key)) {
        setImmediate$1(function () {
          callback.apply(null, memo[key]);
        });
      } else if (has(queues, key)) {
        queues[key].push(callback);
      } else {
        queues[key] = [callback];
        fn.apply(null, args.concat(rest(function (args) {
          memo[key] = args;
          var q = queues[key];
          delete queues[key];

          for (var i = 0, l = q.length; i < l; i++) {
            q[i].apply(null, args);
          }
        })));
      }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
  }
  /**
   * Calls `callback` on a later loop around the event loop. In Node.js this just
   * calls `setImmediate`.  In the browser it will use `setImmediate` if
   * available, otherwise `setTimeout(callback, 0)`, which means other higher
   * priority events may precede the execution of `callback`.
   *
   * This is used internally for browser-compatibility purposes.
   *
   * @name nextTick
   * @static
   * @memberOf module:Utils
   * @method
   * @alias setImmediate
   * @category Util
   * @param {Function} callback - The function to call on a later loop around
   * the event loop. Invoked with (args...).
   * @param {...*} args... - any number of additional arguments to pass to the
   * callback on the next tick.
   * @example
   *
   * var call_order = [];
   * async.nextTick(function() {
   *     call_order.push('two');
   *     // call_order now equals ['one','two']
   * });
   * call_order.push('one');
   *
   * async.setImmediate(function (a, b, c) {
   *     // a, b, and c equal 1, 2, and 3
   * }, 1, 2, 3);
   */


  var _defer$1;

  if (hasNextTick) {
    _defer$1 = process.nextTick;
  } else if (hasSetImmediate) {
    _defer$1 = setImmediate;
  } else {
    _defer$1 = fallback;
  }

  var nextTick = wrap(_defer$1);

  function _parallel(eachfn, tasks, callback) {
    callback = callback || noop;
    var results = isArrayLike(tasks) ? [] : {};
    eachfn(tasks, function (task, key, callback) {
      task(rest(function (err, args) {
        if (args.length <= 1) {
          args = args[0];
        }

        results[key] = args;
        callback(err);
      }));
    }, function (err) {
      callback(err, results);
    });
  }
  /**
   * Run the `tasks` collection of functions in parallel, without waiting until
   * the previous function has completed. If any of the functions pass an error to
   * its callback, the main `callback` is immediately called with the value of the
   * error. Once the `tasks` have completed, the results are passed to the final
   * `callback` as an array.
   *
   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
   * parallel execution of code.  If your tasks do not use any timers or perform
   * any I/O, they will actually be executed in series.  Any synchronous setup
   * sections for each task will happen one after the other.  JavaScript remains
   * single-threaded.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   * results from {@link async.parallel}.
   *
   * @name parallel
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection containing functions to run.
   * Each function is passed a `callback(err, result)` which it must call on
   * completion with an error `err` (which can be `null`) and an optional `result`
   * value.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   * @example
   * async.parallel([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // the results array will equal ['one','two'] even though
   *     // the second function had a shorter timeout.
   * });
   *
   * // an example using an object instead of an array
   * async.parallel({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equals to: {one: 1, two: 2}
   * });
   */


  function parallelLimit(tasks, callback) {
    _parallel(eachOf, tasks, callback);
  }
  /**
   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name parallelLimit
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.parallel]{@link module:ControlFlow.parallel}
   * @category Control Flow
   * @param {Array|Collection} tasks - A collection containing functions to run.
   * Each function is passed a `callback(err, result)` which it must call on
   * completion with an error `err` (which can be `null`) and an optional `result`
   * value.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   */


  function parallelLimit$1(tasks, limit, callback) {
    _parallel(_eachOfLimit(limit), tasks, callback);
  }
  /**
   * A queue of tasks for the worker function to complete.
   * @typedef {Object} QueueObject
   * @memberOf module:ControlFlow
   * @property {Function} length - a function returning the number of items
   * waiting to be processed. Invoke with `queue.length()`.
   * @property {boolean} started - a boolean indicating whether or not any
   * items have been pushed and processed by the queue.
   * @property {Function} running - a function returning the number of items
   * currently being processed. Invoke with `queue.running()`.
   * @property {Function} workersList - a function returning the array of items
   * currently being processed. Invoke with `queue.workersList()`.
   * @property {Function} idle - a function returning false if there are items
   * waiting or being processed, or true if not. Invoke with `queue.idle()`.
   * @property {number} concurrency - an integer for determining how many `worker`
   * functions should be run in parallel. This property can be changed after a
   * `queue` is created to alter the concurrency on-the-fly.
   * @property {Function} push - add a new task to the `queue`. Calls `callback`
   * once the `worker` has finished processing the task. Instead of a single task,
   * a `tasks` array can be submitted. The respective callback is used for every
   * task in the list. Invoke with `queue.push(task, [callback])`,
   * @property {Function} unshift - add a new task to the front of the `queue`.
   * Invoke with `queue.unshift(task, [callback])`.
   * @property {Function} saturated - a callback that is called when the number of
   * running workers hits the `concurrency` limit, and further tasks will be
   * queued.
   * @property {Function} unsaturated - a callback that is called when the number
   * of running workers is less than the `concurrency` & `buffer` limits, and
   * further tasks will not be queued.
   * @property {number} buffer - A minimum threshold buffer in order to say that
   * the `queue` is `unsaturated`.
   * @property {Function} empty - a callback that is called when the last item
   * from the `queue` is given to a `worker`.
   * @property {Function} drain - a callback that is called when the last item
   * from the `queue` has returned from the `worker`.
   * @property {Function} error - a callback that is called when a task errors.
   * Has the signature `function(error, task)`.
   * @property {boolean} paused - a boolean for determining whether the queue is
   * in a paused state.
   * @property {Function} pause - a function that pauses the processing of tasks
   * until `resume()` is called. Invoke with `queue.pause()`.
   * @property {Function} resume - a function that resumes the processing of
   * queued tasks when the queue is paused. Invoke with `queue.resume()`.
   * @property {Function} kill - a function that removes the `drain` callback and
   * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.
   */

  /**
   * Creates a `queue` object with the specified `concurrency`. Tasks added to the
   * `queue` are processed in parallel (up to the `concurrency` limit). If all
   * `worker`s are in progress, the task is queued until one becomes available.
   * Once a `worker` completes a `task`, that `task`'s callback is called.
   *
   * @name queue
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Function} worker - An asynchronous function for processing a queued
   * task, which must call its `callback(err)` argument when finished, with an
   * optional `error` as an argument.  If you want to handle errors from an
   * individual task, pass a callback to `q.push()`. Invoked with
   * (task, callback).
   * @param {number} [concurrency=1] - An `integer` for determining how many
   * `worker` functions should be run in parallel.  If omitted, the concurrency
   * defaults to `1`.  If the concurrency is `0`, an error is thrown.
   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
   * attached as certain properties to listen for specific events during the
   * lifecycle of the queue.
   * @example
   *
   * // create a queue object with concurrency 2
   * var q = async.queue(function(task, callback) {
   *     console.log('hello ' + task.name);
   *     callback();
   * }, 2);
   *
   * // assign a callback
   * q.drain = function() {
   *     console.log('all items have been processed');
   * };
   *
   * // add some items to the queue
   * q.push({name: 'foo'}, function(err) {
   *     console.log('finished processing foo');
   * });
   * q.push({name: 'bar'}, function (err) {
   *     console.log('finished processing bar');
   * });
   *
   * // add some items to the queue (batch-wise)
   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
   *     console.log('finished processing item');
   * });
   *
   * // add some items to the front of the queue
   * q.unshift({name: 'bar'}, function (err) {
   *     console.log('finished processing bar');
   * });
   */


  var queue$1 = function queue$1(worker, concurrency) {
    return queue(function (items, cb) {
      worker(items[0], cb);
    }, concurrency, 1);
  };
  /**
   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
   * completed in ascending priority order.
   *
   * @name priorityQueue
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.queue]{@link module:ControlFlow.queue}
   * @category Control Flow
   * @param {Function} worker - An asynchronous function for processing a queued
   * task, which must call its `callback(err)` argument when finished, with an
   * optional `error` as an argument.  If you want to handle errors from an
   * individual task, pass a callback to `q.push()`. Invoked with
   * (task, callback).
   * @param {number} concurrency - An `integer` for determining how many `worker`
   * functions should be run in parallel.  If omitted, the concurrency defaults to
   * `1`.  If the concurrency is `0`, an error is thrown.
   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
   * differences between `queue` and `priorityQueue` objects:
   * * `push(task, priority, [callback])` - `priority` should be a number. If an
   *   array of `tasks` is given, all tasks will be assigned the same priority.
   * * The `unshift` method was removed.
   */


  var priorityQueue = function priorityQueue(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency); // Override push to accept second parameter representing priority

    q.push = function (data, priority, callback) {
      if (callback == null) callback = noop;

      if (typeof callback !== 'function') {
        throw new Error('task callback must be a function');
      }

      q.started = true;

      if (!isArray(data)) {
        data = [data];
      }

      if (data.length === 0) {
        // call drain immediately if there are no tasks
        return setImmediate$1(function () {
          q.drain();
        });
      }

      priority = priority || 0;
      var nextNode = q._tasks.head;

      while (nextNode && priority >= nextNode.priority) {
        nextNode = nextNode.next;
      }

      for (var i = 0, l = data.length; i < l; i++) {
        var item = {
          data: data[i],
          priority: priority,
          callback: callback
        };

        if (nextNode) {
          q._tasks.insertBefore(nextNode, item);
        } else {
          q._tasks.push(item);
        }
      }

      setImmediate$1(q.process);
    }; // Remove unshift function


    delete q.unshift;
    return q;
  };
  /**
   * Runs the `tasks` array of functions in parallel, without waiting until the
   * previous function has completed. Once any of the `tasks` complete or pass an
   * error to its callback, the main `callback` is immediately called. It's
   * equivalent to `Promise.race()`.
   *
   * @name race
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array containing functions to run. Each function
   * is passed a `callback(err, result)` which it must call on completion with an
   * error `err` (which can be `null`) and an optional `result` value.
   * @param {Function} callback - A callback to run once any of the functions have
   * completed. This function gets an error or result from the first function that
   * completed. Invoked with (err, result).
   * @returns undefined
   * @example
   *
   * async.race([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // main callback
   * function(err, result) {
   *     // the result will be equal to 'two' as it finishes earlier
   * });
   */


  function race(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();

    for (var i = 0, l = tasks.length; i < l; i++) {
      tasks[i](callback);
    }
  }

  var slice = Array.prototype.slice;
  /**
   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
   *
   * @name reduceRight
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reduce]{@link module:Collections.reduce}
   * @alias foldr
   * @category Collection
   * @param {Array} array - A collection to iterate over.
   * @param {*} memo - The initial state of the reduction.
   * @param {Function} iteratee - A function applied to each item in the
   * array to produce the next step in the reduction. The `iteratee` is passed a
   * `callback(err, reduction)` which accepts an optional error as its first
   * argument, and the state of the reduction as the second. If an error is
   * passed to the callback, the reduction is stopped and the main `callback` is
   * immediately called with the error. Invoked with (memo, item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the reduced value. Invoked with
   * (err, result).
   */

  function reduceRight(array, memo, iteratee, callback) {
    var reversed = slice.call(array).reverse();
    reduce(reversed, memo, iteratee, callback);
  }
  /**
   * Wraps the function in another function that always returns data even when it
   * errors.
   *
   * The object returned has either the property `error` or `value`.
   *
   * @name reflect
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} fn - The function you want to wrap
   * @returns {Function} - A function that always passes null to it's callback as
   * the error. The second argument to the callback will be an `object` with
   * either an `error` or a `value` property.
   * @example
   *
   * async.parallel([
   *     async.reflect(function(callback) {
   *         // do some stuff ...
   *         callback(null, 'one');
   *     }),
   *     async.reflect(function(callback) {
   *         // do some more stuff but error ...
   *         callback('bad stuff happened');
   *     }),
   *     async.reflect(function(callback) {
   *         // do some more stuff ...
   *         callback(null, 'two');
   *     })
   * ],
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results[0].value = 'one'
   *     // results[1].error = 'bad stuff happened'
   *     // results[2].value = 'two'
   * });
   */


  function reflect(fn) {
    return initialParams(function reflectOn(args, reflectCallback) {
      args.push(rest(function callback(err, cbArgs) {
        if (err) {
          reflectCallback(null, {
            error: err
          });
        } else {
          var value = null;

          if (cbArgs.length === 1) {
            value = cbArgs[0];
          } else if (cbArgs.length > 1) {
            value = cbArgs;
          }

          reflectCallback(null, {
            value: value
          });
        }
      }));
      return fn.apply(this, args);
    });
  }

  function reject$1(eachfn, arr, iteratee, callback) {
    _filter(eachfn, arr, function (value, cb) {
      iteratee(value, function (err, v) {
        cb(err, !v);
      });
    }, callback);
  }
  /**
   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
   *
   * @name reject
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   * @example
   *
   * async.reject(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, results) {
   *     // results now equals an array of missing files
   *     createFiles(results);
   * });
   */


  var reject = doParallel(reject$1);
  /**
   * A helper function that wraps an array or an object of functions with reflect.
   *
   * @name reflectAll
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.reflect]{@link module:Utils.reflect}
   * @category Util
   * @param {Array} tasks - The array of functions to wrap in `async.reflect`.
   * @returns {Array} Returns an array of functions, each function wrapped in
   * `async.reflect`
   * @example
   *
   * let tasks = [
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         // do some more stuff but error ...
   *         callback(new Error('bad stuff happened'));
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ];
   *
   * async.parallel(async.reflectAll(tasks),
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results[0].value = 'one'
   *     // results[1].error = Error('bad stuff happened')
   *     // results[2].value = 'two'
   * });
   *
   * // an example using an object instead of an array
   * let tasks = {
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         callback('two');
   *     },
   *     three: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'three');
   *         }, 100);
   *     }
   * };
   *
   * async.parallel(async.reflectAll(tasks),
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results.one.value = 'one'
   *     // results.two.error = 'two'
   *     // results.three.value = 'three'
   * });
   */

  function reflectAll(tasks) {
    var results;

    if (isArray(tasks)) {
      results = arrayMap(tasks, reflect);
    } else {
      results = {};
      baseForOwn(tasks, function (task, key) {
        results[key] = reflect.call(this, task);
      });
    }

    return results;
  }
  /**
   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name rejectLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reject]{@link module:Collections.reject}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */


  var rejectLimit = doParallelLimit(reject$1);
  /**
   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
   *
   * @name rejectSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reject]{@link module:Collections.reject}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */

  var rejectSeries = doLimit(rejectLimit, 1);
  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */

  function constant$1(value) {
    return function () {
      return value;
    };
  }
  /**
   * Attempts to get a successful response from `task` no more than `times` times
   * before returning an error. If the task is successful, the `callback` will be
   * passed the result of the successful task. If all attempts fail, the callback
   * will be passed the error and result (if any) of the final attempt.
   *
   * @name retry
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
   * object with `times` and `interval` or a number.
   * * `times` - The number of attempts to make before giving up.  The default
   *   is `5`.
   * * `interval` - The time to wait between retries, in milliseconds.  The
   *   default is `0`. The interval may also be specified as a function of the
   *   retry count (see example).
   * * `errorFilter` - An optional synchronous function that is invoked on
   *   erroneous result. If it returns `true` the retry attempts will continue;
   *   if the function returns `false` the retry flow is aborted with the current
   *   attempt's error and result being returned to the final callback.
   *   Invoked with (err).
   * * If `opts` is a number, the number specifies the number of times to retry,
   *   with the default interval of `0`.
   * @param {Function} task - A function which receives two arguments: (1) a
   * `callback(err, result)` which must be called when finished, passing `err`
   * (which can be `null`) and the `result` of the function's execution, and (2)
   * a `results` object, containing the results of the previously executed
   * functions (if nested inside another control flow). Invoked with
   * (callback, results).
   * @param {Function} [callback] - An optional callback which is called when the
   * task has succeeded, or after the final failed attempt. It receives the `err`
   * and `result` arguments of the last attempt at completing the `task`. Invoked
   * with (err, results).
   * @example
   *
   * // The `retry` function can be used as a stand-alone control flow by passing
   * // a callback, as shown below:
   *
   * // try calling apiMethod 3 times
   * async.retry(3, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 3 times, waiting 200 ms between each retry
   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 10 times with exponential backoff
   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
   * async.retry({
   *   times: 10,
   *   interval: function(retryCount) {
   *     return 50 * Math.pow(2, retryCount);
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod the default 5 times no delay between each retry
   * async.retry(apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod only when error condition satisfies, all other
   * // errors will abort the retry control flow and return to final callback
   * async.retry({
   *   errorFilter: function(err) {
   *     return err.message === 'Temporary error'; // only retry on a specific error
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // It can also be embedded within other control flow functions to retry
   * // individual methods that are not as reliable, like this:
   * async.auto({
   *     users: api.getUsers.bind(api),
   *     payments: async.retry(3, api.getPayments.bind(api))
   * }, function(err, results) {
   *     // do something with the results
   * });
   *
   */


  function retry(opts, task, callback) {
    var DEFAULT_TIMES = 5;
    var DEFAULT_INTERVAL = 0;
    var options = {
      times: DEFAULT_TIMES,
      intervalFunc: constant$1(DEFAULT_INTERVAL)
    };

    function parseTimes(acc, t) {
      if (typeof t === 'object') {
        acc.times = +t.times || DEFAULT_TIMES;
        acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);
        acc.errorFilter = t.errorFilter;
      } else if (typeof t === 'number' || typeof t === 'string') {
        acc.times = +t || DEFAULT_TIMES;
      } else {
        throw new Error("Invalid arguments for async.retry");
      }
    }

    if (arguments.length < 3 && typeof opts === 'function') {
      callback = task || noop;
      task = opts;
    } else {
      parseTimes(options, opts);
      callback = callback || noop;
    }

    if (typeof task !== 'function') {
      throw new Error("Invalid arguments for async.retry");
    }

    var attempt = 1;

    function retryAttempt() {
      task(function (err) {
        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {
          setTimeout(retryAttempt, options.intervalFunc(attempt));
        } else {
          callback.apply(null, arguments);
        }
      });
    }

    retryAttempt();
  }
  /**
   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it
   * retryable, rather than immediately calling it with retries.
   *
   * @name retryable
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.retry]{@link module:ControlFlow.retry}
   * @category Control Flow
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
   * options, exactly the same as from `retry`
   * @param {Function} task - the asynchronous function to wrap
   * @returns {Functions} The wrapped function, which when invoked, will retry on
   * an error, based on the parameters specified in `opts`.
   * @example
   *
   * async.auto({
   *     dep1: async.retryable(3, getFromFlakyService),
   *     process: ["dep1", async.retryable(3, function (results, cb) {
   *         maybeProcessData(results.dep1, cb);
   *     })]
   * }, callback);
   */


  var retryable = function retryable(opts, task) {
    if (!task) {
      task = opts;
      opts = null;
    }

    return initialParams(function (args, callback) {
      function taskFn(cb) {
        task.apply(null, args.concat(cb));
      }

      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);
    });
  };
  /**
   * Run the functions in the `tasks` collection in series, each one running once
   * the previous function has completed. If any functions in the series pass an
   * error to its callback, no more functions are run, and `callback` is
   * immediately called with the value of the error. Otherwise, `callback`
   * receives an array of results when `tasks` have completed.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function, and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   *  results from {@link async.series}.
   *
   * **Note** that while many implementations preserve the order of object
   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
   * explicitly states that
   *
   * > The mechanics and order of enumerating the properties is not specified.
   *
   * So if you rely on the order in which your series of functions are executed,
   * and want this to work on all platforms, consider using an array.
   *
   * @name series
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection containing functions to run, each
   * function is passed a `callback(err, result)` it must call on completion with
   * an error `err` (which can be `null`) and an optional `result` value.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This function gets a results array (or object)
   * containing all the result arguments passed to the `task` callbacks. Invoked
   * with (err, result).
   * @example
   * async.series([
   *     function(callback) {
   *         // do some stuff ...
   *         callback(null, 'one');
   *     },
   *     function(callback) {
   *         // do some more stuff ...
   *         callback(null, 'two');
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // results is now equal to ['one', 'two']
   * });
   *
   * async.series({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback){
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equal to: {one: 1, two: 2}
   * });
   */


  function series(tasks, callback) {
    _parallel(eachOfSeries, tasks, callback);
  }
  /**
   * Returns `true` if at least one element in the `coll` satisfies an async test.
   * If any iteratee call returns `true`, the main `callback` is immediately
   * called.
   *
   * @name some
   * @static
   * @memberOf module:Collections
   * @method
   * @alias any
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in the array
   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
   * be called with a boolean argument once it has completed. Invoked with
   * (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   * @example
   *
   * async.some(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // if result is true then at least one of the files exists
   * });
   */


  var some = doParallel(_createTester(Boolean, identity));
  /**
   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
   *
   * @name someLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.some]{@link module:Collections.some}
   * @alias anyLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in the array
   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
   * be called with a boolean argument once it has completed. Invoked with
   * (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   */

  var someLimit = doParallelLimit(_createTester(Boolean, identity));
  /**
   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
   *
   * @name someSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.some]{@link module:Collections.some}
   * @alias anySeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in the array
   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
   * be called with a boolean argument once it has completed. Invoked with
   * (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   */

  var someSeries = doLimit(someLimit, 1);
  /**
   * Sorts a list by the results of running each `coll` value through an async
   * `iteratee`.
   *
   * @name sortBy
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A function to apply to each item in `coll`.
   * The iteratee is passed a `callback(err, sortValue)` which must be called once
   * it has completed with an error (which can be `null`) and a value to use as
   * the sort criteria. Invoked with (item, callback).
   * @param {Function} callback - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is the items
   * from the original `coll` sorted by the values returned by the `iteratee`
   * calls. Invoked with (err, results).
   * @example
   *
   * async.sortBy(['file1','file2','file3'], function(file, callback) {
   *     fs.stat(file, function(err, stats) {
   *         callback(err, stats.mtime);
   *     });
   * }, function(err, results) {
   *     // results is now the original array of files sorted by
   *     // modified date
   * });
   *
   * // By modifying the callback parameter the
   * // sorting order can be influenced:
   *
   * // ascending order
   * async.sortBy([1,9,3,5], function(x, callback) {
   *     callback(null, x);
   * }, function(err,result) {
   *     // result callback
   * });
   *
   * // descending order
   * async.sortBy([1,9,3,5], function(x, callback) {
   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
   * }, function(err,result) {
   *     // result callback
   * });
   */

  function sortBy(coll, iteratee, callback) {
    map(coll, function (x, callback) {
      iteratee(x, function (err, criteria) {
        if (err) return callback(err);
        callback(null, {
          value: x,
          criteria: criteria
        });
      });
    }, function (err, results) {
      if (err) return callback(err);
      callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
    });

    function comparator(left, right) {
      var a = left.criteria,
          b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }
  }
  /**
   * Sets a time limit on an asynchronous function. If the function does not call
   * its callback within the specified milliseconds, it will be called with a
   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
   *
   * @name timeout
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} asyncFn - The asynchronous function you want to set the
   * time limit.
   * @param {number} milliseconds - The specified time limit.
   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
   * to timeout Error for more information..
   * @returns {Function} Returns a wrapped function that can be used with any of
   * the control flow functions. Invoke this function with the same
   * parameters as you would `asyncFunc`.
   * @example
   *
   * function myFunction(foo, callback) {
   *     doAsyncTask(foo, function(err, data) {
   *         // handle errors
   *         if (err) return callback(err);
   *
   *         // do some stuff ...
   *
   *         // return processed data
   *         return callback(null, data);
   *     });
   * }
   *
   * var wrapped = async.timeout(myFunction, 1000);
   *
   * // call `wrapped` as you would `myFunction`
   * wrapped({ bar: 'bar' }, function(err, data) {
   *     // if `myFunction` takes < 1000 ms to execute, `err`
   *     // and `data` will have their expected values
   *
   *     // else `err` will be an Error with the code 'ETIMEDOUT'
   * });
   */


  function timeout(asyncFn, milliseconds, info) {
    var originalCallback, timer;
    var timedOut = false;

    function injectedCallback() {
      if (!timedOut) {
        originalCallback.apply(null, arguments);
        clearTimeout(timer);
      }
    }

    function timeoutCallback() {
      var name = asyncFn.name || 'anonymous';
      var error = new Error('Callback function "' + name + '" timed out.');
      error.code = 'ETIMEDOUT';

      if (info) {
        error.info = info;
      }

      timedOut = true;
      originalCallback(error);
    }

    return initialParams(function (args, origCallback) {
      originalCallback = origCallback; // setup timer and call original function

      timer = setTimeout(timeoutCallback, milliseconds);
      asyncFn.apply(null, args.concat(injectedCallback));
    });
  }
  /* Built-in method references for those with the same name as other `lodash` methods. */


  var nativeCeil = Math.ceil;
  var nativeMax$1 = Math.max;
  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */

  function baseRange(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),
        result = Array(length);

    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }

    return result;
  }
  /**
   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name timesLimit
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.times]{@link module:ControlFlow.times}
   * @category Control Flow
   * @param {number} count - The number of times to run the function.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - The function to call `n` times. Invoked with the
   * iteration index and a callback (n, next).
   * @param {Function} callback - see [async.map]{@link module:Collections.map}.
   */


  function timeLimit(count, limit, iteratee, callback) {
    mapLimit(baseRange(0, count, 1), limit, iteratee, callback);
  }
  /**
   * Calls the `iteratee` function `n` times, and accumulates results in the same
   * manner you would use with [map]{@link module:Collections.map}.
   *
   * @name times
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Control Flow
   * @param {number} n - The number of times to run the function.
   * @param {Function} iteratee - The function to call `n` times. Invoked with the
   * iteration index and a callback (n, next).
   * @param {Function} callback - see {@link module:Collections.map}.
   * @example
   *
   * // Pretend this is some complicated async factory
   * var createUser = function(id, callback) {
   *     callback(null, {
   *         id: 'user' + id
   *     });
   * };
   *
   * // generate 5 users
   * async.times(5, function(n, next) {
   *     createUser(n, function(err, user) {
   *         next(err, user);
   *     });
   * }, function(err, users) {
   *     // we should now have 5 users
   * });
   */


  var times = doLimit(timeLimit, Infinity);
  /**
   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
   *
   * @name timesSeries
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.times]{@link module:ControlFlow.times}
   * @category Control Flow
   * @param {number} n - The number of times to run the function.
   * @param {Function} iteratee - The function to call `n` times. Invoked with the
   * iteration index and a callback (n, next).
   * @param {Function} callback - see {@link module:Collections.map}.
   */

  var timesSeries = doLimit(timeLimit, 1);
  /**
   * A relative of `reduce`.  Takes an Object or Array, and iterates over each
   * element in series, each step potentially mutating an `accumulator` value.
   * The type of the accumulator defaults to the type of collection passed in.
   *
   * @name transform
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {*} [accumulator] - The initial state of the transform.  If omitted,
   * it will default to an empty Object or Array, depending on the type of `coll`
   * @param {Function} iteratee - A function applied to each item in the
   * collection that potentially modifies the accumulator. The `iteratee` is
   * passed a `callback(err)` which accepts an optional error as its first
   * argument. If an error is passed to the callback, the transform is stopped
   * and the main `callback` is immediately called with the error.
   * Invoked with (accumulator, item, key, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the transformed accumulator.
   * Invoked with (err, result).
   * @example
   *
   * async.transform([1,2,3], function(acc, item, index, callback) {
   *     // pointless async:
   *     process.nextTick(function() {
   *         acc.push(item * 2)
   *         callback(null)
   *     });
   * }, function(err, result) {
   *     // result is now equal to [2, 4, 6]
   * });
   *
   * @example
   *
   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
   *     setImmediate(function () {
   *         obj[key] = val * 2;
   *         callback();
   *     })
   * }, function (err, result) {
   *     // result is equal to {a: 2, b: 4, c: 6}
   * })
   */

  function transform(coll, accumulator, iteratee, callback) {
    if (arguments.length === 3) {
      callback = iteratee;
      iteratee = accumulator;
      accumulator = isArray(coll) ? [] : {};
    }

    callback = once(callback || noop);
    eachOf(coll, function (v, k, cb) {
      iteratee(accumulator, v, k, cb);
    }, function (err) {
      callback(err, accumulator);
    });
  }
  /**
   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
   * unmemoized form. Handy for testing.
   *
   * @name unmemoize
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.memoize]{@link module:Utils.memoize}
   * @category Util
   * @param {Function} fn - the memoized function
   * @returns {Function} a function that calls the original unmemoized function
   */


  function unmemoize(fn) {
    return function () {
      return (fn.unmemoized || fn).apply(null, arguments);
    };
  }
  /**
   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
   * stopped, or an error occurs.
   *
   * @name whilst
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Function} test - synchronous truth test to perform before each
   * execution of `iteratee`. Invoked with ().
   * @param {Function} iteratee - A function which is called each time `test` passes.
   * The function is passed a `callback(err)`, which must be called once it has
   * completed with an optional `err` argument. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   * @returns undefined
   * @example
   *
   * var count = 0;
   * async.whilst(
   *     function() { return count < 5; },
   *     function(callback) {
   *         count++;
   *         setTimeout(function() {
   *             callback(null, count);
   *         }, 1000);
   *     },
   *     function (err, n) {
   *         // 5 seconds have passed, n = 5
   *     }
   * );
   */


  function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback || noop);
    if (!test()) return callback(null);
    var next = rest(function (err, args) {
      if (err) return callback(err);
      if (test()) return iteratee(next);
      callback.apply(null, [null].concat(args));
    });
    iteratee(next);
  }
  /**
   * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when
   * stopped, or an error occurs. `callback` will be passed an error and any
   * arguments passed to the final `fn`'s callback.
   *
   * The inverse of [whilst]{@link module:ControlFlow.whilst}.
   *
   * @name until
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {Function} test - synchronous truth test to perform before each
   * execution of `fn`. Invoked with ().
   * @param {Function} fn - A function which is called each time `test` fails.
   * The function is passed a `callback(err)`, which must be called once it has
   * completed with an optional `err` argument. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has passed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `fn`'s
   * callback. Invoked with (err, [results]);
   */


  function until(test, fn, callback) {
    whilst(function () {
      return !test.apply(this, arguments);
    }, fn, callback);
  }
  /**
   * Runs the `tasks` array of functions in series, each passing their results to
   * the next in the array. However, if any of the `tasks` pass an error to their
   * own callback, the next function is not executed, and the main `callback` is
   * immediately called with the error.
   *
   * @name waterfall
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array of functions to run, each function is passed
   * a `callback(err, result1, result2, ...)` it must call on completion. The
   * first argument is an error (which can be `null`) and any further arguments
   * will be passed as arguments in order to the next task.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This will be passed the results of the last task's
   * callback. Invoked with (err, [results]).
   * @returns undefined
   * @example
   *
   * async.waterfall([
   *     function(callback) {
   *         callback(null, 'one', 'two');
   *     },
   *     function(arg1, arg2, callback) {
   *         // arg1 now equals 'one' and arg2 now equals 'two'
   *         callback(null, 'three');
   *     },
   *     function(arg1, callback) {
   *         // arg1 now equals 'three'
   *         callback(null, 'done');
   *     }
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   *
   * // Or, with named functions:
   * async.waterfall([
   *     myFirstFunction,
   *     mySecondFunction,
   *     myLastFunction,
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   * function myFirstFunction(callback) {
   *     callback(null, 'one', 'two');
   * }
   * function mySecondFunction(arg1, arg2, callback) {
   *     // arg1 now equals 'one' and arg2 now equals 'two'
   *     callback(null, 'three');
   * }
   * function myLastFunction(arg1, callback) {
   *     // arg1 now equals 'three'
   *     callback(null, 'done');
   * }
   */


  var waterfall = function waterfall(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
      if (taskIndex === tasks.length) {
        return callback.apply(null, [null].concat(args));
      }

      var taskCallback = onlyOnce(rest(function (err, args) {
        if (err) {
          return callback.apply(null, [err].concat(args));
        }

        nextTask(args);
      }));
      args.push(taskCallback);
      var task = tasks[taskIndex++];
      task.apply(null, args);
    }

    nextTask([]);
  };
  /**
   * Async is a utility module which provides straight-forward, powerful functions
   * for working with asynchronous JavaScript. Although originally designed for
   * use with [Node.js](http://nodejs.org) and installable via
   * `npm install --save async`, it can also be used directly in the browser.
   * @module async
   */

  /**
   * A collection of `async` functions for manipulating collections, such as
   * arrays and objects.
   * @module Collections
   */

  /**
   * A collection of `async` functions for controlling the flow through a script.
   * @module ControlFlow
   */

  /**
   * A collection of `async` utility functions.
   * @module Utils
   */


  var index = {
    applyEach: applyEach,
    applyEachSeries: applyEachSeries,
    apply: apply$2,
    asyncify: asyncify,
    auto: auto,
    autoInject: autoInject,
    cargo: cargo,
    compose: compose,
    concat: concat,
    concatSeries: concatSeries,
    constant: constant,
    detect: detect,
    detectLimit: detectLimit,
    detectSeries: detectSeries,
    dir: dir,
    doDuring: doDuring,
    doUntil: doUntil,
    doWhilst: doWhilst,
    during: during,
    each: eachLimit,
    eachLimit: eachLimit$1,
    eachOf: eachOf,
    eachOfLimit: eachOfLimit,
    eachOfSeries: eachOfSeries,
    eachSeries: eachSeries,
    ensureAsync: ensureAsync,
    every: every,
    everyLimit: everyLimit,
    everySeries: everySeries,
    filter: filter,
    filterLimit: filterLimit,
    filterSeries: filterSeries,
    forever: forever,
    log: log,
    map: map,
    mapLimit: mapLimit,
    mapSeries: mapSeries,
    mapValues: mapValues,
    mapValuesLimit: mapValuesLimit,
    mapValuesSeries: mapValuesSeries,
    memoize: memoize,
    nextTick: nextTick,
    parallel: parallelLimit,
    parallelLimit: parallelLimit$1,
    priorityQueue: priorityQueue,
    queue: queue$1,
    race: race,
    reduce: reduce,
    reduceRight: reduceRight,
    reflect: reflect,
    reflectAll: reflectAll,
    reject: reject,
    rejectLimit: rejectLimit,
    rejectSeries: rejectSeries,
    retry: retry,
    retryable: retryable,
    seq: seq$1,
    series: series,
    setImmediate: setImmediate$1,
    some: some,
    someLimit: someLimit,
    someSeries: someSeries,
    sortBy: sortBy,
    timeout: timeout,
    times: times,
    timesLimit: timeLimit,
    timesSeries: timesSeries,
    transform: transform,
    unmemoize: unmemoize,
    until: until,
    waterfall: waterfall,
    whilst: whilst,
    // aliases
    all: every,
    any: some,
    forEach: eachLimit,
    forEachSeries: eachSeries,
    forEachLimit: eachLimit$1,
    forEachOf: eachOf,
    forEachOfSeries: eachOfSeries,
    forEachOfLimit: eachOfLimit,
    inject: reduce,
    foldl: reduce,
    foldr: reduceRight,
    select: filter,
    selectLimit: filterLimit,
    selectSeries: filterSeries,
    wrapSync: asyncify
  };
  exports['default'] = index;
  exports.applyEach = applyEach;
  exports.applyEachSeries = applyEachSeries;
  exports.apply = apply$2;
  exports.asyncify = asyncify;
  exports.auto = auto;
  exports.autoInject = autoInject;
  exports.cargo = cargo;
  exports.compose = compose;
  exports.concat = concat;
  exports.concatSeries = concatSeries;
  exports.constant = constant;
  exports.detect = detect;
  exports.detectLimit = detectLimit;
  exports.detectSeries = detectSeries;
  exports.dir = dir;
  exports.doDuring = doDuring;
  exports.doUntil = doUntil;
  exports.doWhilst = doWhilst;
  exports.during = during;
  exports.each = eachLimit;
  exports.eachLimit = eachLimit$1;
  exports.eachOf = eachOf;
  exports.eachOfLimit = eachOfLimit;
  exports.eachOfSeries = eachOfSeries;
  exports.eachSeries = eachSeries;
  exports.ensureAsync = ensureAsync;
  exports.every = every;
  exports.everyLimit = everyLimit;
  exports.everySeries = everySeries;
  exports.filter = filter;
  exports.filterLimit = filterLimit;
  exports.filterSeries = filterSeries;
  exports.forever = forever;
  exports.log = log;
  exports.map = map;
  exports.mapLimit = mapLimit;
  exports.mapSeries = mapSeries;
  exports.mapValues = mapValues;
  exports.mapValuesLimit = mapValuesLimit;
  exports.mapValuesSeries = mapValuesSeries;
  exports.memoize = memoize;
  exports.nextTick = nextTick;
  exports.parallel = parallelLimit;
  exports.parallelLimit = parallelLimit$1;
  exports.priorityQueue = priorityQueue;
  exports.queue = queue$1;
  exports.race = race;
  exports.reduce = reduce;
  exports.reduceRight = reduceRight;
  exports.reflect = reflect;
  exports.reflectAll = reflectAll;
  exports.reject = reject;
  exports.rejectLimit = rejectLimit;
  exports.rejectSeries = rejectSeries;
  exports.retry = retry;
  exports.retryable = retryable;
  exports.seq = seq$1;
  exports.series = series;
  exports.setImmediate = setImmediate$1;
  exports.some = some;
  exports.someLimit = someLimit;
  exports.someSeries = someSeries;
  exports.sortBy = sortBy;
  exports.timeout = timeout;
  exports.times = times;
  exports.timesLimit = timeLimit;
  exports.timesSeries = timesSeries;
  exports.transform = transform;
  exports.unmemoize = unmemoize;
  exports.until = until;
  exports.waterfall = waterfall;
  exports.whilst = whilst;
  exports.all = every;
  exports.allLimit = everyLimit;
  exports.allSeries = everySeries;
  exports.any = some;
  exports.anyLimit = someLimit;
  exports.anySeries = someSeries;
  exports.find = detect;
  exports.findLimit = detectLimit;
  exports.findSeries = detectSeries;
  exports.forEach = eachLimit;
  exports.forEachSeries = eachSeries;
  exports.forEachLimit = eachLimit$1;
  exports.forEachOf = eachOf;
  exports.forEachOfSeries = eachOfSeries;
  exports.forEachOfLimit = eachOfLimit;
  exports.inject = reduce;
  exports.foldl = reduce;
  exports.foldr = reduceRight;
  exports.select = filter;
  exports.selectLimit = filterLimit;
  exports.selectSeries = filterSeries;
  exports.wrapSync = asyncify;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

cc._RF.pop();

}).call(this,require("C:/ProgramData/cocos/editors/Creator/2.4.4/resources/app.asar/node_modules/process/browser.js"),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/process/browser.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/core/min/lodash.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (global){
"use strict";
cc._RF.push(module, '01327NJSJtLpp2y1RI+JiC6', 'lodash');
// Script/core/min/lodash.js

"use strict";

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;
(function () {
  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;
  /** Used as the semantic version number. */

  var VERSION = '4.17.4';
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /** Error message constants. */

  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /** Used as the internal argument placeholder. */

  var PLACEHOLDER = '__lodash_placeholder__';
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /** Used to compose bitmasks for function metadata. */

  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;
  /** Used as default options for `_.truncate`. */

  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';
  /** Used to detect hot functions by number of calls within a span of milliseconds. */

  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  /** Used to indicate the type of lazy iteratees. */

  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;
  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;
  /** Used as references for the maximum length and index of an array. */

  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
  /** Used to associate wrap methods with their bit flags. */

  var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to match empty string literals in compiled template source. */

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /** Used to match HTML entities and HTML characters. */

  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  /** Used to match template delimiters. */

  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;
  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);
  /** Used to match leading and trailing whitespace. */

  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;
  /** Used to match wrap detail comments. */

  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;
  /** Used to match words composed of alphanumeric characters. */

  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** Used to match `RegExp` flags from their coerced string values. */

  var reFlags = /\w*$/;
  /** Used to detect bad signed hexadecimal string values. */

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  /** Used to detect binary string values. */

  var reIsBinary = /^0b[01]+$/i;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used to detect octal string values. */

  var reIsOctal = /^0o[0-7]+$/i;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /** Used to match Latin Unicode letters (excluding mathematical operators). */

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  /** Used to ensure capturing order of template delimiters. */

  var reNoMatch = /($^)/;
  /** Used to match unescaped characters in compiled string literals. */

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  /** Used to compose unicode character classes. */

  var rsAstralRange = "\\ud800-\\udfff",
      rsComboMarksRange = "\\u0300-\\u036f",
      reComboHalfMarksRange = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange = "\\u20d0-\\u20ff",
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = "\\u2700-\\u27bf",
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = "\\u2000-\\u206f",
      rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = "\\ufe0e\\ufe0f",
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  /** Used to compose unicode capture groups. */

  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = "\\u200d";
  /** Used to compose unicode regexes. */

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  /** Used to match apostrophes. */

  var reApos = RegExp(rsApos, 'g');
  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */

  var reComboMark = RegExp(rsCombo, 'g');
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  /** Used to match complex or compound words. */

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
  /** Used to detect strings that need a more robust regexp to match words. */

  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  /** Used to assign default `context` object properties. */

  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
  /** Used to make template sourceURLs easier to identify. */

  var templateCounter = -1;
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  /** Used to map Latin Unicode letters to basic Latin letters. */

  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };
  /** Used to map characters to HTML entities. */

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  /** Used to map HTML entities to characters. */

  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };
  /** Used to escape characters for inclusion in compiled string literals. */

  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };
  /** Built-in method references without a dependency on `root`. */

  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;
  /** Detect free variable `global` from Node.js. */

  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  /** Detect free variable `self`. */

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root = freeGlobal || freeSelf || Function('return this')();
  /** Detect free variable `exports`. */

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  /** Detect free variable `module`. */

  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  /** Detect the popular CommonJS extension `module.exports`. */

  var moduleExports = freeModule && freeModule.exports === freeExports;
  /** Detect free variable `process` from Node.js. */

  var freeProcess = moduleExports && freeGlobal.process;
  /** Used to access faster Node.js helpers. */

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();
  /* Node.js helper references. */


  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */

  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }
  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */


  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }
  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */


  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }
  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */


  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }

    return accumulator;
  }
  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */


  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }
  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */


  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }

    return array;
  }
  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */


  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }

    return true;
  }
  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */


  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }
  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */


  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */


  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }
  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */


  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }
  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */


  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }
  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */


  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }
  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */


  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[--length];
    }

    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }

    return accumulator;
  }
  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */


  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }
  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */


  var asciiSize = baseProperty('length');
  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function asciiToArray(string) {
    return string.split('');
  }
  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */


  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }
  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */


  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }

    return -1;
  }
  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */


  function baseIsNaN(value) {
    return value !== value;
  }
  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */


  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? baseSum(array, iteratee) / length : NAN;
  }
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */


  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }
  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */


  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }
  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */


  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }
  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */


  function baseSortBy(array, comparer) {
    var length = array.length;
    array.sort(comparer);

    while (length--) {
      array[length] = array[length].value;
    }

    return array;
  }
  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */


  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);

      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }

    return result;
  }
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */


  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }
  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */


  function baseToPairs(object, props) {
    return arrayMap(props, function (key) {
      return [key, object[key]];
    });
  }
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */


  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }
  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */


  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }
  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */


  function cacheHas(cache, key) {
    return cache.has(key);
  }
  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */


  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

    return index;
  }
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */


  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

    return index;
  }
  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */


  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }

    return result;
  }
  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */


  var deburrLetter = basePropertyOf(deburredLetters);
  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  var escapeHtmlChar = basePropertyOf(htmlEscapes);
  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }
  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */


  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */


  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }
  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */


  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }
  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */


  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }

    return result;
  }
  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */


  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */


  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }
  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */


  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }

    return result;
  }
  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */


  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }
  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */


  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = [value, value];
    });
    return result;
  }
  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }
  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */


  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;

    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }

    return index;
  }
  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */


  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */


  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }
  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */


  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;

    while (reUnicode.test(string)) {
      ++result;
    }

    return result;
  }
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */


  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }
  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */


  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }
  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */


  var runInContext = function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
    /** Built-in constructor references. */

    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;
    /** Used for built-in method references. */

    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;
    /** Used to detect overreaching core-js shims. */

    var coreJsData = context['__core-js_shared__'];
    /** Used to resolve the decompiled source of functions. */

    var funcToString = funcProto.toString;
    /** Used to check objects for own properties. */

    var hasOwnProperty = objectProto.hasOwnProperty;
    /** Used to generate unique IDs. */

    var idCounter = 0;
    /** Used to detect methods masquerading as native. */

    var maskSrcKey = function () {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? 'Symbol(src)_1.' + uid : '';
    }();
    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */


    var nativeObjectToString = objectProto.toString;
    /** Used to infer the `Object` constructor. */

    var objectCtorString = funcToString.call(Object);
    /** Used to restore the original `_` reference in `_.noConflict`. */

    var oldDash = root._;
    /** Used to detect if a method is native. */

    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
    /** Built-in value references. */

    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = function () {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }();
    /** Mocked built-ins. */


    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;
    /* Built-in method references that are verified to be native. */

    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');
    /** Used to store function metadata. */

    var metaMap = WeakMap && new WeakMap();
    /** Used to lookup unminified function names. */

    var realNames = {};
    /** Used to detect maps, sets, and weakmaps. */

    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    /** Used to convert symbols to primitives and strings. */

    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;
    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */

    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }

        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }

      return new LodashWrapper(value);
    }
    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */


    var baseCreate = function () {
      function object() {}

      return function (proto) {
        if (!isObject(proto)) {
          return {};
        }

        if (objectCreate) {
          return objectCreate(proto);
        }

        object.prototype = proto;
        var result = new object();
        object.prototype = undefined;
        return result;
      };
    }();
    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */


    function baseLodash() {// No operation performed.
    }
    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */


    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }
    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */


    lodash.templateSettings = {
      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {
        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    }; // Ensure wrappers are instances of `baseLodash`.

    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;
    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */

    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }
    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */


    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }
    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */


    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }

      return result;
    }
    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */


    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || !isRight && arrLength == length && takeCount == length) {
        return baseWrapperValue(array, this.__actions__);
      }

      var result = [];

      outer: while (length-- && resIndex < takeCount) {
        index += dir;
        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }

        result[resIndex++] = value;
      }

      return result;
    } // Ensure `LazyWrapper` is an instance of `baseLodash`.


    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;
    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;
      this.clear();

      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */


    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */


    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */


    function hashGet(key) {
      var data = this.__data__;

      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }

      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }
    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */


    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }
    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */


    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
      return this;
    } // Add methods to `Hash`.


    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;
      this.clear();

      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */


    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */


    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }

      var lastIndex = data.length - 1;

      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }

      --this.size;
      return true;
    }
    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */


    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      return index < 0 ? undefined : data[index][1];
    }
    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */


    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */


    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }

      return this;
    } // Add methods to `ListCache`.


    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;
      this.clear();

      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */


    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash(),
        'map': new (Map || ListCache)(),
        'string': new Hash()
      };
    }
    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */


    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */


    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */


    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */


    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    } // Add methods to `MapCache`.


    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */

    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();

      while (++index < length) {
        this.add(values[index]);
      }
    }
    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */


    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);

      return this;
    }
    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */


    function setCacheHas(value) {
      return this.__data__.has(value);
    } // Add methods to `SetCache`.


    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */


    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */


    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);
      this.size = data.size;
      return result;
    }
    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */


    function stackGet(key) {
      return this.__data__.get(key);
    }
    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */


    function stackHas(key) {
      return this.__data__.has(key);
    }
    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */


    function stackSet(key, value) {
      var data = this.__data__;

      if (data instanceof ListCache) {
        var pairs = data.__data__;

        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }

        data = this.__data__ = new MapCache(pairs);
      }

      data.set(key, value);
      this.size = data.size;
      return this;
    } // Add methods to `Stack`.


    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */

    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
        key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }

      return result;
    }
    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */


    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }
    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */


    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }
    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */


    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }
    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */


    function assignMergeValue(object, key, value) {
      if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */


    function assignValue(object, key, value) {
      var objValue = object[key];

      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */


    function assocIndexOf(array, key) {
      var length = array.length;

      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }

      return -1;
    }
    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */


    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function (value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }
    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */


    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */


    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */


    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }
    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */


    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }

      return result;
    }
    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */


    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }

        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }

      return number;
    }
    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */


    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }

      if (result !== undefined) {
        return result;
      }

      if (!isObject(value)) {
        return value;
      }

      var isArr = isArray(value);

      if (isArr) {
        result = initCloneArray(value);

        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }

        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);

          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }

          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      } // Check for circular references and return its corresponding clone.


      stack || (stack = new Stack());
      var stacked = stack.get(value);

      if (stacked) {
        return stacked;
      }

      stack.set(value, result);
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function (subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        } // Recursively populate clone (susceptible to call stack limits).


        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }
    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */


    function baseConforms(source) {
      var props = keys(source);
      return function (object) {
        return baseConformsTo(object, source, props);
      };
    }
    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */


    function baseConformsTo(object, source, props) {
      var length = props.length;

      if (object == null) {
        return !length;
      }

      object = Object(object);

      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if (value === undefined && !(key in object) || !predicate(value)) {
          return false;
        }
      }

      return true;
    }
    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */


    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      return setTimeout(function () {
        func.apply(undefined, args);
      }, wait);
    }
    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */


    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }

      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }

      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }

      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;

          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }

          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */


    var baseEach = createBaseEach(baseForOwn);
    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

    var baseEachRight = createBaseEach(baseForOwnRight, true);
    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */

    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function (value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }
    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */


    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */


    function baseFill(array, value, start, end) {
      var length = array.length;
      start = toInteger(start);

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }

      end = end === undefined || end > length ? length : toInteger(end);

      if (end < 0) {
        end += length;
      }

      end = start > end ? 0 : toLength(end);

      while (start < end) {
        array[start++] = value;
      }

      return array;
    }
    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */


    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function (value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }
    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */


    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];

        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }

      return result;
    }
    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */


    var baseFor = createBaseFor();
    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

    var baseForRight = createBaseFor(true);
    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */


    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }
    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */


    function baseFunctions(object, props) {
      return arrayFilter(props, function (key) {
        return isFunction(object[key]);
      });
    }
    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */


    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }

      return index && index == length ? object : undefined;
    }
    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */


    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */


    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }

      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */


    function baseGt(value, other) {
      return value > other;
    }
    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */


    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }
    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */


    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */


    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }
    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */


    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];

        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }

        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
      }

      array = arrays[0];
      var index = -1,
          seen = caches[0];

      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;

        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;

          while (--othIndex) {
            var cache = caches[othIndex];

            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }

          if (seen) {
            seen.push(computed);
          }

          result.push(value);
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */


    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function (value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }
    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */


    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }
    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */


    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */


    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }
    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */


    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */


    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }

      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }

      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */


    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }

        objIsArr = true;
        objIsObj = false;
      }

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }

      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }

      if (!isSameTag) {
        return false;
      }

      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */


    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */


    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }

      object = Object(object);

      while (index--) {
        var data = matchData[index];

        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }

      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();

          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }

          if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }

      return true;
    }
    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */


    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }

      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */


    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }
    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */


    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */


    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */


    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }

      if (value == null) {
        return identity;
      }

      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }

      return property(value);
    }
    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */


    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }

      var result = [];

      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */


    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }

      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */


    function baseLt(value, other) {
      return value < other;
    }
    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */


    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function (value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }
    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */


    function baseMatches(source) {
      var matchData = getMatchData(source);

      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }

      return function (object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */


    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }

      return function (object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */


    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }

      baseFor(source, function (srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }

          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */


    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }

      var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;

        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;

          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }

      assignMergeValue(object, key, newValue);
    }
    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */


    function baseNth(array, n) {
      var length = array.length;

      if (!length) {
        return;
      }

      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }
    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */


    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
      var result = baseMap(collection, function (value, key, collection) {
        var criteria = arrayMap(iteratees, function (iteratee) {
          return iteratee(value);
        });
        return {
          'criteria': criteria,
          'index': ++index,
          'value': value
        };
      });
      return baseSortBy(result, function (object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */


    function basePick(object, paths) {
      return basePickBy(object, paths, function (value, path) {
        return hasIn(object, path);
      });
    }
    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */


    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }

      return result;
    }
    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */


    function basePropertyDeep(path) {
      return function (object) {
        return baseGet(object, path);
      };
    }
    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */


    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }

      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }

      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }

          splice.call(array, fromIndex, 1);
        }
      }

      return array;
    }
    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */


    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];

        if (length == lastIndex || index !== previous) {
          var previous = index;

          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }

      return array;
    }
    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */


    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }
    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */


    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }

      return result;
    }
    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */


    function baseRepeat(string, n) {
      var result = '';

      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      } // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


      do {
        if (n % 2) {
          result += string;
        }

        n = nativeFloor(n / 2);

        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }
    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */


    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }
    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */


    function baseSample(collection) {
      return arraySample(values(collection));
    }
    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */


    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }
    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */


    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }

      path = castPath(path, object);
      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;

          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }

        assignValue(nested, key, newValue);
        nested = nested[key];
      }

      return object;
    }
    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */


    var baseSetData = !metaMap ? identity : function (func, data) {
      metaMap.set(func, data);
      return func;
    };
    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */

    var baseSetToString = !defineProperty ? identity : function (func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };
    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }
    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */


    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }

      end = end > length ? length : end;

      if (end < 0) {
        end += length;
      }

      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);

      while (++index < length) {
        result[index] = array[index + start];
      }

      return result;
    }
    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */


    function baseSome(collection, predicate) {
      var result;
      baseEach(collection, function (value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }
    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */


    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = low + high >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return high;
      }

      return baseSortedIndexBy(array, value, identity, retHighest);
    }
    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */


    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);
      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? computed <= value : computed < value;
        }

        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }

      return nativeMin(high, MAX_ARRAY_INDEX);
    }
    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */


    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */


    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }

      if (isSymbol(value)) {
        return NAN;
      }

      return +value;
    }
    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */


    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }

      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }

      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }

      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }
    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */


    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);

        if (set) {
          return setToArray(set);
        }

        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }

      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;

          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }

          if (iteratee) {
            seen.push(computed);
          }

          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }

          result.push(value);
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */


    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }
    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */


    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }
    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */


    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

      return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }
    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */


    function baseWrapperValue(value, actions) {
      var result = value;

      if (result instanceof LazyWrapper) {
        result = result.value();
      }

      return arrayReduce(actions, function (result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }
    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */


    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;

      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }

      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }

      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }
    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */


    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }

      return result;
    }
    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */


    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }
    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */


    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }
    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */


    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }

      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */


    var castRest = baseRest;
    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */

    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */


    var clearTimeout = ctxClearTimeout || function (id) {
      return root.clearTimeout(id);
    };
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */


    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */


    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */


    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */


    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }
    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */


    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */


    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }
    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */


    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */


    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */


    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);
        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }

        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }

      return 0;
    }
    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */


    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);

        if (result) {
          if (index >= ordersLength) {
            return result;
          }

          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      } // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.


      return object.index - other.index;
    }
    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */


    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }

      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }

      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }

      return result;
    }
    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */


    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }

      var offset = argsIndex;

      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }

      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }

      return result;
    }
    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */


    function copyArray(source, array) {
      var index = -1,
          length = source.length;
      array || (array = Array(length));

      while (++index < length) {
        array[index] = source[index];
      }

      return array;
    }
    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */


    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }

        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }

      return object;
    }
    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */


    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */


    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */


    function createAggregator(setter, initializer) {
      return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};
        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }
    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */


    function createAssigner(assigner) {
      return baseRest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }

        object = Object(object);

        while (++index < length) {
          var source = sources[index];

          if (source) {
            assigner(object, source, index, customizer);
          }
        }

        return object;
      });
    }
    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */


    function createBaseEach(eachFunc, fromRight) {
      return function (collection, iteratee) {
        if (collection == null) {
          return collection;
        }

        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }

        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }

        return collection;
      };
    }
    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */


    function createBaseFor(fromRight) {
      return function (object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];

          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }

        return object;
      };
    }
    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */


    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }

      return wrapper;
    }
    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */


    function createCaseFirst(methodName) {
      return function (string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */


    function createCompounder(callback) {
      return function (string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }
    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */


    function createCtor(Ctor) {
      return function () {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;

        switch (args.length) {
          case 0:
            return new Ctor();

          case 1:
            return new Ctor(args[0]);

          case 2:
            return new Ctor(args[0], args[1]);

          case 3:
            return new Ctor(args[0], args[1], args[2]);

          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);

          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);

          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }

        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args); // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.

        return isObject(result) ? result : thisBinding;
      };
    }
    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */


    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }

        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
        length -= holders.length;

        if (length < arity) {
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }

        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }

      return wrapper;
    }
    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */


    function createFind(findIndexFunc) {
      return function (collection, predicate, fromIndex) {
        var iterable = Object(collection);

        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);

          predicate = function predicate(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }

        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }
    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */


    function createFlow(fromRight) {
      return flatRest(function (funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }

        while (index--) {
          var func = funcs[index];

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }

        index = wrapper ? index : length;

        while (++index < length) {
          func = funcs[index];
          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }

        return function () {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }

          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }

          return result;
        };
      });
    }
    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */


    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }

        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }

        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }

        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }

        length -= holdersCount;

        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }

        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;
        length = args.length;

        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }

        if (isAry && ary < length) {
          args.length = ary;
        }

        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }

        return fn.apply(thisBinding, args);
      }

      return wrapper;
    }
    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */


    function createInverter(setter, toIteratee) {
      return function (object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }
    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */


    function createMathOperation(operator, defaultValue) {
      return function (value, other) {
        var result;

        if (value === undefined && other === undefined) {
          return defaultValue;
        }

        if (value !== undefined) {
          result = value;
        }

        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }

          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }

          result = operator(value, other);
        }

        return result;
      };
    }
    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */


    function createOver(arrayFunc) {
      return flatRest(function (iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function (args) {
          var thisArg = this;
          return arrayFunc(iteratees, function (iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }
    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */


    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);
      var charsLength = chars.length;

      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }

      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }
    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */


    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }

        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }

        return apply(fn, isBind ? thisArg : this, args);
      }

      return wrapper;
    }
    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */


    function createRange(fromRight) {
      return function (start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        } // Ensure the sign of `-0` is preserved.


        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }
    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */


    function createRelationalOperation(operator) {
      return function (value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }

        return operator(value, other);
      };
    }
    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */


    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;
      bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }

      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
      var result = wrapFunc.apply(undefined, newData);

      if (isLaziable(func)) {
        setData(result, newData);
      }

      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }
    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */


    function createRound(methodName) {
      var func = Math[methodName];
      return function (number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));
          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }

        return func(number);
      };
    }
    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */


    var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
      return new Set(values);
    };
    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */

    function createToPairs(keysFunc) {
      return function (object) {
        var tag = getTag(object);

        if (tag == mapTag) {
          return mapToArray(object);
        }

        if (tag == setTag) {
          return setToPairs(object);
        }

        return baseToPairs(object, keysFunc(object));
      };
    }
    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */


    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      var length = partials ? partials.length : 0;

      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }

      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;
        partials = holders = undefined;
      }

      var data = isBindKey ? undefined : getData(func);
      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }

      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }

      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }

      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }
    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */


    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }

      return objValue;
    }
    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */


    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }

      return objValue;
    }
    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */


    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }
    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */


    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      } // Assume cyclic values are equal.


      var stacked = stack.get(array);

      if (stacked && stack.get(other)) {
        return stacked == other;
      }

      var index = -1,
          result = true,
          seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
      stack.set(array, other);
      stack.set(other, array); // Ignore non-index properties.

      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }

        if (compared !== undefined) {
          if (compared) {
            continue;
          }

          result = false;
          break;
        } // Recursively compare arrays (susceptible to call stack limits).


        if (seen) {
          if (!arraySome(other, function (othValue, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }

      stack['delete'](array);
      stack['delete'](other);
      return result;
    }
    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */


    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }

          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }

          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == other + '';

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          } // Assume cyclic values are equal.


          var stacked = stack.get(object);

          if (stacked) {
            return stacked == other;
          }

          bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }

      }

      return false;
    }
    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */


    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }

      var index = objLength;

      while (index--) {
        var key = objProps[index];

        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      } // Assume cyclic values are equal.


      var stacked = stack.get(object);

      if (stacked && stack.get(other)) {
        return stacked == other;
      }

      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;

      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        } // Recursively compare objects (susceptible to call stack limits).


        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }

        skipCtor || (skipCtor = key == 'constructor');
      }

      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }

      stack['delete'](object);
      stack['delete'](other);
      return result;
    }
    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */


    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }
    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */


    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */


    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */


    var getData = !metaMap ? noop : function (func) {
      return metaMap.get(func);
    };
    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */

    function getFuncName(func) {
      var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;

        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }

      return result;
    }
    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */


    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }
    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */


    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }
    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */


    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }
    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */


    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }

      return result;
    }
    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */


    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }
    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */


    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);

      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }

      return result;
    }
    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */


    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
      if (object == null) {
        return [];
      }

      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function (symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
      var result = [];

      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }

      return result;
    };
    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */

    var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;

            case mapCtorString:
              return mapTag;

            case promiseCtorString:
              return promiseTag;

            case setCtorString:
              return setTag;

            case weakMapCtorString:
              return weakMapTag;
          }
        }

        return result;
      };
    }
    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */


    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':
            start += size;
            break;

          case 'dropRight':
            end -= size;
            break;

          case 'take':
            end = nativeMin(end, start + size);
            break;

          case 'takeRight':
            start = nativeMax(start, end - size);
            break;
        }
      }

      return {
        'start': start,
        'end': end
      };
    }
    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */


    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }
    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */


    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);

        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }

        object = object[key];
      }

      if (result || ++index != length) {
        return result;
      }

      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */


    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length); // Add properties assigned by `RegExp#exec`.

      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }

      return result;
    }
    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */


    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */


    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;

      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }
    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */


    function insertWrapDetails(source, details) {
      var length = details.length;

      if (!length) {
        return source;
      }

      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }
    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */


    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */


    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }
    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */


    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }

      var type = typeof index;

      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }

      return false;
    }
    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */


    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }

      var type = typeof value;

      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }

      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */


    function isKeyable(value) {
      var type = typeof value;
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    }
    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */


    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }

      if (func === other) {
        return true;
      }

      var data = getData(other);
      return !!data && func === data[0];
    }
    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */


    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */


    var isMaskable = coreJsData ? isFunction : stubFalse;
    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */

    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
      return value === proto;
    }
    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */


    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */


    function matchesStrictComparable(key, srcValue) {
      return function (object) {
        if (object == null) {
          return false;
        }

        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }
    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */


    function memoizeCapped(func) {
      var result = memoize(func, function (key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }

        return key;
      });
      var cache = result.cache;
      return result;
    }
    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */


    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
      var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG; // Exit early if metadata can't be merged.

      if (!(isCommon || isCombo)) {
        return data;
      } // Use source `thisArg` if available.


      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2]; // Set when currying a bound function.

        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      } // Compose partial arguments.


      var value = source[3];

      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      } // Compose partial right arguments.


      value = source[5];

      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      } // Use source `argPos` if available.


      value = source[7];

      if (value) {
        data[7] = value;
      } // Use source `ary` if it's smaller.


      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      } // Use source `arity` if one is not provided.


      if (data[9] == null) {
        data[9] = source[9];
      } // Use source `func` and merge bitmasks.


      data[0] = source[0];
      data[1] = newBitmask;
      return data;
    }
    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */


    function nativeKeysIn(object) {
      var result = [];

      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }

      return result;
    }
    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */


    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */


    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? func.length - 1 : start, 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }

        index = -1;
        var otherArgs = Array(start + 1);

        while (++index < start) {
          otherArgs[index] = args[index];
        }

        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */


    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */


    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }

      return array;
    }
    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */


    var setData = shortOut(baseSetData);
    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

    var setTimeout = ctxSetTimeout || function (func, wait) {
      return root.setTimeout(func, wait);
    };
    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */


    var setToString = shortOut(baseSetToString);
    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */

    function setWrapToString(wrapper, reference, bitmask) {
      var source = reference + '';
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }
    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */


    function shortOut(func) {
      var count = 0,
          lastCalled = 0;
      return function () {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;

        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }

        return func.apply(undefined, arguments);
      };
    }
    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */


    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;
      size = size === undefined ? length : size;

      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];
        array[rand] = array[index];
        array[index] = value;
      }

      array.length = size;
      return array;
    }
    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */


    var stringToPath = memoizeCapped(function (string) {
      var result = [];

      if (reLeadingDot.test(string)) {
        result.push('');
      }

      string.replace(rePropName, function (match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
      });
      return result;
    });
    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */

    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }

      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }
    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */


    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}

        try {
          return func + '';
        } catch (e) {}
      }

      return '';
    }
    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */


    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function (pair) {
        var value = '_.' + pair[0];

        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }
    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */


    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }

      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }
    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */


    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }

      var length = array == null ? 0 : array.length;

      if (!length || size < 1) {
        return [];
      }

      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }

      return result;
    }
    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */


    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value) {
          result[resIndex++] = value;
        }
      }

      return result;
    }
    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */


    function concat() {
      var length = arguments.length;

      if (!length) {
        return [];
      }

      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }

      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }
    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */


    var difference = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */

    var differenceBy = baseRest(function (array, values) {
      var iteratee = last(values);

      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }

      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
    });
    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */

    var differenceWith = baseRest(function (array, values) {
      var comparator = last(values);

      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }

      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });
    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return [];
      }

      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }
    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */


    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return [];
      }

      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }
    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */


    function dropRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }
    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */


    function dropWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }
    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */


    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return [];
      }

      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }

      return baseFill(array, value, start, end);
    }
    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */


    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return -1;
      }

      var index = fromIndex == null ? 0 : toInteger(fromIndex);

      if (index < 0) {
        index = nativeMax(length + index, 0);
      }

      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }
    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */


    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return -1;
      }

      var index = length - 1;

      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }

      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }
    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */


    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */


    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }
    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */


    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return [];
      }

      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }
    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */


    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }

      return result;
    }
    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */


    function head(array) {
      return array && array.length ? array[0] : undefined;
    }
    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */


    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return -1;
      }

      var index = fromIndex == null ? 0 : toInteger(fromIndex);

      if (index < 0) {
        index = nativeMax(length + index, 0);
      }

      return baseIndexOf(array, value, index);
    }
    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */


    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }
    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */


    var intersection = baseRest(function (arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });
    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */

    var intersectionBy = baseRest(function (arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }

      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
    });
    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */

    var intersectionWith = baseRest(function (arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
      comparator = typeof comparator == 'function' ? comparator : undefined;

      if (comparator) {
        mapped.pop();
      }

      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
    });
    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */

    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }
    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */


    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }
    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */


    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return -1;
      }

      var index = length;

      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }

      return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
    }
    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */


    function nth(array, n) {
      return array && array.length ? baseNth(array, toInteger(n)) : undefined;
    }
    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */


    var pull = baseRest(pullAll);
    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */

    function pullAll(array, values) {
      return array && array.length && values && values.length ? basePullAll(array, values) : array;
    }
    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */


    function pullAllBy(array, values, iteratee) {
      return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
    }
    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */


    function pullAllWith(array, values, comparator) {
      return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
    }
    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */


    var pullAt = flatRest(function (array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);
      basePullAt(array, arrayMap(indexes, function (index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));
      return result;
    });
    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */

    function remove(array, predicate) {
      var result = [];

      if (!(array && array.length)) {
        return result;
      }

      var index = -1,
          indexes = [],
          length = array.length;
      predicate = getIteratee(predicate, 3);

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }

      basePullAt(array, indexes);
      return result;
    }
    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */


    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }
    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */


    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return [];
      }

      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }

      return baseSlice(array, start, end);
    }
    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */


    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }
    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */


    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }
    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */


    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;

      if (length) {
        var index = baseSortedIndex(array, value);

        if (index < length && eq(array[index], value)) {
          return index;
        }
      }

      return -1;
    }
    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */


    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }
    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */


    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }
    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */


    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;

      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;

        if (eq(array[index], value)) {
          return index;
        }
      }

      return -1;
    }
    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */


    function sortedUniq(array) {
      return array && array.length ? baseSortedUniq(array) : [];
    }
    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */


    function sortedUniqBy(array, iteratee) {
      return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
    }
    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */


    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }
    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */


    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }

      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }
    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */


    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;

      if (!length) {
        return [];
      }

      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }
    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */


    function takeRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }
    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */


    function takeWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }
    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */


    var union = baseRest(function (arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

    var unionBy = baseRest(function (arrays) {
      var iteratee = last(arrays);

      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }

      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });
    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */

    var unionWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });
    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */

    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }
    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */


    function uniqBy(array, iteratee) {
      return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }
    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */


    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return array && array.length ? baseUniq(array, undefined, comparator) : [];
    }
    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */


    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }

      var length = 0;
      array = arrayFilter(array, function (group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function (index) {
        return arrayMap(array, baseProperty(index));
      });
    }
    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */


    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }

      var result = unzip(array);

      if (iteratee == null) {
        return result;
      }

      return arrayMap(result, function (group) {
        return apply(iteratee, undefined, group);
      });
    }
    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */


    var without = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });
    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */

    var xor = baseRest(function (arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });
    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */

    var xorBy = baseRest(function (arrays) {
      var iteratee = last(arrays);

      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }

      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });
    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */

    var xorWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });
    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */

    var zip = baseRest(unzip);
    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */

    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }
    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */


    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }
    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */


    var zipWith = baseRest(function (arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;
      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });
    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */

    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }
    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */


    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }
    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */


    function thru(value, interceptor) {
      return interceptor(value);
    }
    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */


    var wrapperAt = flatRest(function (paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function interceptor(object) {
        return baseAt(object, paths);
      };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }

      value = value.slice(start, +start + (length ? 1 : 0));

      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });

      return new LodashWrapper(value, this.__chain__).thru(function (array) {
        if (length && !array.length) {
          array.push(undefined);
        }

        return array;
      });
    });
    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */

    function wrapperChain() {
      return chain(this);
    }
    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */


    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }
    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */


    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }

      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];
      return {
        'done': done,
        'value': value
      };
    }
    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */


    function wrapperToIterator() {
      return this;
    }
    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */


    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;

        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }

        var previous = clone;
        parent = parent.__wrapped__;
      }

      previous.__wrapped__ = value;
      return result;
    }
    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */


    function wrapperReverse() {
      var value = this.__wrapped__;

      if (value instanceof LazyWrapper) {
        var wrapped = value;

        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }

        wrapped = wrapped.reverse();

        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });

        return new LodashWrapper(wrapped, this.__chain__);
      }

      return this.thru(reverse);
    }
    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */


    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }
    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */


    var countBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });
    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */

    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;

      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }

      return func(collection, getIteratee(predicate, 3));
    }
    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */


    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }
    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */


    var find = createFind(findIndex);
    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */

    var findLast = createFind(findLastIndex);
    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }
    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */


    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }
    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */


    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }
    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */


    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }
    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */


    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }
    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */


    var groupBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });
    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */

    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
      var length = collection.length;

      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }

      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }
    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */


    var invokeMap = baseRest(function (collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function (value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });
    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */

    var keyBy = createAggregator(function (result, value, key) {
      baseAssignValue(result, key, value);
    });
    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */

    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }
    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */


    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }

      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }

      orders = guard ? undefined : orders;

      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }

      return baseOrderBy(collection, iteratees, orders);
    }
    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */


    var partition = createAggregator(function (result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function () {
      return [[], []];
    });
    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */

    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;
      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }
    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */


    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;
      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }
    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */


    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }
    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */


    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }
    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */


    function sampleSize(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }

      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }
    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */


    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }
    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */


    function size(collection) {
      if (collection == null) {
        return 0;
      }

      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }

      var tag = getTag(collection);

      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }

      return baseKeys(collection).length;
    }
    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */


    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;

      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }

      return func(collection, getIteratee(predicate, 3));
    }
    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */


    var sortBy = baseRest(function (collection, iteratees) {
      if (collection == null) {
        return [];
      }

      var length = iteratees.length;

      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }

      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */

    var now = ctxNow || function () {
      return root.Date.now();
    };
    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */


    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      n = toInteger(n);
      return function () {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }
    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */


    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = func && n == null ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }
    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */


    function before(n, func) {
      var result;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      n = toInteger(n);
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }

        if (n <= 1) {
          func = undefined;
        }

        return result;
      };
    }
    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */


    var bind = baseRest(function (func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;

      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }

      return createWrap(func, bitmask, thisArg, partials, holders);
    });
    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */

    var bindKey = baseRest(function (object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;

      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }

      return createWrap(key, bitmask, object, partials, holders);
    });
    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */

    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }
    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */


    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }
    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */


    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      wait = toNumber(wait) || 0;

      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time; // Start the timer for the trailing edge.

        timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.

        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }

      function timerExpired() {
        var time = now();

        if (shouldInvoke(time)) {
          return trailingEdge(time);
        } // Restart the timer.


        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.

        if (trailing && lastArgs) {
          return invokeFunc(time);
        }

        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }

        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }

          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }

        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }

        return result;
      }

      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */


    var defer = baseRest(function (func, args) {
      return baseDelay(func, 1, args);
    });
    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */

    var delay = baseRest(function (func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });
    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */

    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }
    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */


    function memoize(func, resolver) {
      if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      var memoized = function memoized() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }

        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };

      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    } // Expose `MapCache`.


    memoize.Cache = MapCache;
    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */

    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      return function () {
        var args = arguments;

        switch (args.length) {
          case 0:
            return !predicate.call(this);

          case 1:
            return !predicate.call(this, args[0]);

          case 2:
            return !predicate.call(this, args[0], args[1]);

          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }

        return !predicate.apply(this, args);
      };
    }
    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */


    function once(func) {
      return before(2, func);
    }
    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */


    var overArgs = castRest(function (func, transforms) {
      transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
      var funcsLength = transforms.length;
      return baseRest(function (args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }

        return apply(func, this, args);
      });
    });
    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */

    var partial = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });
    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */

    var partialRight = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });
    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */

    var rearg = flatRest(function (func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });
    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */

    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }
    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */


    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function (args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }

        return apply(func, this, otherArgs);
      });
    }
    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */


    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }

      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }
    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */


    function unary(func) {
      return ary(func, 1);
    }
    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */


    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }
    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */


    function castArray() {
      if (!arguments.length) {
        return [];
      }

      var value = arguments[0];
      return isArray(value) ? value : [value];
    }
    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */


    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }
    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */


    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }
    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */


    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }
    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */


    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }
    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */


    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }
    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */


    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */


    var gt = createRelationalOperation(baseGt);
    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */

    var gte = createRelationalOperation(function (value, other) {
      return value >= other;
    });
    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */

    var isArguments = baseIsArguments(function () {
      return arguments;
    }()) ? baseIsArguments : function (value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */

    var isArray = Array.isArray;
    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */

    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */

    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */


    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */


    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */


    var isBuffer = nativeIsBuffer || stubFalse;
    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */

    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */

    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }
    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */


    function isEmpty(value) {
      if (value == null) {
        return true;
      }

      if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }

      var tag = getTag(value);

      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }

      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }

      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }

      return true;
    }
    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */


    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */


    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }
    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */


    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }

      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
    }
    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */


    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }
    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */


    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      } // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.


      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */


    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }
    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */


    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */


    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }
    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */


    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }
    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */


    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */

    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }
    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */


    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }
    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */


    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }
    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */


    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }

      return baseIsNative(value);
    }
    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */


    function isNull(value) {
      return value === null;
    }
    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */


    function isNil(value) {
      return value == null;
    }
    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */


    function isNumber(value) {
      return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */


    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }

      var proto = getPrototype(value);

      if (proto === null) {
        return true;
      }

      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */


    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */

    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }
    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */


    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */

    function isString(value) {
      return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */


    function isSymbol(value) {
      return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */


    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */

    function isUndefined(value) {
      return value === undefined;
    }
    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */


    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }
    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */


    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }
    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */


    var lt = createRelationalOperation(baseLt);
    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */

    var lte = createRelationalOperation(function (value, other) {
      return value <= other;
    });
    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */

    function toArray(value) {
      if (!value) {
        return [];
      }

      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }

      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }

      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
      return func(value);
    }
    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */


    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }

      value = toNumber(value);

      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }

      return value === value ? value : 0;
    }
    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */


    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */


    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }
    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */


    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }

      if (isSymbol(value)) {
        return NAN;
      }

      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }

      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }

      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */


    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */


    function toSafeInteger(value) {
      return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
    }
    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */


    function toString(value) {
      return value == null ? '' : baseToString(value);
    }
    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */


    var assign = createAssigner(function (object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }

      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });
    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */

    var assignIn = createAssigner(function (object, source) {
      copyObject(source, keysIn(source), object);
    });
    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */

    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */

    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });
    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */

    var at = flatRest(baseAt);
    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */

    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }
    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */


    var defaults = baseRest(function (args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });
    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */

    var defaultsDeep = baseRest(function (args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });
    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */

    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }
    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */


    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }
    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */


    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }
    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */


    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }
    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */


    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }
    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */


    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }
    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */


    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }
    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */


    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }
    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */


    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }
    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */


    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }
    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */


    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */


    var invert = createInverter(function (result, value, key) {
      result[value] = key;
    }, constant(identity));
    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */

    var invertBy = createInverter(function (result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);
    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */

    var invoke = baseRest(baseInvoke);
    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */

    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */


    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */


    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);
      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }
    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */


    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);
      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }
    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */


    var merge = createAssigner(function (object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */

    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */

    var omit = flatRest(function (object, paths) {
      var result = {};

      if (object == null) {
        return result;
      }

      var isDeep = false;
      paths = arrayMap(paths, function (path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);

      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }

      var length = paths.length;

      while (length--) {
        baseUnset(result, paths[length]);
      }

      return result;
    });
    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */

    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }
    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */


    var pick = flatRest(function (object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */

    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }

      var props = arrayMap(getAllKeysIn(object), function (prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function (value, path) {
        return predicate(value, path[0]);
      });
    }
    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */


    function result(object, path, defaultValue) {
      path = castPath(path, object);
      var index = -1,
          length = path.length; // Ensure the loop is entered when path is empty.

      if (!length) {
        length = 1;
        object = undefined;
      }

      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];

        if (value === undefined) {
          index = length;
          value = defaultValue;
        }

        object = isFunction(value) ? value.call(object) : value;
      }

      return object;
    }
    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */


    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */


    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }
    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */


    var toPairs = createToPairs(keys);
    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */

    var toPairsIn = createToPairs(keysIn);
    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */

    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        var Ctor = object && object.constructor;

        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }

      (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }
    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */


    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }
    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */


    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }
    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */


    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }
    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */


    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }
    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */


    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }
    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */


    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }

      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }

      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }

      return baseClamp(toNumber(number), lower, upper);
    }
    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */


    function inRange(number, start, end) {
      start = toFinite(start);

      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }

      number = toNumber(number);
      return baseInRange(number, start, end);
    }
    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */


    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }

      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }

      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);

        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }

      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }

      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
      }

      return baseRandom(lower, upper);
    }
    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */


    var camelCase = createCompounder(function (result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });
    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */

    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */


    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }
    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */


    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);
      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }
    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */


    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */


    function escapeRegExp(string) {
      string = toString(string);
      return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
    }
    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */


    var kebabCase = createCompounder(function (result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });
    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */

    var lowerCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });
    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */

    var lowerFirst = createCaseFirst('toLowerCase');
    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */

    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;

      if (!length || strLength >= length) {
        return string;
      }

      var mid = (length - strLength) / 2;
      return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
    }
    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */


    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
    }
    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */


    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }
    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */


    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }

      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }
    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */


    function repeat(string, n, guard) {
      if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }

      return baseRepeat(toString(string), n);
    }
    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */


    function replace() {
      var args = arguments,
          string = toString(args[0]);
      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }
    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */


    var snakeCase = createCompounder(function (result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });
    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */

    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }

      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

      if (!limit) {
        return [];
      }

      string = toString(string);

      if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);

        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }

      return string.split(separator, limit);
    }
    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */


    var startCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });
    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */

    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }
    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */


    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }

      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);
      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);
      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '"; // Compile the regexp to match each delimiter.

      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.

      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
      string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.

        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }

        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }

        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }

        index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.

        return match;
      });
      source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.

      var variable = options.variable;

      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      } // Cleanup code by stripping empty strings.


      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
      var result = attempt(function () {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      }); // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.

      result.source = source;

      if (isError(result)) {
        throw result;
      }

      return result;
    }
    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */


    function toLower(value) {
      return toString(value).toLowerCase();
    }
    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */


    function toUpper(value) {
      return toString(value).toUpperCase();
    }
    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */


    function trim(string, chars, guard) {
      string = toString(string);

      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }

      if (!string || !(chars = baseToString(chars))) {
        return string;
      }

      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;
      return castSlice(strSymbols, start, end).join('');
    }
    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */


    function trimEnd(string, chars, guard) {
      string = toString(string);

      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }

      if (!string || !(chars = baseToString(chars))) {
        return string;
      }

      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
      return castSlice(strSymbols, 0, end).join('');
    }
    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */


    function trimStart(string, chars, guard) {
      string = toString(string);

      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }

      if (!string || !(chars = baseToString(chars))) {
        return string;
      }

      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));
      return castSlice(strSymbols, start).join('');
    }
    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */


    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }

      string = toString(string);
      var strLength = string.length;

      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }

      if (length >= strLength) {
        return string;
      }

      var end = length - stringSize(omission);

      if (end < 1) {
        return omission;
      }

      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }

      if (strSymbols) {
        end += result.length - end;
      }

      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }

          separator.lastIndex = 0;

          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }

          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);

        if (index > -1) {
          result = result.slice(0, index);
        }
      }

      return result + omission;
    }
    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */


    function unescape(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }
    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */


    var upperCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });
    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */

    var upperFirst = createCaseFirst('toUpperCase');
    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */

    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }

      return string.match(pattern) || [];
    }
    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */


    var attempt = baseRest(function (func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });
    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */

    var bindAll = flatRest(function (object, methodNames) {
      arrayEach(methodNames, function (key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });
    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */

    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();
      pairs = !length ? [] : arrayMap(pairs, function (pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return [toIteratee(pair[0]), pair[1]];
      });
      return baseRest(function (args) {
        var index = -1;

        while (++index < length) {
          var pair = pairs[index];

          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }
    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */


    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }
    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */


    function constant(value) {
      return function () {
        return value;
      };
    }
    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */


    function defaultTo(value, defaultValue) {
      return value == null || value !== value ? defaultValue : value;
    }
    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */


    var flow = createFlow();
    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */

    var flowRight = createFlow(true);
    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

    function identity(value) {
      return value;
    }
    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */


    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }
    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */


    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }
    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */


    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }
    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */


    var method = baseRest(function (path, args) {
      return function (object) {
        return baseInvoke(object, path, args);
      };
    });
    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */

    var methodOf = baseRest(function (object, args) {
      return function (path) {
        return baseInvoke(object, path, args);
      };
    });
    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */

    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }

      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);
      arrayEach(methodNames, function (methodName) {
        var func = source[methodName];
        object[methodName] = func;

        if (isFunc) {
          object.prototype[methodName] = function () {
            var chainAll = this.__chain__;

            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);
              actions.push({
                'func': func,
                'args': arguments,
                'thisArg': object
              });
              result.__chain__ = chainAll;
              return result;
            }

            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });
      return object;
    }
    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */


    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }

      return this;
    }
    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */


    function noop() {// No operation performed.
    }
    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */


    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function (args) {
        return baseNth(args, n);
      });
    }
    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */


    var over = createOver(arrayMap);
    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */

    var overEvery = createOver(arrayEvery);
    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */

    var overSome = createOver(arraySome);
    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */

    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */


    function propertyOf(object) {
      return function (path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }
    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */


    var range = createRange();
    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */

    var rangeRight = createRange(true);
    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

    function stubArray() {
      return [];
    }
    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */


    function stubFalse() {
      return false;
    }
    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */


    function stubObject() {
      return {};
    }
    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */


    function stubString() {
      return '';
    }
    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */


    function stubTrue() {
      return true;
    }
    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */


    function times(n, iteratee) {
      n = toInteger(n);

      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }

      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);
      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;
      var result = baseTimes(length, iteratee);

      while (++index < n) {
        iteratee(index);
      }

      return result;
    }
    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */


    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }

      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }
    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */


    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }
    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */


    var add = createMathOperation(function (augend, addend) {
      return augend + addend;
    }, 0);
    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */

    var ceil = createRound('ceil');
    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */

    var divide = createMathOperation(function (dividend, divisor) {
      return dividend / divisor;
    }, 1);
    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */

    var floor = createRound('floor');
    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */

    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }
    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */


    function maxBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
    }
    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */


    function mean(array) {
      return baseMean(array, identity);
    }
    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */


    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }
    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */


    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }
    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */


    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
    }
    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */


    var multiply = createMathOperation(function (multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);
    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */

    var round = createRound('round');
    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */

    var subtract = createMathOperation(function (minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);
    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */

    function sum(array) {
      return array && array.length ? baseSum(array, identity) : 0;
    }
    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */


    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
    }
    /*------------------------------------------------------------------------*/
    // Add methods that return wrapped values in chain sequences.


    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith; // Add aliases.

    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith; // Add methods to `lodash.prototype`.

    mixin(lodash, lodash);
    /*------------------------------------------------------------------------*/
    // Add methods that return unwrapped values in chain sequences.

    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst; // Add aliases.

    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;
    mixin(lodash, function () {
      var source = {};
      baseForOwn(lodash, function (func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }(), {
      'chain': false
    });
    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */

    lodash.VERSION = VERSION; // Assign default placeholders.

    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
      lodash[methodName].placeholder = lodash;
    }); // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.

    arrayEach(['drop', 'take'], function (methodName, index) {
      LazyWrapper.prototype[methodName] = function (n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
        var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }

        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
      };
    }); // Add `LazyWrapper` methods that accept an `iteratee` value.

    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function (iteratee) {
        var result = this.clone();

        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });

        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    }); // Add `LazyWrapper` methods for `_.head` and `_.last`.

    arrayEach(['head', 'last'], function (methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
      };
    }); // Add `LazyWrapper` methods for `_.initial` and `_.tail`.

    arrayEach(['initial', 'tail'], function (methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function () {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function () {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function (predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function (predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }

      return this.map(function (value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function (predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function (start, end) {
      start = toInteger(start);
      var result = this;

      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }

      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }

      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }

      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function (predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function () {
      return this.take(MAX_ARRAY_LENGTH);
    }; // Add `LazyWrapper` methods to `lodash.prototype`.


    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }

      lodash.prototype[methodName] = function () {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function interceptor(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return isTaker && chainAll ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }

        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);

          result.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined
          });

          return new LodashWrapper(result, chainAll);
        }

        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }

        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
      };
    }); // Add `Array` methods to `lodash.prototype`.

    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function () {
        var args = arguments;

        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }

        return this[chainName](function (value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    }); // Map minified method names to their real names.

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var lodashFunc = lodash[methodName];

      if (lodashFunc) {
        var key = lodashFunc.name + '',
            names = realNames[key] || (realNames[key] = []);
        names.push({
          'name': methodName,
          'func': lodashFunc
        });
      }
    });
    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }]; // Add methods to `LazyWrapper`.

    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue; // Add chain sequence methods to the `lodash` wrapper.

    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue; // Add lazy aliases.

    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }

    return lodash;
  };
  /*--------------------------------------------------------------------------*/
  // Export lodash.


  var _ = runInContext(); // Some AMD build optimizers, like r.js, check for condition patterns like:


  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _; // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.

    define(function () {
      return _;
    });
  } // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _; // Export for CommonJS support.

      freeExports._ = _;
    } else {
      // Export to the global object.
      root._ = _;
    }
}).call(void 0);

cc._RF.pop();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------
