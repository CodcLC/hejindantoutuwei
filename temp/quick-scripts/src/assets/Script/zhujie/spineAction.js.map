{"version":3,"sources":["assets\\Script\\zhujie\\spineAction.js"],"names":["cc","Class","Component","properties","onLoad","sp","node","getComponent","Skeleton","data","_skeleton","animations","i","animation","name","trackIndex","parseInt","duration","weaponData","require","setStartListener","trackEntry","self","animationName","timeScale","attackTimeScale1","attackTimeScale2","bind","setCompleteListener","onDestroy","parent","off","switchSkin","addEvent","on","idx","game","isOver","weaponIndex","emit","weapon","setSkin","findBone","weaponPos","v2","worldX","worldY","sendTime","setMix","anim1","anim2","mixTime"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\r\n    //动画播放类\r\n    extends: cc.Component,\r\n    properties: {},\r\n    onLoad() {\r\n        this.sp = this.node.getComponent(sp.Skeleton); //获取骨骼动画组件\r\n        this.data = this.sp._skeleton.data; // SkeletonData 骨架数据\r\n        this.animations = {};\r\n        for (let i in this.data.animations) {\r\n            this.animations[animation.name] = {\r\n                trackIndex: parseInt(i),\r\n                name: animation.name,\r\n                duration: animation.duration\r\n            };\r\n        }\r\n        this.weaponData = require(\"zhujueConfig\");//武器数据\r\n        this.sp.setStartListener(function (trackEntry) {\r\n            self.animationName = trackEntry.animation ? trackEntry.animation.name : \"\";\r\n            if (self.animationName === 'attack1') {\r\n                this.sp.timeScale = self.attackTimeScale1;\r\n            }\r\n            else if (self.animationName === 'attack2') {\r\n                this.sp.timeScale = self.attackTimeScale2;\r\n            }\r\n            else {\r\n                this.sp.timeScale = 1;\r\n            }\r\n        }.bind(this));\r\n        this.sp.setCompleteListener(function (trackEntry) {\r\n            var animationName = trackEntry.animation ? trackEntry.animation.name : \"\";\r\n            if (animationName === 'attack1' || animationName === 'attack2') {\r\n            }\r\n        }.bind(this));\r\n    },\r\n    onDestroy() {\r\n        if (!this.parent) return;\r\n        // this.parent.off(\"roleState\", this.setRoleState, this);\r\n        // this.parent.off(\"changeDirection\", this.changeDirection, this);\r\n        this.parent.off(\"switchSkin\", this.switchSkin, this);\r\n        // game.off(\"stage.touch\", this.stageTouch, this);\r\n        // game.off(\"gameOver\", this.gameOver, this);\r\n    },\r\n    addEvent() {\r\n        // this.parent.on(\"roleState\", this.setRoleState, this);\r\n        // this.parent.on(\"changeDirection\", this.changeDirection, this);\r\n        this.parent.on(\"switchSkin\", this.switchSkin, this);\r\n        // game.on(\"stage.touch\", this.stageTouch, this);\r\n        // game.on(\"gameOver\", this.gameOver, this);\r\n    },\r\n    //切换皮肤 武器\r\n    switchSkin(idx) {\r\n        if (game.isOver) return;\r\n        if (!idx) {\r\n            this.weaponIndex += 1;\r\n            if (this.weaponIndex > 4) this.weaponIndex = 1;\r\n            idx = this.weaponIndex;\r\n        }\r\n        this.weaponIndex = idx;\r\n        game.emit(\"weaponIndex\", this.weaponIndex);\r\n        var weapon = this.weaponData[this.weaponIndex];\r\n        this.sp.setSkin(weapon.name);\r\n        this.weapon = this.sp.findBone(\"root_weapons\" + idx);\r\n        this.weaponPos = cc.v2(this.weapon.worldX, this.weapon.worldY);\r\n        this.attackTimeScale1 = 230 / (weapon.sendTime * 1000);\r\n        this.attackTimeScale2 = 450 / (weapon.sendTime * 1000);\r\n    },\r\n    /**\r\n     !#en\r\n     Mix applies all keyframe values,\r\n     interpolated for the specified time and mixed with the current values.\r\n     !#zh 为所有关键帧设定混合及混合时间（从当前值开始差值）。\r\n     @param fromAnimation fromAnimation\r\n     @param toAnimation toAnimation\r\n     @param duration duration\r\n     */\r\n    setMix(anim1, anim2, mixTime) {\r\n        this.sp.setMix(anim1, anim2, mixTime);\r\n        this.sp.setMix(anim2, anim1, mixTime);\r\n    },\r\n});\r\n"]}