{"version":3,"sources":["assets\\Script\\test\\HeroHit.js"],"names":["cc","Class","Component","properties","gravity","onLoad","speed","v2","prePosition","preStep","_lastSpeedY","onEnable","director","getCollisionManager","enabled","enabledDebugDraw","onDisable","start","onCollisionEnter","other","self","node","color","Color","RED","touchingNumber","console","log","otherAabb","world","aabb","otherPreAabb","preAabb","clone","selfAabb","selfPreAabb","onCollisionStay","onCollisionExit","WHITE","onDestroy","update","dt"],"mappings":";;;;;;AAAAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAELC,EAAAA,UAAU,EAAE;AACRC,IAAAA,OAAO,EAAE,CAAC,IADF,CACO;;AADP,GAFP;AAKLC,EAAAA,MALK,oBAKI;AAGL,SAAKC,KAAL,GAAaN,EAAE,CAACO,EAAH,CAAM,CAAN,EAAS,CAAT,CAAb,CAHK,CAGoB;;AACzB,SAAKC,WAAL,GAAmBR,EAAE,CAACO,EAAH,EAAnB;AACA,SAAKE,OAAL,GAAeT,EAAE,CAACO,EAAH,EAAf;AACA,SAAKG,WAAL,GAAmB,CAAnB;AACH,GAZI;AAaLC,EAAAA,QAAQ,EAAE,oBAAY;AAClBX,IAAAA,EAAE,CAACY,QAAH,CAAYC,mBAAZ,GAAkCC,OAAlC,GAA4C,IAA5C;AACAd,IAAAA,EAAE,CAACY,QAAH,CAAYC,mBAAZ,GAAkCE,gBAAlC,GAAqD,IAArD;AACH,GAhBI;AAiBLC,EAAAA,SAAS,EAAE,qBAAY;AACnBhB,IAAAA,EAAE,CAACY,QAAH,CAAYC,mBAAZ,GAAkCC,OAAlC,GAA4C,KAA5C;AACAd,IAAAA,EAAE,CAACY,QAAH,CAAYC,mBAAZ,GAAkCE,gBAAlC,GAAqD,KAArD;AACH,GApBI;AAqBLE,EAAAA,KArBK,mBAqBG,CACP,CAtBI;;AAuBL;AACJ;AACA;AACA;AACA;AACIC,EAAAA,gBAAgB,EAAE,0BAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AAErC,SAAKC,IAAL,CAAUC,KAAV,GAAkBtB,EAAE,CAACuB,KAAH,CAASC,GAA3B;AACA,SAAKC,cAAL;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EANqC,CAOrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AACA,QAAIC,SAAS,GAAGT,KAAK,CAACU,KAAN,CAAYC,IAA5B;AACA,QAAIC,YAAY,GAAGZ,KAAK,CAACU,KAAN,CAAYG,OAAZ,CAAoBC,KAApB,EAAnB;AAEA,QAAIC,QAAQ,GAAGd,IAAI,CAACS,KAAL,CAAWC,IAA1B;AACA,QAAIK,WAAW,GAAGf,IAAI,CAACS,KAAL,CAAWG,OAAX,CAAmBC,KAAnB,EAAlB,CA3BqC,CA4BrC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOH,GApFI;;AAqFL;AACJ;AACA;AACA;AACA;AACIG,EAAAA,eAAe,EAAE,yBAAUjB,KAAV,EAAiBC,IAAjB,EAAuB;AACpCM,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GA5FI;;AA6FL;AACJ;AACA;AACA;AACA;AACIU,EAAAA,eAAe,EAAE,yBAAUlB,KAAV,EAAiBC,IAAjB,EAAuB;AACpCM,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAKF,cAAL;;AACA,QAAI,KAAKA,cAAL,KAAwB,CAA5B,EAA+B;AAC3B,WAAKJ,IAAL,CAAUC,KAAV,GAAkBtB,EAAE,CAACuB,KAAH,CAASe,KAA3B;AACH;AAEJ,GAzGI;AA0GLC,EAAAA,SA1GK,uBA0GO,CACX,CA3GI;AA4GLC,EAAAA,MA5GK,kBA4GEC,EA5GF,EA4GM,CACV;AA7GI,CAAT","sourceRoot":"/","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        gravity: -1000,//重力\r\n    },\r\n    onLoad() {\r\n\r\n\r\n        this.speed = cc.v2(0, 0);//速度\r\n        this.prePosition = cc.v2();\r\n        this.preStep = cc.v2();\r\n        this._lastSpeedY = 0;\r\n    },\r\n    onEnable: function () {\r\n        cc.director.getCollisionManager().enabled = true;\r\n        cc.director.getCollisionManager().enabledDebugDraw = true;\r\n    },\r\n    onDisable: function () {\r\n        cc.director.getCollisionManager().enabled = false;\r\n        cc.director.getCollisionManager().enabledDebugDraw = false;\r\n    },\r\n    start() {\r\n    },\r\n    /**\r\n     * 当碰撞产生的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionEnter: function (other, self) {\r\n\r\n        this.node.color = cc.Color.RED;\r\n        this.touchingNumber ++;\r\n\r\n\r\n        console.log('on collision enter');\r\n        // // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面\r\n        // var world = self.world;\r\n        // // 碰撞组件的 aabb 碰撞框\r\n        // var aabb = world.aabb;\r\n        // // 节点碰撞前上一帧 aabb 碰撞框的位置\r\n        // var preAabb = world.preAabb;\r\n        // // 碰撞框的世界矩阵\r\n        // var t = world.transform;\r\n        // // 以下属性为圆形碰撞组件特有属性\r\n        // var r = world.radius;\r\n        // var p = world.position;\r\n        // // 以下属性为 矩形 和 多边形 碰\r\n\r\n\r\n        // 1st step\r\n        // get pre aabb, go back before collision\r\n        var otherAabb = other.world.aabb;\r\n        var otherPreAabb = other.world.preAabb.clone();\r\n\r\n        var selfAabb = self.world.aabb;\r\n        var selfPreAabb = self.world.preAabb.clone();\r\n        //cc.log(otherAabb,otherPreAabb);\r\n\r\n\r\n\r\n        // // 2nd step\r\n        // //向前x轴，检查x轴是否碰撞\r\n        // selfPreAabb.x = selfAabb.x;\r\n        // otherPreAabb.x = otherAabb.x;\r\n        // if (cc.Intersection.rectRect(selfPreAabb, otherPreAabb)) {\r\n        //     if (this.speed.x < 0 && (selfPreAabb.xMax > otherPreAabb.xMax)) {\r\n        //         this.node.x = otherPreAabb.xMax - this.node.parent.x;\r\n        //         this.collisionX = -1;\r\n        //     }\r\n        //     else if (this.speed.x > 0 && (selfPreAabb.xMin < otherPreAabb.xMin)) {\r\n        //         this.node.x = otherPreAabb.xMin - selfPreAabb.width - this.node.parent.x;\r\n        //         this.collisionX = 1;\r\n        //     }\r\n        //\r\n        //     this.speed.x = 0;\r\n        //     other.touchingX = true;\r\n        //     return;s\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    /**\r\n     * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionStay: function (other, self) {\r\n        console.log('on collision stay');\r\n    },\r\n    /**\r\n     * 当碰撞结束后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionExit: function (other, self) {\r\n        console.log('on collision exit');\r\n        this.touchingNumber --;\r\n        if (this.touchingNumber === 0) {\r\n            this.node.color = cc.Color.WHITE;\r\n        }\r\n\r\n    },\r\n    onDestroy() {\r\n    },\r\n    update(dt) {\r\n    },\r\n});\r\n"]}