{"version":3,"sources":["assets\\Script\\enemy\\enemyMove.js"],"names":["PoolComponent","require","cc","Class","properties","maxSpeed","jumps","jumpSpeed","drag","unuse","node","off","onKeyDown","onKeyUp","reuse","data","_moveFlags","roleState","_up","jumping","zIndex","on","onDisable","onLoad","body","getComponent","RigidBody","onDestroy","isDeath","game","isOver","gameControl","left","gameAction","MOVE_LEFT","right","MOVE_RIGHT","up","_upPressed","down","weapons","emit","onBeginContact","contact","selfCollider","otherCollider","onEndContact","onPreSolve","onPostSolve","update","dt","speed","linearVelocity","x","Math","abs","y","setState","mapRect","width","value"],"mappings":"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","sourceRoot":"/","sourcesContent":["let PoolComponent = require(\"PoolComponent\"); //池子组件\r\ncc.Class({\r\n    extends: PoolComponent,\r\n    properties: {\r\n        maxSpeed: 100,//最大速度\r\n        jumps: 2, //跳跃次数\r\n        // acceleration: 1500,//加速度\r\n        jumpSpeed: 500, //跳跃速度\r\n        drag: 600       //拖拽速度\r\n    },\r\n    unuse: function () {\r\n        this.node.off(\"key_down\", this.onKeyDown, this);\r\n        this.node.off(\"key_up\", this.onKeyUp, this);\r\n    },\r\n    reuse: function (data) {\r\n        this._moveFlags = 0;\r\n        this.node.roleState = this.roleState = 0;//角色状态  0=静止 1=移动 2=跳跃\r\n        this._up = false;\r\n        this.jumping = false;\r\n        this.node.zIndex = 10;\r\n        this.node.on(\"key_down\", this.onKeyDown, this);\r\n        this.node.on(\"key_up\", this.onKeyUp, this);\r\n    },\r\n    onDisable() {\r\n    },\r\n    onLoad: function () {\r\n        this.body = this.getComponent(cc.RigidBody);\r\n    },\r\n    onDestroy() {\r\n    },\r\n    onKeyDown(data) {\r\n        if (this.node.isDeath) return;\r\n        if (game.isOver) return;\r\n        switch (data) {\r\n            case game.gameControl.left:\r\n                this._moveFlags |= game.gameAction.MOVE_LEFT;\r\n                break;\r\n            case game.gameControl.right:\r\n                this._moveFlags |= game.gameAction.MOVE_RIGHT;\r\n                break;\r\n            case game.gameControl.up:\r\n                if (!this._upPressed) {\r\n                    this._up = true;\r\n                }\r\n                this._upPressed = true;\r\n                break;\r\n            case game.gameControl.down:\r\n                //this.node.emit(\"switchSkin\");//更改方向\r\n                break;\r\n            case  game.gameControl.weapons:\r\n                this.node.emit(\"switchSkin\");//更改方向\r\n                break;\r\n        }\r\n    },\r\n    onKeyUp(data) {\r\n        if (this.node.isDeath) return;\r\n        if (game.isOver) return;\r\n        switch (data) {\r\n            case game.gameControl.left:\r\n                this._moveFlags &= ~game.gameAction.MOVE_LEFT;\r\n                break;\r\n            case game.gameControl.right:\r\n                this._moveFlags &= ~game.gameAction.MOVE_RIGHT;\r\n                break;\r\n            case game.gameControl.down:\r\n            case game.gameControl.up:\r\n                this._upPressed = false;\r\n                break;\r\n        }\r\n    },\r\n    // 只在两个碰撞体开始接触时被调用一次\r\n    onBeginContact: function (contact, selfCollider, otherCollider) {\r\n        this.jumping = false;\r\n    },\r\n    // 只在两个碰撞体结束接触时被调用一次\r\n    onEndContact: function (contact, selfCollider, otherCollider) {\r\n    },\r\n    // 每次将要处理碰撞体接触逻辑时被调用\r\n    onPreSolve: function (contact, selfCollider, otherCollider) {\r\n    },\r\n    // 每次处理完碰撞体接触逻辑时被调用\r\n    onPostSolve: function (contact, selfCollider, otherCollider) {\r\n    },\r\n    update: function (dt) {\r\n        if (game.isOver) return;\r\n        var speed = this.body.linearVelocity;\r\n        if (this.node.isDeath) {\r\n            speed.x = 0;\r\n            this.body.linearVelocity = speed;\r\n            return\r\n        }\r\n        if (this._moveFlags === game.gameAction.MOVE_LEFT) {\r\n            // speed.x -= this.acceleration * dt;\r\n            // if (speed.x < -this.maxSpeed) {\r\n            //     speed.x = -this.maxSpeed;\r\n            // }\r\n            speed.x = -this.maxSpeed;\r\n            this.node.emit(\"changeDirection\", -1);//更改方向\r\n        }\r\n        else if (this._moveFlags === game.gameAction.MOVE_RIGHT) {\r\n            // speed.x += this.acceleration * dt;\r\n            // if (speed.x > this.maxSpeed) {\r\n            //     speed.x = this.maxSpeed;\r\n            // }\r\n            speed.x = this.maxSpeed;\r\n            this.node.emit(\"changeDirection\", 1);//更改方向\r\n        }\r\n        else {\r\n            speed.x = 0;\r\n            // if (speed.x != 0) {\r\n            //     var d = this.drag * dt;\r\n            //     if (Math.abs(speed.x) <= d) {\r\n            //         speed.x = 0;\r\n            //     } else {\r\n            //         speed.x -= speed.x > 0 ? d : -d;\r\n            //     }\r\n            // }\r\n        }\r\n        if (Math.abs(speed.y) < 1) {\r\n            this.jumps = 2;\r\n        }\r\n        if (this.jumps > 0 && this._up) {\r\n            speed.y = this.jumpSpeed;\r\n            this.jumps--;\r\n            this.setState(2);\r\n            this.jumping = true;\r\n        }\r\n        this._up = false;\r\n        if (this.jumping == false) {\r\n            if (speed.x > 0 || speed.x < 0) {\r\n                this.setState(1);\r\n            }\r\n            else {\r\n                this.setState(0);\r\n            }\r\n        }\r\n        if (speed.x != 0) {\r\n            if (speed.x < 0) {\r\n                if (this.node.x < (game.mapRect.x + 10)) {\r\n                    speed.x = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (this.node.x > (game.mapRect.x + game.mapRect.width - 10)) {\r\n                    speed.x = 0;\r\n                }\r\n            }\r\n            if (speed.y == 0) {\r\n                speed.y = 10;\r\n            }\r\n        }\r\n        this.body.linearVelocity = speed;\r\n    },\r\n    //设置角色状态\r\n    setState(value) {\r\n        if (this.roleState == value) return;\r\n        this.node.roleState = this.roleState = value;\r\n        this.node.emit(\"roleState\", this.roleState);//更改动作\r\n    },\r\n});\r\n"]}