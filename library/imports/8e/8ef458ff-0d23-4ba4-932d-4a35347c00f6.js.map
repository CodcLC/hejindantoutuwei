{"version":3,"sources":["assets\\Script\\bullet\\bullet1.js"],"names":["PoolComponent","require","cc","Class","properties","speed","range","onLoad","start","unuse","reuse","data","game","soundManager","playEffect","gameSound","qing_xing_qiang_jie2","state","idx","curRange","group","node","angle","hd","Math","PI","speedX","cos","width","speedY","sin","x","v","y","animation","getComponent","Animation","_isInit","spriteFrames","gameUtils","getSpriteFrames","bullet_atlas","prefabName","readyClip","AnimationClip","createWithSpriteFrames","name","wrapMode","WrapMode","Loop","addClip","play","playAdditive","init","emit","aniName","end","curPos","v2","pool","put","removeFromParent","destroy","onDestroy","onCollisionEnter","other","self","update","dt"],"mappings":"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","sourceRoot":"/","sourcesContent":["let PoolComponent = require(\"PoolComponent\"); //池子组件\r\ncc.Class({\r\n    extends: PoolComponent,\r\n    properties: {\r\n        speed: 1000,\r\n        range: 1000\r\n    },\r\n    onLoad() {\r\n    },\r\n    start() {\r\n    },\r\n    //回收\r\n    unuse: function () {\r\n    },\r\n    //重用\r\n    reuse: function (data) {\r\n        game.soundManager.playEffect(game.gameSound.qing_xing_qiang_jie2,false);\r\n        this.state = \"ready\";\r\n        this.idx = 0;\r\n        this.curRange = this.range;\r\n        if (data.group) this.node.group = data.group;\r\n        this.node.angle = data.angle;\r\n        let hd = this.node.angle * Math.PI / 180;\r\n        this.speedX = Math.cos(hd) * this.node.width / 2;\r\n        this.speedY = Math.sin(hd) * this.node.width / 2;\r\n        this.node.x = data.v.x + this.speedX;\r\n        this.node.y = data.v.y + this.speedY;\r\n        this.speedX = Math.cos(hd) * this.speed;\r\n        this.speedY = Math.sin(hd) * this.speed;\r\n        let animation = this.node.getComponent(cc.Animation);//动画组件\r\n        if (!this._isInit) {\r\n            let spriteFrames = game.gameUtils.getSpriteFrames(game.bullet_atlas, data.prefabName);\r\n            let readyClip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 20);\r\n            readyClip.name = 'move';\r\n            readyClip.wrapMode = cc.WrapMode.Loop;\r\n            animation.addClip(readyClip);\r\n            animation.play(\"move\");\r\n            this._isInit = true;\r\n        }\r\n        else {\r\n            animation.playAdditive('move', 0);\r\n        }\r\n        this.state = \"move\";\r\n        this.init(data);\r\n    },\r\n    init(data) {\r\n        game.emit(\"shootFire\", {aniName: \"eff1\", v: data.v, angle: data.angle});//开火动画\r\n    },\r\n    end() {\r\n        if (this.state == \"end\") return;\r\n        this.state = \"end\";\r\n        var curPos = cc.v2(this.node.x, this.node.y);\r\n        var angle = this.node.angle;\r\n        game.emit(\"shootFire\", {aniName: \"eff2\", v: curPos, angle: angle});//开火动画\r\n        // game.emit(\"shootFire\", \"eff1\", \"eff2\", curPos, angle);//开火动画\r\n        var pool = this.node.pool;\r\n        if (pool) {\r\n            pool.put(this.node);\r\n        }\r\n        else {\r\n            this.node.removeFromParent(true);\r\n            this.node.destroy();\r\n        }\r\n    },\r\n    onDestroy() {\r\n    },\r\n    onCollisionEnter: function (other, self) {\r\n        this.end();\r\n    },\r\n    update(dt) {\r\n        if (this.state != \"move\") {\r\n            return;\r\n        }\r\n        this.idx++;\r\n        this.curRange -= this.speed * dt;\r\n        if (this.curRange <= 0) {\r\n            this.end();\r\n            return;\r\n        }\r\n        this.node.x += this.speedX * dt;\r\n        this.node.y += this.speedY * dt;\r\n    },\r\n});\r\n"]}