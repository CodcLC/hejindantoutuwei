{"version":3,"sources":["assets\\Script\\core\\follow.js"],"names":["cc","Class","Component","properties","target","type","Node","map","onLoad","widget","node","getComponent","Widget","updateAlignment","mapRect","getBoundingBox","minX","maxX","width","winSize","minY","maxY","height","game","lateUpdate","dt","targetPos","convertToWorldSpaceAR","Vec2","ZERO","nodepos","parent","convertToNodeSpaceAR","x","y","position"],"mappings":";;;;;;AAAAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAELC,EAAAA,UAAU,EAAE;AACRC,IAAAA,MAAM,EAAE;AACJ,iBAAS,IADL;AAEJC,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFL,KADA;AAKRC,IAAAA,GAAG,EAAEP,EAAE,CAACM;AALA,GAFP;AASL;AACAE,EAAAA,MAAM,EAAE,kBAAY;AAChB,QAAI,CAAC,KAAKJ,MAAN,IAAgB,CAAC,KAAKG,GAA1B,EAA+B;AAC3B;AACH;;AACD,QAAIE,MAAM,GAAG,KAAKC,IAAL,CAAUC,YAAV,CAAuBX,EAAE,CAACY,MAA1B,CAAb;;AACA,QAAIH,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACI,eAAP;AACH;;AACD,SAAKC,OAAL,GAAe,KAAKP,GAAL,CAASQ,cAAT,EAAf;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,IAAL,GAAY,KAAKH,OAAL,CAAaI,KAAb,GAAqBlB,EAAE,CAACmB,OAAH,CAAWD,KAA5C;AACA,SAAKE,IAAL,GAAY,CAAZ;AACA,SAAKC,IAAL,GAAY,KAAKP,OAAL,CAAaQ,MAAb,GAAsBtB,EAAE,CAACmB,OAAH,CAAWG,MAA7C;AAEAC,IAAAA,IAAI,CAACT,OAAL,GAAa,KAAKA,OAAlB;AACH,GAzBI;AA0BL;AACAU,EAAAA,UAAU,EAAE,oBAAUC,EAAV,EAAc;AACtB,QAAI,CAAC,KAAKrB,MAAV,EAAkB;AACd;AACH;;AACD,QAAIsB,SAAS,GAAG,KAAKtB,MAAL,CAAYuB,qBAAZ,CAAkC3B,EAAE,CAAC4B,IAAH,CAAQC,IAA1C,CAAhB;AACA,QAAIC,OAAO,GAAG,KAAKpB,IAAL,CAAUqB,MAAV,CAAiBC,oBAAjB,CAAsCN,SAAtC,CAAd;AACA,QAAII,OAAO,CAACG,CAAR,GAAY,KAAKjB,IAArB,EAA2Bc,OAAO,CAACG,CAAR,GAAY,KAAKjB,IAAjB,CAA3B,KACK,IAAIc,OAAO,CAACG,CAAR,GAAY,KAAKhB,IAArB,EAA2Ba,OAAO,CAACG,CAAR,GAAY,KAAKhB,IAAjB;AAChC,QAAIa,OAAO,CAACI,CAAR,GAAY,KAAKd,IAArB,EAA2BU,OAAO,CAACI,CAAR,GAAY,KAAKd,IAAjB,CAA3B,KACK,IAAIU,OAAO,CAACI,CAAR,GAAY,KAAKb,IAArB,EAA2BS,OAAO,CAACI,CAAR,GAAY,KAAKb,IAAjB;AAChC,SAAKX,IAAL,CAAUyB,QAAV,GAAqBL,OAArB,CAVsB,CAWtB;AACA;AACH;AAxCI,CAAT","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n    properties: {\n        target: {\n            default: null,\n            type: cc.Node\n        },\n        map: cc.Node\n    },\n    // use this for initialization\n    onLoad: function () {\n        if (!this.target || !this.map) {\n            return;\n        }\n        var widget = this.node.getComponent(cc.Widget);\n        if (widget) {\n            widget.updateAlignment();\n        }\n        this.mapRect = this.map.getBoundingBox();\n        this.minX = 0;\n        this.maxX = this.mapRect.width - cc.winSize.width;\n        this.minY = 0;\n        this.maxY = this.mapRect.height - cc.winSize.height;\n\n        game.mapRect=this.mapRect;\n    },\n    // called every frame, uncomment this function to activate update callback\n    lateUpdate: function (dt) {\n        if (!this.target) {\n            return;\n        }\n        let targetPos = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);\n        let nodepos = this.node.parent.convertToNodeSpaceAR(targetPos);\n        if (nodepos.x < this.minX) nodepos.x = this.minX;\n        else if (nodepos.x > this.maxX) nodepos.x = this.maxX;\n        if (nodepos.y < this.minY) nodepos.y = this.minY;\n        else if (nodepos.y > this.maxY) nodepos.y = this.maxY;\n        this.node.position = nodepos;\n        // let ratio = targetPos.y / cc.winSize.height;\n        // this.camera.zoomRatio = 1 + (0.5 - ratio) * 0.5;\n    },\n});\n"]}