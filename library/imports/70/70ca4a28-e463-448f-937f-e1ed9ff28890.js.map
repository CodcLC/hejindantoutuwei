{"version":3,"sources":["assets\\Script\\enemy\\enemyControl.js"],"names":["PoolComponent","require","cc","Class","properties","_isMove","attackTme","emitMove","value","node","emit","game","gameControl","left","onLoad","unuse","off","onFindEnter","onFindExit","reuse","data","sendTime","targets","on","onEnable","onDisable","onDestroy","target","isDeath","indexOf","push","idx","splice","start","update","dt","isOver","length"],"mappings":"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","sourceRoot":"/","sourcesContent":["let PoolComponent = require(\"PoolComponent\"); //池子组件\r\ncc.Class({\r\n    extends: PoolComponent,\r\n    properties: {\r\n        _isMove: false,\r\n        attackTme: 1, //攻击时间\r\n    },\r\n    // get isMove() {\r\n    //     return this._isMove;\r\n    // },\r\n    emitMove(value) {\r\n        if (this._isMove != value) {\r\n            this._isMove = value;\r\n            if (value)\r\n                this.node.emit(\"key_down\", game.gameControl.left);\r\n            else\r\n                this.node.emit(\"key_up\", game.gameControl.left);\r\n        }\r\n    },\r\n    onLoad() {\r\n    },\r\n    unuse: function () {\r\n        this.node.off(\"onCollisionEnter\", this.onFindEnter, this);\r\n        this.node.off(\"onCollisionExit\", this.onFindExit, this);\r\n    },\r\n    reuse: function (data) {\r\n        this.sendTime = 0;\r\n        this.targets = [];\r\n        this.node.on(\"onCollisionEnter\", this.onFindEnter, this);\r\n        this.node.on(\"onCollisionExit\", this.onFindExit, this);\r\n    },\r\n    onEnable() {\r\n    },\r\n    onDisable() {\r\n    },\r\n    onDestroy() {\r\n    },\r\n    onFindEnter(target) {\r\n        if (this.node.isDeath) return;\r\n        var node = target.node;\r\n        if (this.targets.indexOf(node) < 0) {\r\n            this.targets.push(node);\r\n        }\r\n    },\r\n    onFindExit(target) {\r\n        if (this.node.isDeath) return;\r\n        var node = target.node;\r\n        var idx = this.targets.indexOf(node)\r\n        if (idx >= 0) {\r\n            this.targets.splice(idx, 1);\r\n        }\r\n    },\r\n    start() {\r\n    },\r\n    update(dt) {\r\n        if (game.isOver) return;//游戏结束\r\n        if (this.node.isDeath) return; //角色死亡\r\n        this.sendTime += dt;\r\n        if (this.targets.length > 0) { //有目标\r\n            this.emitMove(false);\r\n            if (this.sendTime > this.attackTme) //攻击时间到了\r\n            {\r\n                this.sendTime = 0;\r\n                this.node.emit(\"attack\");\r\n            }\r\n        }\r\n        else {\r\n            this.emitMove(true);//= true;\r\n        }\r\n    },\r\n});\r\n"]}